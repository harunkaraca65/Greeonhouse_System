
IM_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b25c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001208  0800b3f0  0800b3f0  0000c3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f8  0800c5f8  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f8  0800c5f8  0000d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c600  0800c600  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c600  0800c600  0000d600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c604  0800c604  0000d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c608  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1dc  2**0
                  CONTENTS
 10 .bss          0000082c  200001dc  200001dc  0000e1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a08  20000a08  0000e1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013338  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1a  00000000  00000000  00021544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00023f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  000251c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024409  00000000  00000000  0002603b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ae6  00000000  00000000  0004a444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1a6  00000000  00000000  00060f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e0d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006394  00000000  00000000  0013e114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001444a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3d4 	.word	0x0800b3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b3d4 	.word	0x0800b3d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Sensor_Init>:
Sensor ldrSensor;
Sensor mq135Sensor;

extern TIM_HandleTypeDef htim2;
// Sensör başlatma fonksiyonu
void Sensor_Init(Sensor* sensor, uint32_t channel) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    sensor->Channel = channel;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
    sensor->Value = 0;  // Başlangıç değeri sıfır
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	801a      	strh	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <Read_ADC_Channel>:

// ADC kanalı okuma fonksiyonu
uint16_t Read_ADC_Channel(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b088      	sub	sp, #32
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	60fb      	str	r3, [r7, #12]

    // ADC kanalını yapılandır
    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f001 fff3 	bl	8003014 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <Read_ADC_Channel+0x32>
        return 0; // Hata durumunda 0 döndür
 8001034:	2300      	movs	r3, #0
 8001036:	e01d      	b.n	8001074 <Read_ADC_Channel+0x6e>
    }

    // ADC dönüşüm işlemleri
    if (HAL_ADC_Start(hadc) != HAL_OK) {
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f001 fe4d 	bl	8002cd8 <HAL_ADC_Start>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <Read_ADC_Channel+0x42>
        return 0;
 8001044:	2300      	movs	r3, #0
 8001046:	e015      	b.n	8001074 <Read_ADC_Channel+0x6e>
    }
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK) {
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f001 ff48 	bl	8002ee2 <HAL_ADC_PollForConversion>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <Read_ADC_Channel+0x5c>
        HAL_ADC_Stop(hadc);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f001 ff0f 	bl	8002e7c <HAL_ADC_Stop>
        return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e008      	b.n	8001074 <Read_ADC_Channel+0x6e>
    }

    uint16_t value = HAL_ADC_GetValue(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 ffc8 	bl	8002ff8 <HAL_ADC_GetValue>
 8001068:	4603      	mov	r3, r0
 800106a:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(hadc);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f001 ff05 	bl	8002e7c <HAL_ADC_Stop>
    return value;
 8001072:	8bfb      	ldrh	r3, [r7, #30]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <map>:

// map fonksiyonunun tanımlanması
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	fb03 f202 	mul.w	r2, r3, r2
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1acb      	subs	r3, r1, r3
 80010a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	4413      	add	r3, r2
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <RGB_LED_Control>:

// RGB LED kontrol fonksiyonu
void RGB_LED_Control(Sensor* sensor) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
    uint16_t adcValue = sensor->Value;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	81fb      	strh	r3, [r7, #14]

    // ADC değeri 0-4095 arasında
    uint8_t redValue = map(adcValue, 0, 4095, 0, 255);
 80010c2:	89f8      	ldrh	r0, [r7, #14]
 80010c4:	23ff      	movs	r3, #255	@ 0xff
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010ce:	2100      	movs	r1, #0
 80010d0:	f7ff ffd4 	bl	800107c <map>
 80010d4:	4603      	mov	r3, r0
 80010d6:	737b      	strb	r3, [r7, #13]
    uint8_t greenValue = map(adcValue, 0, 4095, 0, 255);
 80010d8:	89f8      	ldrh	r0, [r7, #14]
 80010da:	23ff      	movs	r3, #255	@ 0xff
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010e4:	2100      	movs	r1, #0
 80010e6:	f7ff ffc9 	bl	800107c <map>
 80010ea:	4603      	mov	r3, r0
 80010ec:	733b      	strb	r3, [r7, #12]
    uint8_t blueValue = map(adcValue, 0, 4095, 0, 255);
 80010ee:	89f8      	ldrh	r0, [r7, #14]
 80010f0:	23ff      	movs	r3, #255	@ 0xff
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010fa:	2100      	movs	r1, #0
 80010fc:	f7ff ffbe 	bl	800107c <map>
 8001100:	4603      	mov	r3, r0
 8001102:	72fb      	strb	r3, [r7, #11]

    // PWM çıkışlarını ayarla
    __HAL_TIM_SET_COMPARE(&htim2, RED_PIN, redValue);
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <RGB_LED_Control+0x70>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	7b7a      	ldrb	r2, [r7, #13]
 800110a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, GREEN_PIN, greenValue);
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <RGB_LED_Control+0x70>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	7b3a      	ldrb	r2, [r7, #12]
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, BLUE_PIN, blueValue);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <RGB_LED_Control+0x70>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	7afa      	ldrb	r2, [r7, #11]
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000384 	.word	0x20000384

08001128 <Sensor_Read>:

// Sensör değerlerini okuma fonksiyonu
void Sensor_Read(Sensor* sensor, ADC_HandleTypeDef* hadc) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    sensor->Value = Read_ADC_Channel(hadc, sensor->Channel);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4619      	mov	r1, r3
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff ff64 	bl	8001006 <Read_ADC_Channel>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	801a      	strh	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <Sensor_System_Init>:


// Sistem başlatma fonksiyonu
void Sensor_System_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    // Sensörlerin yapılandırılması (kanal numaralarını ADC datasheet'e göre ayarla)
    Sensor_Init(&soilMoistureSensor, ADC_CHANNEL_1); // Toprak Nemi
 8001154:	2101      	movs	r1, #1
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <Sensor_System_Init+0x20>)
 8001158:	f7ff ff44 	bl	8000fe4 <Sensor_Init>
    Sensor_Init(&ldrSensor, ADC_CHANNEL_2);          // LDR
 800115c:	2102      	movs	r1, #2
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <Sensor_System_Init+0x24>)
 8001160:	f7ff ff40 	bl	8000fe4 <Sensor_Init>
    Sensor_Init(&mq135Sensor, ADC_CHANNEL_3);        // MQ135
 8001164:	2103      	movs	r1, #3
 8001166:	4804      	ldr	r0, [pc, #16]	@ (8001178 <Sensor_System_Init+0x28>)
 8001168:	f7ff ff3c 	bl	8000fe4 <Sensor_Init>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001f8 	.word	0x200001f8
 8001174:	20000200 	.word	0x20000200
 8001178:	20000208 	.word	0x20000208

0800117c <Sensor_System_Update>:

void Sensor_System_Update(ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc2, ADC_HandleTypeDef* hadc3) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    // Sensör değerlerini sırayla oku
    Sensor_Read(&soilMoistureSensor, hadc1); // ADC1'den oku
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <Sensor_System_Update+0x40>)
 800118c:	f7ff ffcc 	bl	8001128 <Sensor_Read>
    Sensor_Read(&ldrSensor, hadc2);          // ADC2'den oku
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <Sensor_System_Update+0x44>)
 8001194:	f7ff ffc8 	bl	8001128 <Sensor_Read>
    Sensor_Read(&mq135Sensor, hadc3);        // ADC3'ten oku
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <Sensor_System_Update+0x48>)
 800119c:	f7ff ffc4 	bl	8001128 <Sensor_Read>

    // RGB LED'i kontrol et
    RGB_LED_Control(&soilMoistureSensor);
 80011a0:	4806      	ldr	r0, [pc, #24]	@ (80011bc <Sensor_System_Update+0x40>)
 80011a2:	f7ff ff87 	bl	80010b4 <RGB_LED_Control>
    RGB_LED_Control(&ldrSensor);
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <Sensor_System_Update+0x44>)
 80011a8:	f7ff ff84 	bl	80010b4 <RGB_LED_Control>
    RGB_LED_Control(&mq135Sensor);
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <Sensor_System_Update+0x48>)
 80011ae:	f7ff ff81 	bl	80010b4 <RGB_LED_Control>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	20000200 	.word	0x20000200
 80011c4:	20000208 	.word	0x20000208

080011c8 <ADC_To_Percentage>:


// ADC değerini yüzdeye dönüştüren genel fonksiyon LDR VE Toprak Nem Algılama Sensörü İçin
uint8_t ADC_To_Percentage(Sensor* sensor) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    // ADC değeri 0-4095 arasında
    uint8_t percentage = (sensor->Value * 100) / 4095;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <ADC_To_Percentage+0x34>)
 80011de:	fb82 1203 	smull	r1, r2, r2, r3
 80011e2:	441a      	add	r2, r3
 80011e4:	12d2      	asrs	r2, r2, #11
 80011e6:	17db      	asrs	r3, r3, #31
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	73fb      	strb	r3, [r7, #15]
    return percentage;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	80080081 	.word	0x80080081

08001200 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <microDelay+0x30>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001212:	bf00      	nop
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <microDelay+0x30>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3f9      	bcc.n	8001214 <microDelay+0x14>
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000033c 	.word	0x2000033c

08001234 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800124c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001250:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	482d      	ldr	r0, [pc, #180]	@ (8001318 <DHT11_Start+0xe4>)
 8001264:	f002 fa98 	bl	8003798 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800126e:	482a      	ldr	r0, [pc, #168]	@ (8001318 <DHT11_Start+0xe4>)
 8001270:	f002 fc46 	bl	8003b00 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001274:	2014      	movs	r0, #20
 8001276:	f001 fcc7 	bl	8002c08 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001280:	4825      	ldr	r0, [pc, #148]	@ (8001318 <DHT11_Start+0xe4>)
 8001282:	f002 fc3d 	bl	8003b00 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001286:	201e      	movs	r0, #30
 8001288:	f7ff ffba 	bl	8001200 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	481f      	ldr	r0, [pc, #124]	@ (8001318 <DHT11_Start+0xe4>)
 800129a:	f002 fa7d 	bl	8003798 <HAL_GPIO_Init>
  microDelay (40);
 800129e:	2028      	movs	r0, #40	@ 0x28
 80012a0:	f7ff ffae 	bl	8001200 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	481b      	ldr	r0, [pc, #108]	@ (8001318 <DHT11_Start+0xe4>)
 80012aa:	f002 fc11 	bl	8003ad0 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <DHT11_Start+0x9a>
  {
    microDelay (80);
 80012b4:	2050      	movs	r0, #80	@ 0x50
 80012b6:	f7ff ffa3 	bl	8001200 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80012ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012be:	4816      	ldr	r0, [pc, #88]	@ (8001318 <DHT11_Start+0xe4>)
 80012c0:	f002 fc06 	bl	8003ad0 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <DHT11_Start+0x9a>
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80012ce:	f001 fc8f 	bl	8002bf0 <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a11      	ldr	r2, [pc, #68]	@ (800131c <DHT11_Start+0xe8>)
 80012d6:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80012d8:	f001 fc8a 	bl	8002bf0 <HAL_GetTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <DHT11_Start+0xec>)
 80012e0:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012e2:	e004      	b.n	80012ee <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 80012e4:	f001 fc84 	bl	8002bf0 <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <DHT11_Start+0xec>)
 80012ec:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <DHT11_Start+0xe4>)
 80012f4:	f002 fbec 	bl	8003ad0 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <DHT11_Start+0xd8>
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <DHT11_Start+0xe8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1c9a      	adds	r2, r3, #2
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <DHT11_Start+0xec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8eb      	bhi.n	80012e4 <DHT11_Start+0xb0>
  }
  return Response;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020400 	.word	0x40020400
 800131c:	20000484 	.word	0x20000484
 8001320:	20000488 	.word	0x20000488

08001324 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e066      	b.n	80013fe <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8001330:	f001 fc5e 	bl	8002bf0 <HAL_GetTick>
 8001334:	4603      	mov	r3, r0
 8001336:	4a36      	ldr	r2, [pc, #216]	@ (8001410 <DHT11_Read+0xec>)
 8001338:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800133a:	f001 fc59 	bl	8002bf0 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	4a34      	ldr	r2, [pc, #208]	@ (8001414 <DHT11_Read+0xf0>)
 8001342:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001344:	e004      	b.n	8001350 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001346:	f001 fc53 	bl	8002bf0 <HAL_GetTick>
 800134a:	4603      	mov	r3, r0
 800134c:	4a31      	ldr	r2, [pc, #196]	@ (8001414 <DHT11_Read+0xf0>)
 800134e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001354:	4830      	ldr	r0, [pc, #192]	@ (8001418 <DHT11_Read+0xf4>)
 8001356:	f002 fbbb 	bl	8003ad0 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d106      	bne.n	800136e <DHT11_Read+0x4a>
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <DHT11_Read+0xec>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1c9a      	adds	r2, r3, #2
 8001366:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <DHT11_Read+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d8eb      	bhi.n	8001346 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800136e:	2028      	movs	r0, #40	@ 0x28
 8001370:	f7ff ff46 	bl	8001200 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001378:	4827      	ldr	r0, [pc, #156]	@ (8001418 <DHT11_Read+0xf4>)
 800137a:	f002 fba9 	bl	8003ad0 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10e      	bne.n	80013a2 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2201      	movs	r2, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	b25b      	sxtb	r3, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	b25a      	sxtb	r2, r3
 8001396:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800139a:	4013      	ands	r3, r2
 800139c:	b25b      	sxtb	r3, r3
 800139e:	71bb      	strb	r3, [r7, #6]
 80013a0:	e00b      	b.n	80013ba <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f1c3 0307 	rsb	r3, r3, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80013ba:	f001 fc19 	bl	8002bf0 <HAL_GetTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <DHT11_Read+0xec>)
 80013c2:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80013c4:	f001 fc14 	bl	8002bf0 <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <DHT11_Read+0xf0>)
 80013cc:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80013ce:	e004      	b.n	80013da <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80013d0:	f001 fc0e 	bl	8002bf0 <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <DHT11_Read+0xf0>)
 80013d8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80013da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013de:	480e      	ldr	r0, [pc, #56]	@ (8001418 <DHT11_Read+0xf4>)
 80013e0:	f002 fb76 	bl	8003ad0 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <DHT11_Read+0xd4>
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <DHT11_Read+0xec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1c9a      	adds	r2, r3, #2
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <DHT11_Read+0xf0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8eb      	bhi.n	80013d0 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	3301      	adds	r3, #1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b07      	cmp	r3, #7
 8001402:	d995      	bls.n	8001330 <DHT11_Read+0xc>
    }
  }
  return b;
 8001404:	79bb      	ldrb	r3, [r7, #6]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000484 	.word	0x20000484
 8001414:	20000488 	.word	0x20000488
 8001418:	40020400 	.word	0x40020400

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	ed2d 8b02 	vpush	{d8}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(CONTROL_PORT, FAN_INA, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	48b6      	ldr	r0, [pc, #728]	@ (8001704 <main+0x2e8>)
 800142c:	f002 fb68 	bl	8003b00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONTROL_PORT, FAN_INB, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	48b3      	ldr	r0, [pc, #716]	@ (8001704 <main+0x2e8>)
 8001436:	f002 fb63 	bl	8003b00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INA, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2104      	movs	r1, #4
 800143e:	48b1      	ldr	r0, [pc, #708]	@ (8001704 <main+0x2e8>)
 8001440:	f002 fb5e 	bl	8003b00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INB, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2108      	movs	r1, #8
 8001448:	48ae      	ldr	r0, [pc, #696]	@ (8001704 <main+0x2e8>)
 800144a:	f002 fb59 	bl	8003b00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONTROL_PORT, PUMP_INB, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2120      	movs	r1, #32
 8001452:	48ac      	ldr	r0, [pc, #688]	@ (8001704 <main+0x2e8>)
 8001454:	f002 fb54 	bl	8003b00 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CONTROL_PORT, PUMP_INA, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	48a9      	ldr	r0, [pc, #676]	@ (8001704 <main+0x2e8>)
 800145e:	f002 fb4f 	bl	8003b00 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001462:	f001 fb5f 	bl	8002b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001466:	f000 fa23 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146a:	f000 fc97 	bl	8001d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800146e:	f000 fb7f 	bl	8001b70 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001472:	f000 fbab 	bl	8001bcc <MX_TIM1_Init>
  MX_ADC1_Init();
 8001476:	f000 fa85 	bl	8001984 <MX_ADC1_Init>
  MX_TIM2_Init();
 800147a:	f000 fbf7 	bl	8001c6c <MX_TIM2_Init>
  MX_ADC2_Init();
 800147e:	f000 fad3 	bl	8001a28 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001482:	f000 fb23 	bl	8001acc <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001486:	f000 fc5f 	bl	8001d48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 800148a:	2201      	movs	r2, #1
 800148c:	499e      	ldr	r1, [pc, #632]	@ (8001708 <main+0x2ec>)
 800148e:	489f      	ldr	r0, [pc, #636]	@ (800170c <main+0x2f0>)
 8001490:	f004 fcc9 	bl	8005e26 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 8001494:	489e      	ldr	r0, [pc, #632]	@ (8001710 <main+0x2f4>)
 8001496:	f003 fe01 	bl	800509c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800149a:	489e      	ldr	r0, [pc, #632]	@ (8001714 <main+0x2f8>)
 800149c:	f003 fdfe 	bl	800509c <HAL_TIM_Base_Start>
  SSD1306_Init();
 80014a0:	f000 fd48 	bl	8001f34 <SSD1306_Init>
  Sensor_System_Init(); // Sensörleri başlat
 80014a4:	f7ff fe54 	bl	8001150 <Sensor_System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if(DHT11_Start())
 80014a8:	f7ff fec4 	bl	8001234 <DHT11_Start>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80da 	beq.w	8001668 <main+0x24c>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 80014b4:	f7ff ff36 	bl	8001324 <DHT11_Read>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b96      	ldr	r3, [pc, #600]	@ (8001718 <main+0x2fc>)
 80014be:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 80014c0:	f7ff ff30 	bl	8001324 <DHT11_Read>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b94      	ldr	r3, [pc, #592]	@ (800171c <main+0x300>)
 80014ca:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 80014cc:	f7ff ff2a 	bl	8001324 <DHT11_Read>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <main+0x304>)
 80014d6:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 80014d8:	f7ff ff24 	bl	8001324 <DHT11_Read>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b90      	ldr	r3, [pc, #576]	@ (8001724 <main+0x308>)
 80014e2:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 80014e4:	f7ff ff1e 	bl	8001324 <DHT11_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001728 <main+0x30c>)
 80014ee:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 80014f0:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <main+0x2fc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b89      	ldr	r3, [pc, #548]	@ (800171c <main+0x300>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a88      	ldr	r2, [pc, #544]	@ (8001720 <main+0x304>)
 80014fe:	7812      	ldrb	r2, [r2, #0]
 8001500:	4413      	add	r3, r2
 8001502:	4a88      	ldr	r2, [pc, #544]	@ (8001724 <main+0x308>)
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a87      	ldr	r2, [pc, #540]	@ (8001728 <main+0x30c>)
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4293      	cmp	r3, r2
 800150e:	f040 80ab 	bne.w	8001668 <main+0x24c>
	      {
	        // Can use RHI and TCI for any purposes if whole number only needed
	        tCelsius = (float)TCI + (float)(TCD/10.0);
 8001512:	4b83      	ldr	r3, [pc, #524]	@ (8001720 <main+0x304>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800151e:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <main+0x308>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fffe 	bl	8000524 <__aeabi_i2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <main+0x310>)
 800152e:	f7ff f98d 	bl	800084c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb55 	bl	8000be8 <__aeabi_d2f>
 800153e:	ee07 0a90 	vmov	s15, r0
 8001542:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001546:	4b7a      	ldr	r3, [pc, #488]	@ (8001730 <main+0x314>)
 8001548:	edc3 7a00 	vstr	s15, [r3]
	        tFahrenheit = tCelsius * 9/5 + 32;
 800154c:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <main+0x314>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800155a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001734 <main+0x318>
 8001566:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156a:	4b73      	ldr	r3, [pc, #460]	@ (8001738 <main+0x31c>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
	        RH = (float)RHI + (float)(RHD/10.0);
 8001570:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <main+0x2fc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800157c:	4b67      	ldr	r3, [pc, #412]	@ (800171c <main+0x300>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffcf 	bl	8000524 <__aeabi_i2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b68      	ldr	r3, [pc, #416]	@ (800172c <main+0x310>)
 800158c:	f7ff f95e 	bl	800084c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb26 	bl	8000be8 <__aeabi_d2f>
 800159c:	ee07 0a90 	vmov	s15, r0
 80015a0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015a4:	4b65      	ldr	r3, [pc, #404]	@ (800173c <main+0x320>)
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	        // Can use tCelsius, tFahrenheit and RH for any purposes
	        TFI = tFahrenheit;  // Fahrenheit integral
 80015aa:	4b63      	ldr	r3, [pc, #396]	@ (8001738 <main+0x31c>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80015b8:	793b      	ldrb	r3, [r7, #4]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b60      	ldr	r3, [pc, #384]	@ (8001740 <main+0x324>)
 80015be:	701a      	strb	r2, [r3, #0]
	        TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 80015c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001738 <main+0x31c>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <main+0x324>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <main+0x328>)
 80015f6:	701a      	strb	r2, [r3, #0]
	        sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 80015f8:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <main+0x304>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <main+0x308>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4951      	ldr	r1, [pc, #324]	@ (8001748 <main+0x32c>)
 8001604:	4851      	ldr	r0, [pc, #324]	@ (800174c <main+0x330>)
 8001606:	f006 faad 	bl	8007b64 <siprintf>
	        SSD1306_GotoXY (0, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f000 fdfb 	bl	8002208 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	494e      	ldr	r1, [pc, #312]	@ (8001750 <main+0x334>)
 8001616:	484d      	ldr	r0, [pc, #308]	@ (800174c <main+0x330>)
 8001618:	f000 fe8a 	bl	8002330 <SSD1306_Puts>
	        sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 800161c:	4b48      	ldr	r3, [pc, #288]	@ (8001740 <main+0x324>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <main+0x328>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	494b      	ldr	r1, [pc, #300]	@ (8001754 <main+0x338>)
 8001628:	4848      	ldr	r0, [pc, #288]	@ (800174c <main+0x330>)
 800162a:	f006 fa9b 	bl	8007b64 <siprintf>
	        SSD1306_GotoXY (0, 20);
 800162e:	2114      	movs	r1, #20
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fde9 	bl	8002208 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	4945      	ldr	r1, [pc, #276]	@ (8001750 <main+0x334>)
 800163a:	4844      	ldr	r0, [pc, #272]	@ (800174c <main+0x330>)
 800163c:	f000 fe78 	bl	8002330 <SSD1306_Puts>
	        sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8001640:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <main+0x2fc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b35      	ldr	r3, [pc, #212]	@ (800171c <main+0x300>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4943      	ldr	r1, [pc, #268]	@ (8001758 <main+0x33c>)
 800164c:	483f      	ldr	r0, [pc, #252]	@ (800174c <main+0x330>)
 800164e:	f006 fa89 	bl	8007b64 <siprintf>
	        SSD1306_GotoXY (0, 40);
 8001652:	2128      	movs	r1, #40	@ 0x28
 8001654:	2000      	movs	r0, #0
 8001656:	f000 fdd7 	bl	8002208 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 800165a:	2201      	movs	r2, #1
 800165c:	493c      	ldr	r1, [pc, #240]	@ (8001750 <main+0x334>)
 800165e:	483b      	ldr	r0, [pc, #236]	@ (800174c <main+0x330>)
 8001660:	f000 fe66 	bl	8002330 <SSD1306_Puts>
	        SSD1306_UpdateScreen();
 8001664:	f000 fd2a 	bl	80020bc <SSD1306_UpdateScreen>
	      }
	    }
	    HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	@ 0x64
 800166a:	f001 facd 	bl	8002c08 <HAL_Delay>

       Sensor_System_Update(&hadc1,&hadc2,&hadc3); // Sensör değerlerini güncelle
 800166e:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <main+0x340>)
 8001670:	493b      	ldr	r1, [pc, #236]	@ (8001760 <main+0x344>)
 8001672:	483c      	ldr	r0, [pc, #240]	@ (8001764 <main+0x348>)
 8001674:	f7ff fd82 	bl	800117c <Sensor_System_Update>

	   SoilMoistureSensor = ADC_To_Percentage(&soilMoistureSensor);
 8001678:	483b      	ldr	r0, [pc, #236]	@ (8001768 <main+0x34c>)
 800167a:	f7ff fda5 	bl	80011c8 <ADC_To_Percentage>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <main+0x350>)
 8001684:	701a      	strb	r2, [r3, #0]

	   LdrSensor = ADC_To_Percentage(&ldrSensor);
 8001686:	483a      	ldr	r0, [pc, #232]	@ (8001770 <main+0x354>)
 8001688:	f7ff fd9e 	bl	80011c8 <ADC_To_Percentage>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <main+0x358>)
 8001692:	701a      	strb	r2, [r3, #0]

	   MQ135Sensor = ADC_To_Percentage(&mq135Sensor);
 8001694:	4838      	ldr	r0, [pc, #224]	@ (8001778 <main+0x35c>)
 8001696:	f7ff fd97 	bl	80011c8 <ADC_To_Percentage>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <main+0x360>)
 80016a0:	701a      	strb	r2, [r3, #0]

       // Fan kontrolü (Nem, sıcaklık ve CO2)
       if ( MQ135Sensor >= CO2_CRITICAL_PPM ||TCI >= TEMPERATURE_CRITICAL_HIGH ||RHI >= HUMIDITY_CRITICAL_HIGH ){
 80016a2:	4b36      	ldr	r3, [pc, #216]	@ (800177c <main+0x360>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d807      	bhi.n	80016ba <main+0x29e>
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <main+0x304>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b18      	cmp	r3, #24
 80016b0:	d803      	bhi.n	80016ba <main+0x29e>
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <main+0x2fc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b45      	cmp	r3, #69	@ 0x45
 80016b8:	d90a      	bls.n	80016d0 <main+0x2b4>
    	   HAL_GPIO_WritePin(CONTROL_PORT, FAN_INB, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2102      	movs	r1, #2
 80016be:	4811      	ldr	r0, [pc, #68]	@ (8001704 <main+0x2e8>)
 80016c0:	f002 fa1e 	bl	8003b00 <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(CONTROL_PORT, FAN_INA, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2101      	movs	r1, #1
 80016c8:	480e      	ldr	r0, [pc, #56]	@ (8001704 <main+0x2e8>)
 80016ca:	f002 fa19 	bl	8003b00 <HAL_GPIO_WritePin>
 80016ce:	e009      	b.n	80016e4 <main+0x2c8>
       }
       else
       {
    	   HAL_GPIO_WritePin(CONTROL_PORT, FAN_INB, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2102      	movs	r1, #2
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <main+0x2e8>)
 80016d6:	f002 fa13 	bl	8003b00 <HAL_GPIO_WritePin>
    	   HAL_GPIO_WritePin(CONTROL_PORT, FAN_INA, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2101      	movs	r1, #1
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <main+0x2e8>)
 80016e0:	f002 fa0e 	bl	8003b00 <HAL_GPIO_WritePin>
       }

        if ( LdrSensor >= LDR_CRITICAL){
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <main+0x358>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b4a      	cmp	r3, #74	@ 0x4a
 80016ea:	d949      	bls.n	8001780 <main+0x364>
     	   HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INA, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2104      	movs	r1, #4
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <main+0x2e8>)
 80016f2:	f002 fa05 	bl	8003b00 <HAL_GPIO_WritePin>
     	   HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INB, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2108      	movs	r1, #8
 80016fa:	4802      	ldr	r0, [pc, #8]	@ (8001704 <main+0x2e8>)
 80016fc:	f002 fa00 	bl	8003b00 <HAL_GPIO_WritePin>
 8001700:	e048      	b.n	8001794 <main+0x378>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	20000414 	.word	0x20000414
 800170c:	200003cc 	.word	0x200003cc
 8001710:	2000033c 	.word	0x2000033c
 8001714:	20000384 	.word	0x20000384
 8001718:	2000047f 	.word	0x2000047f
 800171c:	20000480 	.word	0x20000480
 8001720:	20000481 	.word	0x20000481
 8001724:	20000482 	.word	0x20000482
 8001728:	20000483 	.word	0x20000483
 800172c:	40240000 	.word	0x40240000
 8001730:	2000048c 	.word	0x2000048c
 8001734:	42000000 	.word	0x42000000
 8001738:	20000490 	.word	0x20000490
 800173c:	20000494 	.word	0x20000494
 8001740:	20000498 	.word	0x20000498
 8001744:	20000499 	.word	0x20000499
 8001748:	0800b3f0 	.word	0x0800b3f0
 800174c:	2000049c 	.word	0x2000049c
 8001750:	20000000 	.word	0x20000000
 8001754:	0800b3fc 	.word	0x0800b3fc
 8001758:	0800b408 	.word	0x0800b408
 800175c:	200002a0 	.word	0x200002a0
 8001760:	20000258 	.word	0x20000258
 8001764:	20000210 	.word	0x20000210
 8001768:	200001f8 	.word	0x200001f8
 800176c:	2000047c 	.word	0x2000047c
 8001770:	20000200 	.word	0x20000200
 8001774:	2000047d 	.word	0x2000047d
 8001778:	20000208 	.word	0x20000208
 800177c:	2000047e 	.word	0x2000047e
        }
        else
        {
     	   HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INA, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2104      	movs	r1, #4
 8001784:	483e      	ldr	r0, [pc, #248]	@ (8001880 <main+0x464>)
 8001786:	f002 f9bb 	bl	8003b00 <HAL_GPIO_WritePin>
     	   HAL_GPIO_WritePin(CONTROL_PORT, LIGHT_INB, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2108      	movs	r1, #8
 800178e:	483c      	ldr	r0, [pc, #240]	@ (8001880 <main+0x464>)
 8001790:	f002 f9b6 	bl	8003b00 <HAL_GPIO_WritePin>
        }
        if ( SoilMoistureSensor >= SOIL_MOISTURE_CRITICAL_LOW){
 8001794:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <main+0x468>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b4f      	cmp	r3, #79	@ 0x4f
 800179a:	d804      	bhi.n	80017a6 <main+0x38a>

               }
               else
               {
            	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	4839      	ldr	r0, [pc, #228]	@ (8001888 <main+0x46c>)
 80017a2:	f002 f9ad 	bl	8003b00 <HAL_GPIO_WritePin>
               }


       HAL_Delay(100); // 750 ms bekle */
 80017a6:	2064      	movs	r0, #100	@ 0x64
 80017a8:	f001 fa2e 	bl	8002c08 <HAL_Delay>

       memset(buffer, 0, sizeof(buffer));
 80017ac:	2264      	movs	r2, #100	@ 0x64
 80017ae:	2100      	movs	r1, #0
 80017b0:	4836      	ldr	r0, [pc, #216]	@ (800188c <main+0x470>)
 80017b2:	f006 fa3a 	bl	8007c2a <memset>
       // Buffer'ı temizle // Toprak nemi, LDR ve hava kalitesi verilerini aynı buffer'a ekleyin
       sprintf(buffer, "Topragin Nemi: %d\r\n", SoilMoistureSensor);
 80017b6:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <main+0x468>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4934      	ldr	r1, [pc, #208]	@ (8001890 <main+0x474>)
 80017be:	4833      	ldr	r0, [pc, #204]	@ (800188c <main+0x470>)
 80017c0:	f006 f9d0 	bl	8007b64 <siprintf>
       strcat(buffer, "LDR Degeri: ");
 80017c4:	4831      	ldr	r0, [pc, #196]	@ (800188c <main+0x470>)
 80017c6:	f7fe fd53 	bl	8000270 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <main+0x470>)
 80017d0:	4413      	add	r3, r2
 80017d2:	4a30      	ldr	r2, [pc, #192]	@ (8001894 <main+0x478>)
 80017d4:	461c      	mov	r4, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017da:	6020      	str	r0, [r4, #0]
 80017dc:	6061      	str	r1, [r4, #4]
 80017de:	60a2      	str	r2, [r4, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	7323      	strb	r3, [r4, #12]
       sprintf(buffer + strlen(buffer), "%d\r\n", LdrSensor);
 80017e4:	4829      	ldr	r0, [pc, #164]	@ (800188c <main+0x470>)
 80017e6:	f7fe fd43 	bl	8000270 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a27      	ldr	r2, [pc, #156]	@ (800188c <main+0x470>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <main+0x47c>)
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4929      	ldr	r1, [pc, #164]	@ (800189c <main+0x480>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 f9b4 	bl	8007b64 <siprintf>
       strcat(buffer, "Hava Kalitesi: ");
 80017fc:	4823      	ldr	r0, [pc, #140]	@ (800188c <main+0x470>)
 80017fe:	f7fe fd37 	bl	8000270 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <main+0x470>)
 8001808:	4413      	add	r3, r2
 800180a:	4a25      	ldr	r2, [pc, #148]	@ (80018a0 <main+0x484>)
 800180c:	461c      	mov	r4, r3
 800180e:	4615      	mov	r5, r2
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	6020      	str	r0, [r4, #0]
 8001814:	6061      	str	r1, [r4, #4]
 8001816:	60a2      	str	r2, [r4, #8]
 8001818:	60e3      	str	r3, [r4, #12]
       sprintf(buffer + strlen(buffer), "%d\r\n", MQ135Sensor);
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <main+0x470>)
 800181c:	f7fe fd28 	bl	8000270 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	4a1a      	ldr	r2, [pc, #104]	@ (800188c <main+0x470>)
 8001824:	4413      	add	r3, r2
 8001826:	4a1f      	ldr	r2, [pc, #124]	@ (80018a4 <main+0x488>)
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	491c      	ldr	r1, [pc, #112]	@ (800189c <main+0x480>)
 800182c:	4618      	mov	r0, r3
 800182e:	f006 f999 	bl	8007b64 <siprintf>
       // UART üzerinden verileri gönderin
       HAL_UART_Transmit_IT(&huart1, (uint8_t*)buffer, strlen(buffer));
 8001832:	4816      	ldr	r0, [pc, #88]	@ (800188c <main+0x470>)
 8001834:	f7fe fd1c 	bl	8000270 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	b29b      	uxth	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	4913      	ldr	r1, [pc, #76]	@ (800188c <main+0x470>)
 8001840:	4819      	ldr	r0, [pc, #100]	@ (80018a8 <main+0x48c>)
 8001842:	f004 faba 	bl	8005dba <HAL_UART_Transmit_IT>
       sprintf(msg, "%hu\r\n", SoilMoistureSensor);
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <main+0x468>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4916      	ldr	r1, [pc, #88]	@ (80018ac <main+0x490>)
 8001852:	4618      	mov	r0, r3
 8001854:	f006 f986 	bl	8007b64 <siprintf>
           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), LdrSensor);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fd07 	bl	8000270 <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <main+0x47c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f107 010c 	add.w	r1, r7, #12
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <main+0x48c>)
 8001870:	f004 fa18 	bl	8005ca4 <HAL_UART_Transmit>
       // 3 saniye bekleyin
       HAL_Delay(3000);
 8001874:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001878:	f001 f9c6 	bl	8002c08 <HAL_Delay>
	    if(DHT11_Start())
 800187c:	e614      	b.n	80014a8 <main+0x8c>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	2000047c 	.word	0x2000047c
 8001888:	40020000 	.word	0x40020000
 800188c:	20000418 	.word	0x20000418
 8001890:	0800b414 	.word	0x0800b414
 8001894:	0800b428 	.word	0x0800b428
 8001898:	2000047d 	.word	0x2000047d
 800189c:	0800b438 	.word	0x0800b438
 80018a0:	0800b440 	.word	0x0800b440
 80018a4:	2000047e 	.word	0x2000047e
 80018a8:	200003cc 	.word	0x200003cc
 80018ac:	0800b450 	.word	0x0800b450

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	@ 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2230      	movs	r2, #48	@ 0x30
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 f9b3 	bl	8007c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	4b28      	ldr	r3, [pc, #160]	@ (800197c <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	4a27      	ldr	r2, [pc, #156]	@ (800197c <SystemClock_Config+0xcc>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e4:	4b25      	ldr	r3, [pc, #148]	@ (800197c <SystemClock_Config+0xcc>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a21      	ldr	r2, [pc, #132]	@ (8001980 <SystemClock_Config+0xd0>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <SystemClock_Config+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001920:	2304      	movs	r3, #4
 8001922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001924:	23a8      	movs	r3, #168	@ 0xa8
 8001926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001928:	2302      	movs	r3, #2
 800192a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800192c:	2307      	movs	r3, #7
 800192e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fec9 	bl	80046cc <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001940:	f000 faf2 	bl	8001f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001950:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2105      	movs	r1, #5
 8001962:	4618      	mov	r0, r3
 8001964:	f003 f92a 	bl	8004bbc <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800196e:	f000 fadb 	bl	8001f28 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	@ 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <MX_ADC1_Init+0x98>)
 8001998:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <MX_ADC1_Init+0x9c>)
 800199a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_ADC1_Init+0x98>)
 800199e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019c6:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <MX_ADC1_Init+0xa0>)
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e4:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_ADC1_Init+0x98>)
 80019e6:	f001 f933 	bl	8002c50 <HAL_ADC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019f0:	f000 fa9a 	bl	8001f28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80019fc:	2301      	movs	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_ADC1_Init+0x98>)
 8001a06:	f001 fb05 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a10:	f000 fa8a 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000210 	.word	0x20000210
 8001a20:	40012000 	.word	0x40012000
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a3c:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <MX_ADC2_Init+0x9c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a46:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <MX_ADC2_Init+0xa0>)
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001a8a:	f001 f8e1 	bl	8002c50 <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001a94:	f000 fa48 	bl	8001f28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_ADC2_Init+0x98>)
 8001aaa:	f001 fab3 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ab4:	f000 fa38 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000258 	.word	0x20000258
 8001ac4:	40012100 	.word	0x40012100
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <MX_ADC3_Init+0x9c>)
 8001ae2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001ae6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001aea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b06:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <MX_ADC3_Init+0xa0>)
 8001b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b2c:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b2e:	f001 f88f 	bl	8002c50 <HAL_ADC_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001b38:	f000 f9f6 	bl	8001f28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_ADC3_Init+0x98>)
 8001b4e:	f001 fa61 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001b58:	f000 f9e6 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200002a0 	.word	0x200002a0
 8001b68:	40012200 	.word	0x40012200
 8001b6c:	0f000001 	.word	0x0f000001

08001b70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b76:	4a13      	ldr	r2, [pc, #76]	@ (8001bc4 <MX_I2C1_Init+0x54>)
 8001b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b7c:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_I2C1_Init+0x58>)
 8001b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001bae:	f001 ffc1 	bl	8003b34 <HAL_I2C_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb8:	f000 f9b6 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200002e8 	.word	0x200002e8
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	00061a80 	.word	0x00061a80

08001bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001bea:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <MX_TIM1_Init+0x9c>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001bf0:	22a7      	movs	r2, #167	@ 0xa7
 8001bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001bfc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c14:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c16:	f003 f9f1 	bl	8004ffc <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c20:	f000 f982 	bl	8001f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c32:	f003 fbad 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c3c:	f000 f974 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_TIM1_Init+0x98>)
 8001c4e:	f003 ff5d 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c58:	f000 f966 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000033c 	.word	0x2000033c
 8001c68:	40010000 	.word	0x40010000

08001c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001c98:	f240 628f 	movw	r2, #1679	@ 0x68f
 8001c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99-1;
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001ca6:	2262      	movs	r2, #98	@ 0x62
 8001ca8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb6:	4823      	ldr	r0, [pc, #140]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001cb8:	f003 fa58 	bl	800516c <HAL_TIM_PWM_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001cc2:	f000 f931 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481b      	ldr	r0, [pc, #108]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001cd6:	f003 ff19 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ce0:	f000 f922 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce4:	2360      	movs	r3, #96	@ 0x60
 8001ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001cfc:	f003 fa86 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d06:	f000 f90f 	bl	8001f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001d12:	f003 fa7b 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d1c:	f000 f904 	bl	8001f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2208      	movs	r2, #8
 8001d24:	4619      	mov	r1, r3
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001d28:	f003 fa70 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001d32:	f000 f8f9 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d36:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <MX_TIM2_Init+0xd8>)
 8001d38:	f000 fd10 	bl	800275c <HAL_TIM_MspPostInit>

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	@ 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000384 	.word	0x20000384

08001d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <MX_USART1_UART_Init+0x50>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d80:	f003 ff40 	bl	8005c04 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f000 f8cd 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200003cc 	.word	0x200003cc
 8001d98:	40011000 	.word	0x40011000

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a39      	ldr	r2, [pc, #228]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b30      	ldr	r3, [pc, #192]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INC_Pin|IND_Pin|INA_2_Pin|INB_2_Pin
 8001e22:	2200      	movs	r2, #0
 8001e24:	213f      	movs	r1, #63	@ 0x3f
 8001e26:	481f      	ldr	r0, [pc, #124]	@ (8001ea4 <MX_GPIO_Init+0x108>)
 8001e28:	f001 fe6a 	bl	8003b00 <HAL_GPIO_WritePin>
                          |INA_Pin|INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	481d      	ldr	r0, [pc, #116]	@ (8001ea8 <MX_GPIO_Init+0x10c>)
 8001e32:	f001 fe65 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e3c:	481b      	ldr	r0, [pc, #108]	@ (8001eac <MX_GPIO_Init+0x110>)
 8001e3e:	f001 fe5f 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INC_Pin IND_Pin INA_2_Pin INB_2_Pin
                           INA_Pin INB_Pin */
  GPIO_InitStruct.Pin = INC_Pin|IND_Pin|INA_2_Pin|INB_2_Pin
 8001e42:	233f      	movs	r3, #63	@ 0x3f
 8001e44:	617b      	str	r3, [r7, #20]
                          |INA_Pin|INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4812      	ldr	r0, [pc, #72]	@ (8001ea4 <MX_GPIO_Init+0x108>)
 8001e5a:	f001 fc9d 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <MX_GPIO_Init+0x10c>)
 8001e76:	f001 fc8f 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	@ (8001eac <MX_GPIO_Init+0x110>)
 8001e94:	f001 fc80 	bl	8003798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	@ 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400

08001eb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_UART_RxCpltCallback+0x54>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d11c      	bne.n	8001efc <HAL_UART_RxCpltCallback+0x4c>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ec8:	d105      	bne.n	8001ed6 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <HAL_UART_RxCpltCallback+0x5c>)
 8001ed0:	f001 fe16 	bl	8003b00 <HAL_GPIO_WritePin>
 8001ed4:	e008      	b.n	8001ee8 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b59      	cmp	r3, #89	@ 0x59
 8001edc:	d104      	bne.n	8001ee8 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <HAL_UART_RxCpltCallback+0x5c>)
 8001ee4:	f001 fe0c 	bl	8003b00 <HAL_GPIO_WritePin>
    }
    HAL_UART_Transmit_IT(&huart1, &rxData, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001eec:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <HAL_UART_RxCpltCallback+0x60>)
 8001eee:	f003 ff64 	bl	8005dba <HAL_UART_Transmit_IT>
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4904      	ldr	r1, [pc, #16]	@ (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <HAL_UART_RxCpltCallback+0x60>)
 8001ef8:	f003 ff95 	bl	8005e26 <HAL_UART_Receive_IT>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40011000 	.word	0x40011000
 8001f08:	20000414 	.word	0x20000414
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	200003cc 	.word	0x200003cc

08001f14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
	{
		// Veri gönderimi tamamlandığında yapılacak işlemler
	}

}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <Error_Handler+0x8>

08001f34 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f3a:	f000 fa1f 	bl	800237c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f3e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001f42:	2201      	movs	r2, #1
 8001f44:	2178      	movs	r1, #120	@ 0x78
 8001f46:	485b      	ldr	r0, [pc, #364]	@ (80020b4 <SSD1306_Init+0x180>)
 8001f48:	f002 f836 	bl	8003fb8 <HAL_I2C_IsDeviceReady>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e0a9      	b.n	80020aa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001f56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001f5a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f5c:	e002      	b.n	8001f64 <SSD1306_Init+0x30>
		p--;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f6a:	22ae      	movs	r2, #174	@ 0xae
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2078      	movs	r0, #120	@ 0x78
 8001f70:	f000 fa80 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001f74:	2220      	movs	r2, #32
 8001f76:	2100      	movs	r1, #0
 8001f78:	2078      	movs	r0, #120	@ 0x78
 8001f7a:	f000 fa7b 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f7e:	2210      	movs	r2, #16
 8001f80:	2100      	movs	r1, #0
 8001f82:	2078      	movs	r0, #120	@ 0x78
 8001f84:	f000 fa76 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f88:	22b0      	movs	r2, #176	@ 0xb0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2078      	movs	r0, #120	@ 0x78
 8001f8e:	f000 fa71 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f92:	22c8      	movs	r2, #200	@ 0xc8
 8001f94:	2100      	movs	r1, #0
 8001f96:	2078      	movs	r0, #120	@ 0x78
 8001f98:	f000 fa6c 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2078      	movs	r0, #120	@ 0x78
 8001fa2:	f000 fa67 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2078      	movs	r0, #120	@ 0x78
 8001fac:	f000 fa62 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001fb0:	2240      	movs	r2, #64	@ 0x40
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2078      	movs	r0, #120	@ 0x78
 8001fb6:	f000 fa5d 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001fba:	2281      	movs	r2, #129	@ 0x81
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2078      	movs	r0, #120	@ 0x78
 8001fc0:	f000 fa58 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fc4:	22ff      	movs	r2, #255	@ 0xff
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2078      	movs	r0, #120	@ 0x78
 8001fca:	f000 fa53 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fce:	22a1      	movs	r2, #161	@ 0xa1
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2078      	movs	r0, #120	@ 0x78
 8001fd4:	f000 fa4e 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fd8:	22a6      	movs	r2, #166	@ 0xa6
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2078      	movs	r0, #120	@ 0x78
 8001fde:	f000 fa49 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fe2:	22a8      	movs	r2, #168	@ 0xa8
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2078      	movs	r0, #120	@ 0x78
 8001fe8:	f000 fa44 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fec:	223f      	movs	r2, #63	@ 0x3f
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2078      	movs	r0, #120	@ 0x78
 8001ff2:	f000 fa3f 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ff6:	22a4      	movs	r2, #164	@ 0xa4
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2078      	movs	r0, #120	@ 0x78
 8001ffc:	f000 fa3a 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002000:	22d3      	movs	r2, #211	@ 0xd3
 8002002:	2100      	movs	r1, #0
 8002004:	2078      	movs	r0, #120	@ 0x78
 8002006:	f000 fa35 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2078      	movs	r0, #120	@ 0x78
 8002010:	f000 fa30 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002014:	22d5      	movs	r2, #213	@ 0xd5
 8002016:	2100      	movs	r1, #0
 8002018:	2078      	movs	r0, #120	@ 0x78
 800201a:	f000 fa2b 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800201e:	22f0      	movs	r2, #240	@ 0xf0
 8002020:	2100      	movs	r1, #0
 8002022:	2078      	movs	r0, #120	@ 0x78
 8002024:	f000 fa26 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002028:	22d9      	movs	r2, #217	@ 0xd9
 800202a:	2100      	movs	r1, #0
 800202c:	2078      	movs	r0, #120	@ 0x78
 800202e:	f000 fa21 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002032:	2222      	movs	r2, #34	@ 0x22
 8002034:	2100      	movs	r1, #0
 8002036:	2078      	movs	r0, #120	@ 0x78
 8002038:	f000 fa1c 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800203c:	22da      	movs	r2, #218	@ 0xda
 800203e:	2100      	movs	r1, #0
 8002040:	2078      	movs	r0, #120	@ 0x78
 8002042:	f000 fa17 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002046:	2212      	movs	r2, #18
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	@ 0x78
 800204c:	f000 fa12 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002050:	22db      	movs	r2, #219	@ 0xdb
 8002052:	2100      	movs	r1, #0
 8002054:	2078      	movs	r0, #120	@ 0x78
 8002056:	f000 fa0d 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800205a:	2220      	movs	r2, #32
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	@ 0x78
 8002060:	f000 fa08 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002064:	228d      	movs	r2, #141	@ 0x8d
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	@ 0x78
 800206a:	f000 fa03 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800206e:	2214      	movs	r2, #20
 8002070:	2100      	movs	r1, #0
 8002072:	2078      	movs	r0, #120	@ 0x78
 8002074:	f000 f9fe 	bl	8002474 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002078:	22af      	movs	r2, #175	@ 0xaf
 800207a:	2100      	movs	r1, #0
 800207c:	2078      	movs	r0, #120	@ 0x78
 800207e:	f000 f9f9 	bl	8002474 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002082:	222e      	movs	r2, #46	@ 0x2e
 8002084:	2100      	movs	r1, #0
 8002086:	2078      	movs	r0, #120	@ 0x78
 8002088:	f000 f9f4 	bl	8002474 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800208c:	2000      	movs	r0, #0
 800208e:	f000 f843 	bl	8002118 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002092:	f000 f813 	bl	80020bc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <SSD1306_Init+0x184>)
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SSD1306_Init+0x184>)
 800209e:	2200      	movs	r2, #0
 80020a0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80020a2:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <SSD1306_Init+0x184>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200002e8 	.word	0x200002e8
 80020b8:	200008ac 	.word	0x200008ac

080020bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	e01d      	b.n	8002104 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	3b50      	subs	r3, #80	@ 0x50
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	@ 0x78
 80020d4:	f000 f9ce 	bl	8002474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	@ 0x78
 80020de:	f000 f9c9 	bl	8002474 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020e2:	2210      	movs	r2, #16
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	@ 0x78
 80020e8:	f000 f9c4 	bl	8002474 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	01db      	lsls	r3, r3, #7
 80020f0:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <SSD1306_UpdateScreen+0x58>)
 80020f2:	441a      	add	r2, r3
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	2140      	movs	r1, #64	@ 0x40
 80020f8:	2078      	movs	r0, #120	@ 0x78
 80020fa:	f000 f955 	bl	80023a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	3301      	adds	r3, #1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b07      	cmp	r3, #7
 8002108:	d9de      	bls.n	80020c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200004ac 	.word	0x200004ac

08002118 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <SSD1306_Fill+0x14>
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <SSD1306_Fill+0x16>
 800212c:	23ff      	movs	r3, #255	@ 0xff
 800212e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002132:	4619      	mov	r1, r3
 8002134:	4803      	ldr	r0, [pc, #12]	@ (8002144 <SSD1306_Fill+0x2c>)
 8002136:	f005 fd78 	bl	8007c2a <memset>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200004ac 	.word	0x200004ac

08002148 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
 8002152:	460b      	mov	r3, r1
 8002154:	80bb      	strh	r3, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	70fb      	strb	r3, [r7, #3]
	if (
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	2b7f      	cmp	r3, #127	@ 0x7f
 800215e:	d848      	bhi.n	80021f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	2b3f      	cmp	r3, #63	@ 0x3f
 8002164:	d845      	bhi.n	80021f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <SSD1306_DrawPixel+0xb8>)
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d11a      	bne.n	80021b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	b298      	uxth	r0, r3
 800218a:	4603      	mov	r3, r0
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	4413      	add	r3, r2
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <SSD1306_DrawPixel+0xbc>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	b25a      	sxtb	r2, r3
 8002196:	88bb      	ldrh	r3, [r7, #4]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b259      	sxtb	r1, r3
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	4603      	mov	r3, r0
 80021ac:	01db      	lsls	r3, r3, #7
 80021ae:	4413      	add	r3, r2
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <SSD1306_DrawPixel+0xbc>)
 80021b4:	54d1      	strb	r1, [r2, r3]
 80021b6:	e01d      	b.n	80021f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	88bb      	ldrh	r3, [r7, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	b298      	uxth	r0, r3
 80021c0:	4603      	mov	r3, r0
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4413      	add	r3, r2
 80021c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <SSD1306_DrawPixel+0xbc>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	b25a      	sxtb	r2, r3
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	4013      	ands	r3, r2
 80021e0:	b259      	sxtb	r1, r3
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	4603      	mov	r3, r0
 80021e6:	01db      	lsls	r3, r3, #7
 80021e8:	4413      	add	r3, r2
 80021ea:	b2c9      	uxtb	r1, r1
 80021ec:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <SSD1306_DrawPixel+0xbc>)
 80021ee:	54d1      	strb	r1, [r2, r3]
 80021f0:	e000      	b.n	80021f4 <SSD1306_DrawPixel+0xac>
		return;
 80021f2:	bf00      	nop
	}
}
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200008ac 	.word	0x200008ac
 8002204:	200004ac 	.word	0x200004ac

08002208 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	460a      	mov	r2, r1
 8002212:	80fb      	strh	r3, [r7, #6]
 8002214:	4613      	mov	r3, r2
 8002216:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002218:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SSD1306_GotoXY+0x28>)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <SSD1306_GotoXY+0x28>)
 8002220:	88bb      	ldrh	r3, [r7, #4]
 8002222:	8053      	strh	r3, [r2, #2]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200008ac 	.word	0x200008ac

08002234 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002244:	4b39      	ldr	r3, [pc, #228]	@ (800232c <SSD1306_Putc+0xf8>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
	if (
 8002250:	2b7f      	cmp	r3, #127	@ 0x7f
 8002252:	dc07      	bgt.n	8002264 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <SSD1306_Putc+0xf8>)
 8002256:	885b      	ldrh	r3, [r3, #2]
 8002258:	461a      	mov	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002260:	2b3f      	cmp	r3, #63	@ 0x3f
 8002262:	dd01      	ble.n	8002268 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002264:	2300      	movs	r3, #0
 8002266:	e05d      	b.n	8002324 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e04b      	b.n	8002306 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	3b20      	subs	r3, #32
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	7849      	ldrb	r1, [r1, #1]
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4619      	mov	r1, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	440b      	add	r3, r1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e030      	b.n	80022f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <SSD1306_Putc+0xf8>)
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	b298      	uxth	r0, r3
 80022ae:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <SSD1306_Putc+0xf8>)
 80022b0:	885a      	ldrh	r2, [r3, #2]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	79ba      	ldrb	r2, [r7, #6]
 80022bc:	4619      	mov	r1, r3
 80022be:	f7ff ff43 	bl	8002148 <SSD1306_DrawPixel>
 80022c2:	e014      	b.n	80022ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <SSD1306_Putc+0xf8>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	b298      	uxth	r0, r3
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <SSD1306_Putc+0xf8>)
 80022d2:	885a      	ldrh	r2, [r3, #2]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4413      	add	r3, r2
 80022da:	b299      	uxth	r1, r3
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	f7ff ff2d 	bl	8002148 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3301      	adds	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d3c8      	bcc.n	8002292 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	461a      	mov	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4293      	cmp	r3, r2
 8002310:	d3ad      	bcc.n	800226e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <SSD1306_Putc+0xf8>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4413      	add	r3, r2
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b03      	ldr	r3, [pc, #12]	@ (800232c <SSD1306_Putc+0xf8>)
 8002320:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002322:	79fb      	ldrb	r3, [r7, #7]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200008ac 	.word	0x200008ac

08002330 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800233e:	e012      	b.n	8002366 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	79fa      	ldrb	r2, [r7, #7]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff73 	bl	8002234 <SSD1306_Putc>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d002      	beq.n	8002360 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	e008      	b.n	8002372 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e8      	bne.n	8002340 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <ssd1306_I2C_Init+0x28>)
 8002384:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002386:	e002      	b.n	800238e <ssd1306_I2C_Init+0x12>
		p--;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	0003d090 	.word	0x0003d090

080023a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b0c7      	sub	sp, #284	@ 0x11c
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80023b6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80023ba:	600a      	str	r2, [r1, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023c2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80023c6:	4622      	mov	r2, r4
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023ce:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80023d2:	4602      	mov	r2, r0
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023de:	460a      	mov	r2, r1
 80023e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80023e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80023ee:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80023fc:	e015      	b.n	800242a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80023fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002402:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002406:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	441a      	add	r2, r3
 800240e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002412:	3301      	adds	r3, #1
 8002414:	7811      	ldrb	r1, [r2, #0]
 8002416:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800241a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800241e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002420:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002424:	3301      	adds	r3, #1
 8002426:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800242a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800242e:	b29b      	uxth	r3, r3
 8002430:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002434:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d8df      	bhi.n	80023fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800243e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002442:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b299      	uxth	r1, r3
 800244a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800244e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	200a      	movs	r0, #10
 800245e:	9000      	str	r0, [sp, #0]
 8002460:	4803      	ldr	r0, [pc, #12]	@ (8002470 <ssd1306_I2C_WriteMulti+0xc8>)
 8002462:	f001 fcab 	bl	8003dbc <HAL_I2C_Master_Transmit>
}
 8002466:	bf00      	nop
 8002468:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	200002e8 	.word	0x200002e8

08002474 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
 800247e:	460b      	mov	r3, r1
 8002480:	71bb      	strb	r3, [r7, #6]
 8002482:	4613      	mov	r3, r2
 8002484:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800248a:	797b      	ldrb	r3, [r7, #5]
 800248c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	b299      	uxth	r1, r3
 8002492:	f107 020c 	add.w	r2, r7, #12
 8002496:	230a      	movs	r3, #10
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2302      	movs	r3, #2
 800249c:	4803      	ldr	r0, [pc, #12]	@ (80024ac <ssd1306_I2C_Write+0x38>)
 800249e:	f001 fc8d 	bl	8003dbc <HAL_I2C_Master_Transmit>
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002e8 	.word	0x200002e8

080024b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ee:	2007      	movs	r0, #7
 80024f0:	f001 f87e 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	@ 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a45      	ldr	r2, [pc, #276]	@ (8002634 <HAL_ADC_MspInit+0x134>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d128      	bne.n	8002574 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	4b44      	ldr	r3, [pc, #272]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a43      	ldr	r2, [pc, #268]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a3c      	ldr	r2, [pc, #240]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800255a:	2302      	movs	r3, #2
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800256a:	4619      	mov	r1, r3
 800256c:	4833      	ldr	r0, [pc, #204]	@ (800263c <HAL_ADC_MspInit+0x13c>)
 800256e:	f001 f913 	bl	8003798 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002572:	e05a      	b.n	800262a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a31      	ldr	r2, [pc, #196]	@ (8002640 <HAL_ADC_MspInit+0x140>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d128      	bne.n	80025d0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a25      	ldr	r2, [pc, #148]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025b6:	2304      	movs	r3, #4
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c6:	4619      	mov	r1, r3
 80025c8:	481c      	ldr	r0, [pc, #112]	@ (800263c <HAL_ADC_MspInit+0x13c>)
 80025ca:	f001 f8e5 	bl	8003798 <HAL_GPIO_Init>
}
 80025ce:	e02c      	b.n	800262a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <HAL_ADC_MspInit+0x144>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d127      	bne.n	800262a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_ADC_MspInit+0x138>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002612:	2308      	movs	r3, #8
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002616:	2303      	movs	r3, #3
 8002618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4805      	ldr	r0, [pc, #20]	@ (800263c <HAL_ADC_MspInit+0x13c>)
 8002626:	f001 f8b7 	bl	8003798 <HAL_GPIO_Init>
}
 800262a:	bf00      	nop
 800262c:	3738      	adds	r7, #56	@ 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40012000 	.word	0x40012000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000
 8002640:	40012100 	.word	0x40012100
 8002644:	40012200 	.word	0x40012200

08002648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_I2C_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002686:	23c0      	movs	r3, #192	@ 0xc0
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002696:	2304      	movs	r3, #4
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <HAL_I2C_MspInit+0x8c>)
 80026a2:	f001 f879 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_I2C_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <HAL_TIM_Base_MspInit+0x3c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_TIM_Base_MspInit+0x40>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d10d      	bne.n	800274a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_TIM_PWM_MspInit+0x3c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	@ (8002758 <HAL_TIM_PWM_MspInit+0x3c>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_TIM_PWM_MspInit+0x3c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277c:	d13c      	bne.n	80027f8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a1e      	ldr	r2, [pc, #120]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_TIM_MspPostInit+0xa4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027b6:	2320      	movs	r3, #32
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c6:	2301      	movs	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <HAL_TIM_MspPostInit+0xa8>)
 80027d2:	f000 ffe1 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80027d6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_TIM_MspPostInit+0xac>)
 80027f4:	f000 ffd0 	bl	8003798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	@ 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400

0800280c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_UART_MspInit+0x94>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d134      	bne.n	8002898 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6453      	str	r3, [r2, #68]	@ 0x44
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_UART_MspInit+0x98>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002866:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002878:	2307      	movs	r3, #7
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4809      	ldr	r0, [pc, #36]	@ (80028a8 <HAL_UART_MspInit+0x9c>)
 8002884:	f000 ff88 	bl	8003798 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2025      	movs	r0, #37	@ 0x25
 800288e:	f000 feba 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002892:	2025      	movs	r0, #37	@ 0x25
 8002894:	f000 fed3 	bl	800363e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	@ 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40011000 	.word	0x40011000
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020000 	.word	0x40020000

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <NMI_Handler+0x4>

080028b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <MemManage_Handler+0x4>

080028c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002902:	f000 f961 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <USART1_IRQHandler+0x10>)
 8002912:	f003 faad 	bl	8005e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200003cc 	.word	0x200003cc

08002920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return 1;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_kill>:

int _kill(int pid, int sig)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800293a:	f005 f9c9 	bl	8007cd0 <__errno>
 800293e:	4603      	mov	r3, r0
 8002940:	2216      	movs	r2, #22
 8002942:	601a      	str	r2, [r3, #0]
  return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_exit>:

void _exit (int status)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffe7 	bl	8002930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <_exit+0x12>

08002966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e00a      	b.n	800298e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002978:	f3af 8000 	nop.w
 800297c:	4601      	mov	r1, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	60ba      	str	r2, [r7, #8]
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	dbf0      	blt.n	8002978 <_read+0x12>
  }

  return len;
 8002996:	687b      	ldr	r3, [r7, #4]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e009      	b.n	80029c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	60ba      	str	r2, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dbf1      	blt.n	80029b2 <_write+0x12>
  }
  return len;
 80029ce:	687b      	ldr	r3, [r7, #4]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_close>:

int _close(int file)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a00:	605a      	str	r2, [r3, #4]
  return 0;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_isatty>:

int _isatty(int file)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <_sbrk+0x5c>)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <_sbrk+0x60>)
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <_sbrk+0x64>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <_sbrk+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a70:	f005 f92e 	bl	8007cd0 <__errno>
 8002a74:	4603      	mov	r3, r0
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a05      	ldr	r2, [pc, #20]	@ (8002aa4 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20020000 	.word	0x20020000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	200008b4 	.word	0x200008b4
 8002aa8:	20000a08 	.word	0x20000a08

08002aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <SystemInit+0x20>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <SystemInit+0x20>)
 8002ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ad4:	f7ff ffea 	bl	8002aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afe:	f005 f8ed 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7fe fc8b 	bl	800141c <main>
  bx  lr    
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b14:	0800c608 	.word	0x0800c608
  ldr r2, =_sbss
 8002b18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b1c:	20000a08 	.word	0x20000a08

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 fd4f 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff fcaa 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd67 	bl	800365a <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f000 fd2f 	bl	8003606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000010 	.word	0x20000010
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000010 	.word	0x20000010
 8002bec:	200008b8 	.word	0x200008b8

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200008b8 	.word	0x200008b8

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000010 	.word	0x20000010

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e033      	b.n	8002cce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fc46 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fad8 	bl	8003258 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Start+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0b2      	b.n	8002e58 <HAL_ADC_Start+0x180>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d018      	beq.n	8002d3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d18:	4b52      	ldr	r3, [pc, #328]	@ (8002e64 <HAL_ADC_Start+0x18c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_ADC_Start+0x190>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9a      	lsrs	r2, r3, #18
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d2c:	e002      	b.n	8002d34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f9      	bne.n	8002d2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d17a      	bne.n	8002e3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d86:	d106      	bne.n	8002d96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	f023 0206 	bic.w	r2, r3, #6
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da4:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <HAL_ADC_Start+0x194>)
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002db0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d12a      	bne.n	8002e14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e70 <HAL_ADC_Start+0x198>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d015      	beq.n	8002df4 <HAL_ADC_Start+0x11c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a29      	ldr	r2, [pc, #164]	@ (8002e74 <HAL_ADC_Start+0x19c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_Start+0x106>
 8002dd2:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_ADC_Start+0x194>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a25      	ldr	r2, [pc, #148]	@ (8002e78 <HAL_ADC_Start+0x1a0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d136      	bne.n	8002e56 <HAL_ADC_Start+0x17e>
 8002de8:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <HAL_ADC_Start+0x194>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d130      	bne.n	8002e56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d129      	bne.n	8002e56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	e020      	b.n	8002e56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <HAL_ADC_Start+0x198>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d11b      	bne.n	8002e56 <HAL_ADC_Start+0x17e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d114      	bne.n	8002e56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e00b      	b.n	8002e56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f043 0210 	orr.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	20000008 	.word	0x20000008
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	40012000 	.word	0x40012000
 8002e74:	40012100 	.word	0x40012100
 8002e78:	40012200 	.word	0x40012200

08002e7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_Stop+0x16>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e021      	b.n	8002ed6 <HAL_ADC_Stop+0x5a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efe:	d113      	bne.n	8002f28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e063      	b.n	8002ff0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f28:	f7ff fe62 	bl	8002bf0 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f2e:	e021      	b.n	8002f74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d01d      	beq.n	8002f74 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_ADC_PollForConversion+0x6c>
 8002f3e:	f7ff fe57 	bl	8002bf0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d212      	bcs.n	8002f74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d00b      	beq.n	8002f74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e03d      	b.n	8002ff0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d1d6      	bne.n	8002f30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f06f 0212 	mvn.w	r2, #18
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d123      	bne.n	8002fee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d111      	bne.n	8002fee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e105      	b.n	800323c <HAL_ADC_ConfigChannel+0x228>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d925      	bls.n	800308c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	3b1e      	subs	r3, #30
 8003056:	2207      	movs	r2, #7
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43da      	mvns	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	400a      	ands	r2, r1
 8003064:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68d9      	ldr	r1, [r3, #12]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	4618      	mov	r0, r3
 8003078:	4603      	mov	r3, r0
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4403      	add	r3, r0
 800307e:	3b1e      	subs	r3, #30
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	e022      	b.n	80030d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	2207      	movs	r2, #7
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	400a      	ands	r2, r1
 80030ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4403      	add	r3, r0
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d824      	bhi.n	8003124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b05      	subs	r3, #5
 80030ec:	221f      	movs	r2, #31
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b05      	subs	r3, #5
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34
 8003122:	e04c      	b.n	80031be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d824      	bhi.n	8003176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	@ 0x23
 800313e:	221f      	movs	r2, #31
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43da      	mvns	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	400a      	ands	r2, r1
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	4618      	mov	r0, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	3b23      	subs	r3, #35	@ 0x23
 8003168:	fa00 f203 	lsl.w	r2, r0, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
 8003174:	e023      	b.n	80031be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b41      	subs	r3, #65	@ 0x41
 8003188:	221f      	movs	r2, #31
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b41      	subs	r3, #65	@ 0x41
 80031b2:	fa00 f203 	lsl.w	r2, r0, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031be:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <HAL_ADC_ConfigChannel+0x234>)
 80031c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a21      	ldr	r2, [pc, #132]	@ (800324c <HAL_ADC_ConfigChannel+0x238>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d109      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1cc>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a19      	ldr	r2, [pc, #100]	@ (800324c <HAL_ADC_ConfigChannel+0x238>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d123      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x21e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d003      	beq.n	80031fa <HAL_ADC_ConfigChannel+0x1e6>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d11b      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b10      	cmp	r3, #16
 800320c:	d111      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_ADC_ConfigChannel+0x23c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a10      	ldr	r2, [pc, #64]	@ (8003254 <HAL_ADC_ConfigChannel+0x240>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0c9a      	lsrs	r2, r3, #18
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003224:	e002      	b.n	800322c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40012300 	.word	0x40012300
 800324c:	40012000 	.word	0x40012000
 8003250:	20000008 	.word	0x20000008
 8003254:	431bde83 	.word	0x431bde83

08003258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003260:	4b79      	ldr	r3, [pc, #484]	@ (8003448 <ADC_Init+0x1f0>)
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800328c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	4a58      	ldr	r2, [pc, #352]	@ (800344c <ADC_Init+0x1f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6899      	ldr	r1, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e00f      	b.n	8003356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003354:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0202 	bic.w	r2, r2, #2
 8003364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6899      	ldr	r1, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7e1b      	ldrb	r3, [r3, #24]
 8003370:	005a      	lsls	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003392:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	3b01      	subs	r3, #1
 80033b0:	035a      	lsls	r2, r3, #13
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e007      	b.n	80033cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	051a      	lsls	r2, r3, #20
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800340e:	025a      	lsls	r2, r3, #9
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	029a      	lsls	r2, r3, #10
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40012300 	.word	0x40012300
 800344c:	0f000001 	.word	0x0f000001

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	@ (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	@ (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	@ (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	@ 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff29 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003618:	f7ff ff3e 	bl	8003498 <__NVIC_GetPriorityGrouping>
 800361c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff8e 	bl	8003544 <NVIC_EncodePriority>
 8003628:	4602      	mov	r2, r0
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <__NVIC_SetPriority>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff31 	bl	80034b4 <__NVIC_EnableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffa2 	bl	80035ac <SysTick_Config>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fab6 	bl	8002bf0 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d008      	beq.n	80036a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2280      	movs	r2, #128	@ 0x80
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e052      	b.n	800374a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0216 	bic.w	r2, r2, #22
 80036b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <HAL_DMA_Abort+0x62>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0208 	bic.w	r2, r2, #8
 80036e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f4:	e013      	b.n	800371e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f6:	f7ff fa7b 	bl	8002bf0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b05      	cmp	r3, #5
 8003702:	d90c      	bls.n	800371e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e015      	b.n	800374a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e4      	bne.n	80036f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	223f      	movs	r2, #63	@ 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d004      	beq.n	8003770 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e00c      	b.n	800378a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2205      	movs	r2, #5
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	@ 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e16b      	b.n	8003a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f040 815a 	bne.w	8003a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d005      	beq.n	80037ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d130      	bne.n	800384c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0201 	and.w	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d017      	beq.n	8003888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d123      	bne.n	80038dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	08da      	lsrs	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3208      	adds	r2, #8
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80b4 	beq.w	8003a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b60      	ldr	r3, [pc, #384]	@ (8003aa4 <HAL_GPIO_Init+0x30c>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa4 <HAL_GPIO_Init+0x30c>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392c:	6453      	str	r3, [r2, #68]	@ 0x44
 800392e:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa4 <HAL_GPIO_Init+0x30c>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393a:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa8 <HAL_GPIO_Init+0x310>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a52      	ldr	r2, [pc, #328]	@ (8003aac <HAL_GPIO_Init+0x314>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02b      	beq.n	80039be <HAL_GPIO_Init+0x226>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a51      	ldr	r2, [pc, #324]	@ (8003ab0 <HAL_GPIO_Init+0x318>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d025      	beq.n	80039ba <HAL_GPIO_Init+0x222>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a50      	ldr	r2, [pc, #320]	@ (8003ab4 <HAL_GPIO_Init+0x31c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01f      	beq.n	80039b6 <HAL_GPIO_Init+0x21e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4f      	ldr	r2, [pc, #316]	@ (8003ab8 <HAL_GPIO_Init+0x320>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d019      	beq.n	80039b2 <HAL_GPIO_Init+0x21a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4e      	ldr	r2, [pc, #312]	@ (8003abc <HAL_GPIO_Init+0x324>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_GPIO_Init+0x216>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac0 <HAL_GPIO_Init+0x328>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00d      	beq.n	80039aa <HAL_GPIO_Init+0x212>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac4 <HAL_GPIO_Init+0x32c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <HAL_GPIO_Init+0x20e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4b      	ldr	r2, [pc, #300]	@ (8003ac8 <HAL_GPIO_Init+0x330>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_GPIO_Init+0x20a>
 800399e:	2307      	movs	r3, #7
 80039a0:	e00e      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039a2:	2308      	movs	r3, #8
 80039a4:	e00c      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039a6:	2306      	movs	r3, #6
 80039a8:	e00a      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039aa:	2305      	movs	r3, #5
 80039ac:	e008      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039ae:	2304      	movs	r3, #4
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039b2:	2303      	movs	r3, #3
 80039b4:	e004      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e002      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_GPIO_Init+0x228>
 80039be:	2300      	movs	r3, #0
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	f002 0203 	and.w	r2, r2, #3
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	4093      	lsls	r3, r2
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d0:	4935      	ldr	r1, [pc, #212]	@ (8003aa8 <HAL_GPIO_Init+0x310>)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039de:	4b3b      	ldr	r3, [pc, #236]	@ (8003acc <HAL_GPIO_Init+0x334>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a02:	4a32      	ldr	r2, [pc, #200]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a08:	4b30      	ldr	r3, [pc, #192]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a2c:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a32:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a56:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a80:	4a12      	ldr	r2, [pc, #72]	@ (8003acc <HAL_GPIO_Init+0x334>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b0f      	cmp	r3, #15
 8003a90:	f67f ae90 	bls.w	80037b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3724      	adds	r7, #36	@ 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020c00 	.word	0x40020c00
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40021400 	.word	0x40021400
 8003ac4:	40021800 	.word	0x40021800
 8003ac8:	40021c00 	.word	0x40021c00
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e001      	b.n	8003af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b1c:	e003      	b.n	8003b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	041a      	lsls	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e12b      	b.n	8003d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe fd74 	bl	8002648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	@ 0x24
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b98:	f001 fa08 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a81      	ldr	r2, [pc, #516]	@ (8003da8 <HAL_I2C_Init+0x274>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d807      	bhi.n	8003bb8 <HAL_I2C_Init+0x84>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a80      	ldr	r2, [pc, #512]	@ (8003dac <HAL_I2C_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bf94      	ite	ls
 8003bb0:	2301      	movls	r3, #1
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e006      	b.n	8003bc6 <HAL_I2C_Init+0x92>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a7d      	ldr	r2, [pc, #500]	@ (8003db0 <HAL_I2C_Init+0x27c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bf94      	ite	ls
 8003bc0:	2301      	movls	r3, #1
 8003bc2:	2300      	movhi	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0e7      	b.n	8003d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a78      	ldr	r2, [pc, #480]	@ (8003db4 <HAL_I2C_Init+0x280>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0c9b      	lsrs	r3, r3, #18
 8003bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8003da8 <HAL_I2C_Init+0x274>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d802      	bhi.n	8003c08 <HAL_I2C_Init+0xd4>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3301      	adds	r3, #1
 8003c06:	e009      	b.n	8003c1c <HAL_I2C_Init+0xe8>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	4a69      	ldr	r2, [pc, #420]	@ (8003db8 <HAL_I2C_Init+0x284>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	495c      	ldr	r1, [pc, #368]	@ (8003da8 <HAL_I2C_Init+0x274>)
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	d819      	bhi.n	8003c70 <HAL_I2C_Init+0x13c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e59      	subs	r1, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c4a:	1c59      	adds	r1, r3, #1
 8003c4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c50:	400b      	ands	r3, r1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_I2C_Init+0x138>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1e59      	subs	r1, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6a:	e051      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	e04f      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d111      	bne.n	8003c9c <HAL_I2C_Init+0x168>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	440b      	add	r3, r1
 8003c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e012      	b.n	8003cc2 <HAL_I2C_Init+0x18e>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Init+0x196>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e022      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_I2C_Init+0x1bc>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e58      	subs	r0, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	440b      	add	r3, r1
 8003ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cee:	e00f      	b.n	8003d10 <HAL_I2C_Init+0x1dc>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	6809      	ldr	r1, [r1, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6911      	ldr	r1, [r2, #16]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	000186a0 	.word	0x000186a0
 8003dac:	001e847f 	.word	0x001e847f
 8003db0:	003d08ff 	.word	0x003d08ff
 8003db4:	431bde83 	.word	0x431bde83
 8003db8:	10624dd3 	.word	0x10624dd3

08003dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	817b      	strh	r3, [r7, #10]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7fe ff0e 	bl	8002bf0 <HAL_GetTick>
 8003dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	f040 80e0 	bne.w	8003fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	4970      	ldr	r1, [pc, #448]	@ (8003fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fa92 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0d3      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_I2C_Master_Transmit+0x50>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d007      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2221      	movs	r2, #33	@ 0x21
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	893a      	ldrh	r2, [r7, #8]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a50      	ldr	r2, [pc, #320]	@ (8003fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f9ca 	bl	8004214 <I2C_MasterRequestWrite>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e08d      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ea0:	e066      	b.n	8003f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fb50 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06b      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d11b      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0x188>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	6a39      	ldr	r1, [r7, #32]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fb47 	bl	80045dc <I2C_WaitOnBTFFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d107      	bne.n	8003f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e01a      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d194      	bne.n	8003ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000

08003fb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	@ 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fc8:	f7fe fe12 	bl	8002bf0 <HAL_GetTick>
 8003fcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 8111 	bne.w	8004202 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2319      	movs	r3, #25
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4988      	ldr	r1, [pc, #544]	@ (800420c <HAL_I2C_IsDeviceReady+0x254>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f994 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e104      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2C_IsDeviceReady+0x50>
 8004004:	2302      	movs	r3, #2
 8004006:	e0fd      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d007      	beq.n	800402e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2224      	movs	r2, #36	@ 0x24
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a70      	ldr	r2, [pc, #448]	@ (8004210 <HAL_I2C_IsDeviceReady+0x258>)
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004060:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f952 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004088:	d103      	bne.n	8004092 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004090:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0b6      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fe fda3 	bl	8002bf0 <HAL_GetTick>
 80040aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040da:	e025      	b.n	8004128 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040dc:	f7fe fd88 	bl	8002bf0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <HAL_I2C_IsDeviceReady+0x13a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22a0      	movs	r2, #160	@ 0xa0
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2ba0      	cmp	r3, #160	@ 0xa0
 8004132:	d005      	beq.n	8004140 <HAL_I2C_IsDeviceReady+0x188>
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_I2C_IsDeviceReady+0x188>
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0cd      	beq.n	80040dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d129      	bne.n	80041aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004164:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2319      	movs	r3, #25
 8004182:	2201      	movs	r2, #1
 8004184:	4921      	ldr	r1, [pc, #132]	@ (800420c <HAL_I2C_IsDeviceReady+0x254>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8c6 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e036      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e02c      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2319      	movs	r3, #25
 80041ca:	2201      	movs	r2, #1
 80041cc:	490f      	ldr	r1, [pc, #60]	@ (800420c <HAL_I2C_IsDeviceReady+0x254>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f8a2 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e012      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	f4ff af32 	bcc.w	8004052 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00100002 	.word	0x00100002
 8004210:	ffff0000 	.word	0xffff0000

08004214 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	460b      	mov	r3, r1
 8004222:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d006      	beq.n	800423e <I2C_MasterRequestWrite+0x2a>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <I2C_MasterRequestWrite+0x2a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00b      	b.n	8004268 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	2b12      	cmp	r3, #18
 8004256:	d107      	bne.n	8004268 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f84f 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428e:	d103      	bne.n	8004298 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e035      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a4:	d108      	bne.n	80042b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e01b      	b.n	80042f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030f 	orn	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	490e      	ldr	r1, [pc, #56]	@ (8004310 <I2C_MasterRequestWrite+0xfc>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f898 	bl	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e010      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4907      	ldr	r1, [pc, #28]	@ (8004314 <I2C_MasterRequestWrite+0x100>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f888 	bl	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	00010008 	.word	0x00010008
 8004314:	00010002 	.word	0x00010002

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e048      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d044      	beq.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fc5d 	bl	8002bf0 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d139      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d10d      	bne.n	800436e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	e00c      	b.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x70>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	43da      	mvns	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	d116      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e023      	b.n	8004404 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d093      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441a:	e071      	b.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442a:	d123      	bne.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e067      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d041      	beq.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fe fbb8 	bl	8002bf0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d136      	bne.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10c      	bne.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf14      	ite	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	2300      	moveq	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e00b      	b.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e021      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10c      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e00b      	b.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f47f af6d 	bne.w	800441c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	e034      	b.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f886 	bl	800466c <I2C_IsAcknowledgeFailed>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e034      	b.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d028      	beq.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fe fb3d 	bl	8002bf0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11d      	bne.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004592:	2b80      	cmp	r3, #128	@ 0x80
 8004594:	d016      	beq.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b80      	cmp	r3, #128	@ 0x80
 80045d0:	d1c3      	bne.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e8:	e034      	b.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f83e 	bl	800466c <I2C_IsAcknowledgeFailed>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e034      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d028      	beq.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fe faf5 	bl	8002bf0 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11d      	bne.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d016      	beq.n	8004654 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e007      	b.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d1c3      	bne.n	80045ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004682:	d11b      	bne.n	80046bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800468c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e267      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d075      	beq.n	80047d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d00c      	beq.n	8004710 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d112      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b82      	ldr	r3, [pc, #520]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800470e:	d10b      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05b      	beq.n	80047d4 <HAL_RCC_OscConfig+0x108>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d157      	bne.n	80047d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e242      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x74>
 8004732:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a75      	ldr	r2, [pc, #468]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b70      	ldr	r3, [pc, #448]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6f      	ldr	r2, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6c      	ldr	r2, [pc, #432]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004764:	4b69      	ldr	r3, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a68      	ldr	r2, [pc, #416]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b66      	ldr	r3, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a65      	ldr	r2, [pc, #404]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fe fa34 	bl	8002bf0 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fe fa30 	bl	8002bf0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e207      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xc0>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe fa20 	bl	8002bf0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fe fa1c 	bl	8002bf0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1f3      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b51      	ldr	r3, [pc, #324]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe8>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e2:	4b4a      	ldr	r3, [pc, #296]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b44      	ldr	r3, [pc, #272]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b41      	ldr	r3, [pc, #260]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1c7      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4937      	ldr	r1, [pc, #220]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fe f9d5 	bl	8002bf0 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fe f9d1 	bl	8002bf0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1a8      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4925      	ldr	r1, [pc, #148]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fe f9b4 	bl	8002bf0 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fe f9b0 	bl	8002bf0 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e187      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d036      	beq.n	8004924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fe f994 	bl	8002bf0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fe f990 	bl	8002bf0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e167      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x200>
 80048ea:	e01b      	b.n	8004924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe f97d 	bl	8002bf0 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	e00e      	b.n	8004918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fe f979 	bl	8002bf0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d907      	bls.n	8004918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e150      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	42470000 	.word	0x42470000
 8004914:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b88      	ldr	r3, [pc, #544]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ea      	bne.n	80048fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8097 	beq.w	8004a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b81      	ldr	r3, [pc, #516]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	4b7d      	ldr	r3, [pc, #500]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	@ 0x40
 8004952:	4b7a      	ldr	r3, [pc, #488]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b77      	ldr	r3, [pc, #476]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496e:	4b74      	ldr	r3, [pc, #464]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a73      	ldr	r2, [pc, #460]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7fe f939 	bl	8002bf0 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fe f935 	bl	8002bf0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e10c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b6a      	ldr	r3, [pc, #424]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2ea>
 80049a8:	4b64      	ldr	r3, [pc, #400]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a63      	ldr	r2, [pc, #396]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x30c>
 80049be:	4b5f      	ldr	r3, [pc, #380]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ca:	4b5c      	ldr	r3, [pc, #368]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	4a5b      	ldr	r2, [pc, #364]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049d8:	4b58      	ldr	r3, [pc, #352]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	4a57      	ldr	r2, [pc, #348]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e4:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a54      	ldr	r2, [pc, #336]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe f8fa 	bl	8002bf0 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe f8f6 	bl	8002bf0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0cb      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RCC_OscConfig+0x334>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fe f8e4 	bl	8002bf0 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fe f8e0 	bl	8002bf0 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0b5      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a42:	4b3e      	ldr	r3, [pc, #248]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	4a38      	ldr	r2, [pc, #224]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80a1 	beq.w	8004bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d05c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d141      	bne.n	8004b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b31      	ldr	r3, [pc, #196]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fe f8b4 	bl	8002bf0 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fe f8b0 	bl	8002bf0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e087      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	4b27      	ldr	r3, [pc, #156]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe f889 	bl	8002bf0 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe f885 	bl	8002bf0 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e05c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af4:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x416>
 8004b00:	e054      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe f872 	bl	8002bf0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fe f86e 	bl	8002bf0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e045      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x444>
 8004b2e:	e03d      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e038      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40007000 	.word	0x40007000
 8004b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d121      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d11a      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d111      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fd ffa0 	bl	8002bf0 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fd ff9c 	bl	8002bf0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd ff00 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800c1b4 	.word	0x0800c1b4
 8004d80:	20000008 	.word	0x20000008
 8004d84:	2000000c 	.word	0x2000000c

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b094      	sub	sp, #80	@ 0x50
 8004d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da0:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d00d      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	f200 80e1 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dba:	e0db      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b73      	ldr	r3, [pc, #460]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc0:	e0db      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b73      	ldr	r3, [pc, #460]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc6:	e0d8      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d063      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b6a      	ldr	r3, [pc, #424]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	2200      	movs	r2, #0
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0c:	0150      	lsls	r0, r2, #5
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4621      	mov	r1, r4
 8004e14:	1a51      	subs	r1, r2, r1
 8004e16:	6139      	str	r1, [r7, #16]
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	018b      	lsls	r3, r1, #6
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e36:	4651      	mov	r1, sl
 8004e38:	018a      	lsls	r2, r1, #6
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e40:	4659      	mov	r1, fp
 8004e42:	eb63 0901 	sbc.w	r9, r3, r1
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	eb18 0303 	adds.w	r3, r8, r3
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	462b      	mov	r3, r5
 8004e68:	eb49 0303 	adc.w	r3, r9, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	024b      	lsls	r3, r1, #9
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e84:	4621      	mov	r1, r4
 8004e86:	024a      	lsls	r2, r1, #9
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	2200      	movs	r2, #0
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e98:	f7fb fef6 	bl	8000c88 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e058      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b38      	ldr	r3, [pc, #224]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	0159      	lsls	r1, r3, #5
 8004ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed2:	0150      	lsls	r0, r2, #5
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4641      	mov	r1, r8
 8004eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8004efc:	eb63 050b 	sbc.w	r5, r3, fp
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	00eb      	lsls	r3, r5, #3
 8004f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0e:	00e2      	lsls	r2, r4, #3
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	18e3      	adds	r3, r4, r3
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	eb45 0303 	adc.w	r3, r5, r3
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	028b      	lsls	r3, r1, #10
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f38:	4621      	mov	r1, r4
 8004f3a:	028a      	lsls	r2, r1, #10
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	2200      	movs	r2, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	61fa      	str	r2, [r7, #28]
 8004f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f4c:	f7fb fe9c 	bl	8000c88 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	3301      	adds	r3, #1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3750      	adds	r7, #80	@ 0x50
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000008 	.word	0x20000008

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb0:	f7ff fff0 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a9b      	lsrs	r3, r3, #10
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4903      	ldr	r1, [pc, #12]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	0800c1c4 	.word	0x0800c1c4

08004fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fd8:	f7ff ffdc 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0b5b      	lsrs	r3, r3, #13
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4903      	ldr	r1, [pc, #12]	@ (8004ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	0800c1c4 	.word	0x0800c1c4

08004ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e041      	b.n	8005092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fd fb58 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fa70 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d001      	beq.n	80050b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e046      	b.n	8005142 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a23      	ldr	r2, [pc, #140]	@ (8005150 <HAL_TIM_Base_Start+0xb4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ce:	d01d      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_TIM_Base_Start+0xb8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_TIM_Base_Start+0xbc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_TIM_Base_Start+0xc0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_TIM_Base_Start+0xc4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_TIM_Base_Start+0xc8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_TIM_Base_Start+0x70>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <HAL_TIM_Base_Start+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d111      	bne.n	8005130 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b06      	cmp	r3, #6
 800511c:	d010      	beq.n	8005140 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	e007      	b.n	8005140 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40010000 	.word	0x40010000
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40010400 	.word	0x40010400
 8005164:	40014000 	.word	0x40014000
 8005168:	40001800 	.word	0x40001800

0800516c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd fac2 	bl	800271c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 f9b8 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005226:	2302      	movs	r3, #2
 8005228:	e0ae      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	f200 809f 	bhi.w	8005378 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005275 	.word	0x08005275
 8005244:	08005379 	.word	0x08005379
 8005248:	08005379 	.word	0x08005379
 800524c:	08005379 	.word	0x08005379
 8005250:	080052b5 	.word	0x080052b5
 8005254:	08005379 	.word	0x08005379
 8005258:	08005379 	.word	0x08005379
 800525c:	08005379 	.word	0x08005379
 8005260:	080052f7 	.word	0x080052f7
 8005264:	08005379 	.word	0x08005379
 8005268:	08005379 	.word	0x08005379
 800526c:	08005379 	.word	0x08005379
 8005270:	08005337 	.word	0x08005337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f9fc 	bl	8005678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	619a      	str	r2, [r3, #24]
      break;
 80052b2:	e064      	b.n	800537e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fa4c 	bl	8005758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6999      	ldr	r1, [r3, #24]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]
      break;
 80052f4:	e043      	b.n	800537e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 faa1 	bl	8005844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0208 	orr.w	r2, r2, #8
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0204 	bic.w	r2, r2, #4
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	61da      	str	r2, [r3, #28]
      break;
 8005334:	e023      	b.n	800537e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 faf5 	bl	800592c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69d9      	ldr	r1, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	021a      	lsls	r2, r3, #8
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	61da      	str	r2, [r3, #28]
      break;
 8005376:	e002      	b.n	800537e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
      break;
 800537c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x1c>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0b4      	b.n	8005516 <HAL_TIM_ConfigClockSource+0x186>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e4:	d03e      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xd4>
 80053e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ea:	f200 8087 	bhi.w	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f2:	f000 8086 	beq.w	8005502 <HAL_TIM_ConfigClockSource+0x172>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fa:	d87f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b70      	cmp	r3, #112	@ 0x70
 80053fe:	d01a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0xa6>
 8005400:	2b70      	cmp	r3, #112	@ 0x70
 8005402:	d87b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b60      	cmp	r3, #96	@ 0x60
 8005406:	d050      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x11a>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d877      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b50      	cmp	r3, #80	@ 0x50
 800540e:	d03c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xfa>
 8005410:	2b50      	cmp	r3, #80	@ 0x50
 8005412:	d873      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d058      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0x13a>
 8005418:	2b40      	cmp	r3, #64	@ 0x40
 800541a:	d86f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	d064      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d86b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d060      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d867      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d05a      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	e062      	b.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005446:	f000 fb41 	bl	8005acc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	609a      	str	r2, [r3, #8]
      break;
 8005462:	e04f      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005474:	f000 fb2a 	bl	8005acc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005486:	609a      	str	r2, [r3, #8]
      break;
 8005488:	e03c      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	461a      	mov	r2, r3
 8005498:	f000 fa9e 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2150      	movs	r1, #80	@ 0x50
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 faf7 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 80054a8:	e02c      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b6:	461a      	mov	r2, r3
 80054b8:	f000 fabd 	bl	8005a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2160      	movs	r1, #96	@ 0x60
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fae7 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 80054c8:	e01c      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d6:	461a      	mov	r2, r3
 80054d8:	f000 fa7e 	bl	80059d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2140      	movs	r1, #64	@ 0x40
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fad7 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 80054e8:	e00c      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 face 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 80054fa:	e003      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e000      	b.n	8005504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a46      	ldr	r2, [pc, #280]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a43      	ldr	r2, [pc, #268]	@ (8005650 <TIM_Base_SetConfig+0x130>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a42      	ldr	r2, [pc, #264]	@ (8005654 <TIM_Base_SetConfig+0x134>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a41      	ldr	r2, [pc, #260]	@ (8005658 <TIM_Base_SetConfig+0x138>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a40      	ldr	r2, [pc, #256]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a35      	ldr	r2, [pc, #212]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005580:	d027      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a32      	ldr	r2, [pc, #200]	@ (8005650 <TIM_Base_SetConfig+0x130>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d023      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a31      	ldr	r2, [pc, #196]	@ (8005654 <TIM_Base_SetConfig+0x134>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a30      	ldr	r2, [pc, #192]	@ (8005658 <TIM_Base_SetConfig+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2f      	ldr	r2, [pc, #188]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <TIM_Base_SetConfig+0x140>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <TIM_Base_SetConfig+0x144>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <TIM_Base_SetConfig+0x148>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	@ (800566c <TIM_Base_SetConfig+0x14c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <TIM_Base_SetConfig+0x150>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <TIM_Base_SetConfig+0x154>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a10      	ldr	r2, [pc, #64]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]
  }
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40010400 	.word	0x40010400
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800
 800566c:	40001800 	.word	0x40001800
 8005670:	40001c00 	.word	0x40001c00
 8005674:	40002000 	.word	0x40002000

08005678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0201 	bic.w	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 0302 	bic.w	r3, r3, #2
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <TIM_OC1_SetConfig+0xd8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC1_SetConfig+0x64>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <TIM_OC1_SetConfig+0xdc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d10c      	bne.n	80056f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0308 	bic.w	r3, r3, #8
 80056e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <TIM_OC1_SetConfig+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC1_SetConfig+0x8e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <TIM_OC1_SetConfig+0xdc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d111      	bne.n	800572a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0210 	bic.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a22      	ldr	r2, [pc, #136]	@ (800583c <TIM_OC2_SetConfig+0xe4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC2_SetConfig+0x68>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <TIM_OC2_SetConfig+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10d      	bne.n	80057dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a17      	ldr	r2, [pc, #92]	@ (800583c <TIM_OC2_SetConfig+0xe4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC2_SetConfig+0x94>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <TIM_OC2_SetConfig+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d113      	bne.n	8005814 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a21      	ldr	r2, [pc, #132]	@ (8005924 <TIM_OC3_SetConfig+0xe0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC3_SetConfig+0x66>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a20      	ldr	r2, [pc, #128]	@ (8005928 <TIM_OC3_SetConfig+0xe4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10d      	bne.n	80058c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <TIM_OC3_SetConfig+0xe0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0x92>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <TIM_OC3_SetConfig+0xe4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a12      	ldr	r2, [pc, #72]	@ (80059d0 <TIM_OC4_SetConfig+0xa4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC4_SetConfig+0x68>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <TIM_OC4_SetConfig+0xa8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d109      	bne.n	80059a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800599a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 030a 	bic.w	r3, r3, #10
 8005a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f023 0210 	bic.w	r2, r3, #16
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	031b      	lsls	r3, r3, #12
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f043 0307 	orr.w	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	609a      	str	r2, [r3, #8]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e05a      	b.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d022      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b70:	d01d      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d018      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d10c      	bne.n	8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40010400 	.word	0x40010400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40001800 	.word	0x40001800

08005c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e042      	b.n	8005c9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fc fdee 	bl	800280c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	@ 0x24
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fde9 	bl	8006820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	@ 0x28
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d175      	bne.n	8005db0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Transmit+0x2c>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e06e      	b.n	8005db2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2221      	movs	r2, #33	@ 0x21
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce2:	f7fc ff85 	bl	8002bf0 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfc:	d108      	bne.n	8005d10 <HAL_UART_Transmit+0x6c>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e003      	b.n	8005d18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d18:	e02e      	b.n	8005d78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	@ 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fb4b 	bl	80063c0 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e03a      	b.n	8005db2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	3302      	adds	r3, #2
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e007      	b.n	8005d6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1cb      	bne.n	8005d1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2140      	movs	r1, #64	@ 0x40
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fb17 	bl	80063c0 <UART_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e006      	b.n	8005db2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d121      	bne.n	8005e18 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_UART_Transmit_IT+0x26>
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e01a      	b.n	8005e1a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2221      	movs	r2, #33	@ 0x21
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d112      	bne.n	8005e66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Receive_IT+0x26>
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e00b      	b.n	8005e68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fb08 	bl	8006472 <UART_Start_Receive_IT>
 8005e62:	4603      	mov	r3, r0
 8005e64:	e000      	b.n	8005e68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
  }
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b0ba      	sub	sp, #232	@ 0xe8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x66>
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fbe8 	bl	80066a4 <UART_Receive_IT>
      return;
 8005ed4:	e25b      	b.n	800638e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80de 	beq.w	800609c <HAL_UART_IRQHandler+0x22c>
 8005ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80d1 	beq.w	800609c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <HAL_UART_IRQHandler+0xae>
 8005f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00b      	beq.n	8005f42 <HAL_UART_IRQHandler+0xd2>
 8005f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f043 0202 	orr.w	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_UART_IRQHandler+0xf6>
 8005f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	f043 0204 	orr.w	r2, r3, #4
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d011      	beq.n	8005f96 <HAL_UART_IRQHandler+0x126>
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d105      	bne.n	8005f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 81f2 	beq.w	8006384 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_UART_IRQHandler+0x14e>
 8005fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb73 	bl	80066a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <HAL_UART_IRQHandler+0x17a>
 8005fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04f      	beq.n	800608a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa7b 	bl	80064e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d141      	bne.n	8006082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3314      	adds	r3, #20
 8006026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800602a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800602e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1d9      	bne.n	8005ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d013      	beq.n	800607a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	4a7e      	ldr	r2, [pc, #504]	@ (8006250 <HAL_UART_IRQHandler+0x3e0>)
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fb77 	bl	8003752 <HAL_DMA_Abort_IT>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00e      	b.n	8006098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f98a 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00a      	b.n	8006098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f986 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e006      	b.n	8006098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f982 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006096:	e175      	b.n	8006384 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	bf00      	nop
    return;
 800609a:	e173      	b.n	8006384 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 814f 	bne.w	8006344 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8148 	beq.w	8006344 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8141 	beq.w	8006344 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e2:	2b40      	cmp	r3, #64	@ 0x40
 80060e4:	f040 80b6 	bne.w	8006254 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8145 	beq.w	8006388 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006106:	429a      	cmp	r2, r3
 8006108:	f080 813e 	bcs.w	8006388 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611e:	f000 8088 	beq.w	8006232 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800613c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800614e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800615a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1d9      	bne.n	8006122 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800617e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800619a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e1      	bne.n	800616e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3314      	adds	r3, #20
 80061ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e3      	bne.n	80061aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006202:	f023 0310 	bic.w	r3, r3, #16
 8006206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006214:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006216:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800621a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e3      	bne.n	80061f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	4618      	mov	r0, r3
 800622e:	f7fd fa20 	bl	8003672 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006240:	b29b      	uxth	r3, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	b29b      	uxth	r3, r3
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8ad 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800624e:	e09b      	b.n	8006388 <HAL_UART_IRQHandler+0x518>
 8006250:	080065ad 	.word	0x080065ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800625c:	b29b      	uxth	r3, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 808e 	beq.w	800638c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8089 	beq.w	800638c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800628a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800629e:	647a      	str	r2, [r7, #68]	@ 0x44
 80062a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e3      	bne.n	800627a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	623b      	str	r3, [r7, #32]
   return(result);
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3314      	adds	r3, #20
 80062d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80062d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e3      	bne.n	80062b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60fb      	str	r3, [r7, #12]
   return(result);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800631c:	61fa      	str	r2, [r7, #28]
 800631e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	617b      	str	r3, [r7, #20]
   return(result);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e3      	bne.n	80062f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f833 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006342:	e023      	b.n	800638c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_UART_IRQHandler+0x4f4>
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f939 	bl	80065d4 <UART_Transmit_IT>
    return;
 8006362:	e014      	b.n	800638e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <HAL_UART_IRQHandler+0x51e>
 8006370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f979 	bl	8006674 <UART_EndTransmit_IT>
    return;
 8006382:	e004      	b.n	800638e <HAL_UART_IRQHandler+0x51e>
    return;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <HAL_UART_IRQHandler+0x51e>
      return;
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <HAL_UART_IRQHandler+0x51e>
      return;
 800638c:	bf00      	nop
  }
}
 800638e:	37e8      	adds	r7, #232	@ 0xe8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d0:	e03b      	b.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d037      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fc fc09 	bl	8002bf0 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e03a      	b.n	800646a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d023      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b80      	cmp	r3, #128	@ 0x80
 8006406:	d020      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d01d      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d116      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f857 	bl	80064e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2208      	movs	r2, #8
 800643c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e00f      	b.n	800646a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4013      	ands	r3, r2
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d0b4      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	4613      	mov	r3, r2
 800647e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2222      	movs	r2, #34	@ 0x22
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0220 	orr.w	r2, r2, #32
 80064d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b095      	sub	sp, #84	@ 0x54
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800650e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3314      	adds	r3, #20
 8006528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	61fb      	str	r3, [r7, #28]
   return(result);
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3314      	adds	r3, #20
 8006540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	2b01      	cmp	r3, #1
 800655c:	d119      	bne.n	8006592 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	60bb      	str	r3, [r7, #8]
   return(result);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f023 0310 	bic.w	r3, r3, #16
 8006574:	647b      	str	r3, [r7, #68]	@ 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	330c      	adds	r3, #12
 800657c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800657e:	61ba      	str	r2, [r7, #24]
 8006580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6979      	ldr	r1, [r7, #20]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	613b      	str	r3, [r7, #16]
   return(result);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e5      	bne.n	800655e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065a0:	bf00      	nop
 80065a2:	3754      	adds	r7, #84	@ 0x54
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fee4 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b21      	cmp	r3, #33	@ 0x21
 80065e6:	d13e      	bne.n	8006666 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f0:	d114      	bne.n	800661c <UART_Transmit_IT+0x48>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d110      	bne.n	800661c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800660e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]
 800661a:	e008      	b.n	800662e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	1c59      	adds	r1, r3, #1
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6211      	str	r1, [r2, #32]
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4619      	mov	r1, r3
 800663c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006650:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006660:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e000      	b.n	8006668 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800668a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fb fc3d 	bl	8001f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	@ 0x30
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b22      	cmp	r3, #34	@ 0x22
 80066b6:	f040 80ae 	bne.w	8006816 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c2:	d117      	bne.n	80066f4 <UART_Receive_IT+0x50>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80066f2:	e026      	b.n	8006742 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	d007      	beq.n	8006718 <UART_Receive_IT+0x74>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <UART_Receive_IT+0x82>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e008      	b.n	8006738 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	4619      	mov	r1, r3
 8006750:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006752:	2b00      	cmp	r3, #0
 8006754:	d15d      	bne.n	8006812 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0220 	bic.w	r2, r2, #32
 8006764:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006774:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	2b01      	cmp	r3, #1
 800679a:	d135      	bne.n	8006808 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f023 0310 	bic.w	r3, r3, #16
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	623a      	str	r2, [r7, #32]
 80067c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	69f9      	ldr	r1, [r7, #28]
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e5      	bne.n	80067a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d10a      	bne.n	80067fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff fdd1 	bl	80063a8 <HAL_UARTEx_RxEventCallback>
 8006806:	e002      	b.n	800680e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb fb51 	bl	8001eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e002      	b.n	8006818 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006816:	2302      	movs	r3, #2
  }
}
 8006818:	4618      	mov	r0, r3
 800681a:	3730      	adds	r7, #48	@ 0x30
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006824:	b0c0      	sub	sp, #256	@ 0x100
 8006826:	af00      	add	r7, sp, #0
 8006828:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683c:	68d9      	ldr	r1, [r3, #12]
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	ea40 0301 	orr.w	r3, r0, r1
 8006848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	431a      	orrs	r2, r3
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	431a      	orrs	r2, r3
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006878:	f021 010c 	bic.w	r1, r1, #12
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006886:	430b      	orrs	r3, r1
 8006888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689a:	6999      	ldr	r1, [r3, #24]
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	ea40 0301 	orr.w	r3, r0, r1
 80068a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b8f      	ldr	r3, [pc, #572]	@ (8006aec <UART_SetConfig+0x2cc>)
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d005      	beq.n	80068c0 <UART_SetConfig+0xa0>
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b8d      	ldr	r3, [pc, #564]	@ (8006af0 <UART_SetConfig+0x2d0>)
 80068bc:	429a      	cmp	r2, r3
 80068be:	d104      	bne.n	80068ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068c0:	f7fe fb88 	bl	8004fd4 <HAL_RCC_GetPCLK2Freq>
 80068c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80068c8:	e003      	b.n	80068d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068ca:	f7fe fb6f 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80068ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068dc:	f040 810c 	bne.w	8006af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80068ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	1891      	adds	r1, r2, r2
 80068f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068fa:	415b      	adcs	r3, r3
 80068fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006902:	4621      	mov	r1, r4
 8006904:	eb12 0801 	adds.w	r8, r2, r1
 8006908:	4629      	mov	r1, r5
 800690a:	eb43 0901 	adc.w	r9, r3, r1
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800691a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800691e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006922:	4690      	mov	r8, r2
 8006924:	4699      	mov	r9, r3
 8006926:	4623      	mov	r3, r4
 8006928:	eb18 0303 	adds.w	r3, r8, r3
 800692c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006930:	462b      	mov	r3, r5
 8006932:	eb49 0303 	adc.w	r3, r9, r3
 8006936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800693a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006946:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800694a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800694e:	460b      	mov	r3, r1
 8006950:	18db      	adds	r3, r3, r3
 8006952:	653b      	str	r3, [r7, #80]	@ 0x50
 8006954:	4613      	mov	r3, r2
 8006956:	eb42 0303 	adc.w	r3, r2, r3
 800695a:	657b      	str	r3, [r7, #84]	@ 0x54
 800695c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006964:	f7fa f990 	bl	8000c88 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4b61      	ldr	r3, [pc, #388]	@ (8006af4 <UART_SetConfig+0x2d4>)
 800696e:	fba3 2302 	umull	r2, r3, r3, r2
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	011c      	lsls	r4, r3, #4
 8006976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697a:	2200      	movs	r2, #0
 800697c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006980:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	1891      	adds	r1, r2, r2
 800698e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006990:	415b      	adcs	r3, r3
 8006992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006998:	4641      	mov	r1, r8
 800699a:	eb12 0a01 	adds.w	sl, r2, r1
 800699e:	4649      	mov	r1, r9
 80069a0:	eb43 0b01 	adc.w	fp, r3, r1
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069b8:	4692      	mov	sl, r2
 80069ba:	469b      	mov	fp, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	eb1a 0303 	adds.w	r3, sl, r3
 80069c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069c6:	464b      	mov	r3, r9
 80069c8:	eb4b 0303 	adc.w	r3, fp, r3
 80069cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80069e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069e4:	460b      	mov	r3, r1
 80069e6:	18db      	adds	r3, r3, r3
 80069e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ea:	4613      	mov	r3, r2
 80069ec:	eb42 0303 	adc.w	r3, r2, r3
 80069f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069fa:	f7fa f945 	bl	8000c88 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	4b3b      	ldr	r3, [pc, #236]	@ (8006af4 <UART_SetConfig+0x2d4>)
 8006a06:	fba3 2301 	umull	r2, r3, r3, r1
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2264      	movs	r2, #100	@ 0x64
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
 8006a12:	1acb      	subs	r3, r1, r3
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a1a:	4b36      	ldr	r3, [pc, #216]	@ (8006af4 <UART_SetConfig+0x2d4>)
 8006a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a28:	441c      	add	r4, r3
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	1891      	adds	r1, r2, r2
 8006a42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a44:	415b      	adcs	r3, r3
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	1851      	adds	r1, r2, r1
 8006a50:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a52:	4649      	mov	r1, r9
 8006a54:	414b      	adcs	r3, r1
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a64:	4659      	mov	r1, fp
 8006a66:	00cb      	lsls	r3, r1, #3
 8006a68:	4651      	mov	r1, sl
 8006a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a6e:	4651      	mov	r1, sl
 8006a70:	00ca      	lsls	r2, r1, #3
 8006a72:	4610      	mov	r0, r2
 8006a74:	4619      	mov	r1, r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	4642      	mov	r2, r8
 8006a7a:	189b      	adds	r3, r3, r2
 8006a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a80:	464b      	mov	r3, r9
 8006a82:	460a      	mov	r2, r1
 8006a84:	eb42 0303 	adc.w	r3, r2, r3
 8006a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	18db      	adds	r3, r3, r3
 8006aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	eb42 0303 	adc.w	r3, r2, r3
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ab6:	f7fa f8e7 	bl	8000c88 <__aeabi_uldivmod>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <UART_SetConfig+0x2d4>)
 8006ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	2164      	movs	r1, #100	@ 0x64
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	3332      	adds	r3, #50	@ 0x32
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <UART_SetConfig+0x2d4>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f003 0207 	and.w	r2, r3, #7
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4422      	add	r2, r4
 8006ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ae8:	e106      	b.n	8006cf8 <UART_SetConfig+0x4d8>
 8006aea:	bf00      	nop
 8006aec:	40011000 	.word	0x40011000
 8006af0:	40011400 	.word	0x40011400
 8006af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	1891      	adds	r1, r2, r2
 8006b10:	6239      	str	r1, [r7, #32]
 8006b12:	415b      	adcs	r3, r3
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	1854      	adds	r4, r2, r1
 8006b1e:	4649      	mov	r1, r9
 8006b20:	eb43 0501 	adc.w	r5, r3, r1
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	00eb      	lsls	r3, r5, #3
 8006b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b32:	00e2      	lsls	r2, r4, #3
 8006b34:	4614      	mov	r4, r2
 8006b36:	461d      	mov	r5, r3
 8006b38:	4643      	mov	r3, r8
 8006b3a:	18e3      	adds	r3, r4, r3
 8006b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b40:	464b      	mov	r3, r9
 8006b42:	eb45 0303 	adc.w	r3, r5, r3
 8006b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b66:	4629      	mov	r1, r5
 8006b68:	008b      	lsls	r3, r1, #2
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b70:	4621      	mov	r1, r4
 8006b72:	008a      	lsls	r2, r1, #2
 8006b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b78:	f7fa f886 	bl	8000c88 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4b60      	ldr	r3, [pc, #384]	@ (8006d04 <UART_SetConfig+0x4e4>)
 8006b82:	fba3 2302 	umull	r2, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	011c      	lsls	r4, r3, #4
 8006b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	1891      	adds	r1, r2, r2
 8006ba2:	61b9      	str	r1, [r7, #24]
 8006ba4:	415b      	adcs	r3, r3
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bac:	4641      	mov	r1, r8
 8006bae:	1851      	adds	r1, r2, r1
 8006bb0:	6139      	str	r1, [r7, #16]
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	414b      	adcs	r3, r1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	00cb      	lsls	r3, r1, #3
 8006bc8:	4651      	mov	r1, sl
 8006bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bce:	4651      	mov	r1, sl
 8006bd0:	00ca      	lsls	r2, r1, #3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4642      	mov	r2, r8
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006be0:	464b      	mov	r3, r9
 8006be2:	460a      	mov	r2, r1
 8006be4:	eb42 0303 	adc.w	r3, r2, r3
 8006be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c04:	4649      	mov	r1, r9
 8006c06:	008b      	lsls	r3, r1, #2
 8006c08:	4641      	mov	r1, r8
 8006c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0e:	4641      	mov	r1, r8
 8006c10:	008a      	lsls	r2, r1, #2
 8006c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c16:	f7fa f837 	bl	8000c88 <__aeabi_uldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4b38      	ldr	r3, [pc, #224]	@ (8006d04 <UART_SetConfig+0x4e4>)
 8006c22:	fba3 2301 	umull	r2, r3, r3, r1
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	2264      	movs	r2, #100	@ 0x64
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
 8006c2e:	1acb      	subs	r3, r1, r3
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	3332      	adds	r3, #50	@ 0x32
 8006c34:	4a33      	ldr	r2, [pc, #204]	@ (8006d04 <UART_SetConfig+0x4e4>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c40:	441c      	add	r4, r3
 8006c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c46:	2200      	movs	r2, #0
 8006c48:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	1891      	adds	r1, r2, r2
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c60:	4641      	mov	r1, r8
 8006c62:	1851      	adds	r1, r2, r1
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	4649      	mov	r1, r9
 8006c68:	414b      	adcs	r3, r1
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c78:	4659      	mov	r1, fp
 8006c7a:	00cb      	lsls	r3, r1, #3
 8006c7c:	4651      	mov	r1, sl
 8006c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c82:	4651      	mov	r1, sl
 8006c84:	00ca      	lsls	r2, r1, #3
 8006c86:	4610      	mov	r0, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c92:	464b      	mov	r3, r9
 8006c94:	460a      	mov	r2, r1
 8006c96:	eb42 0303 	adc.w	r3, r2, r3
 8006c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ca6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	008b      	lsls	r3, r1, #2
 8006cb8:	4641      	mov	r1, r8
 8006cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	008a      	lsls	r2, r1, #2
 8006cc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006cc6:	f7f9 ffdf 	bl	8000c88 <__aeabi_uldivmod>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <UART_SetConfig+0x4e4>)
 8006cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	2164      	movs	r1, #100	@ 0x64
 8006cd8:	fb01 f303 	mul.w	r3, r1, r3
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	3332      	adds	r3, #50	@ 0x32
 8006ce2:	4a08      	ldr	r2, [pc, #32]	@ (8006d04 <UART_SetConfig+0x4e4>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4422      	add	r2, r4
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d04:	51eb851f 	.word	0x51eb851f

08006d08 <__cvt>:
 8006d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	ec57 6b10 	vmov	r6, r7, d0
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4619      	mov	r1, r3
 8006d16:	463b      	mov	r3, r7
 8006d18:	bfbb      	ittet	lt
 8006d1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d1e:	461f      	movlt	r7, r3
 8006d20:	2300      	movge	r3, #0
 8006d22:	232d      	movlt	r3, #45	@ 0x2d
 8006d24:	700b      	strb	r3, [r1, #0]
 8006d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d2c:	4691      	mov	r9, r2
 8006d2e:	f023 0820 	bic.w	r8, r3, #32
 8006d32:	bfbc      	itt	lt
 8006d34:	4632      	movlt	r2, r6
 8006d36:	4616      	movlt	r6, r2
 8006d38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d3c:	d005      	beq.n	8006d4a <__cvt+0x42>
 8006d3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d42:	d100      	bne.n	8006d46 <__cvt+0x3e>
 8006d44:	3401      	adds	r4, #1
 8006d46:	2102      	movs	r1, #2
 8006d48:	e000      	b.n	8006d4c <__cvt+0x44>
 8006d4a:	2103      	movs	r1, #3
 8006d4c:	ab03      	add	r3, sp, #12
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	ab02      	add	r3, sp, #8
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	ec47 6b10 	vmov	d0, r6, r7
 8006d58:	4653      	mov	r3, sl
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	f001 f874 	bl	8007e48 <_dtoa_r>
 8006d60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d64:	4605      	mov	r5, r0
 8006d66:	d119      	bne.n	8006d9c <__cvt+0x94>
 8006d68:	f019 0f01 	tst.w	r9, #1
 8006d6c:	d00e      	beq.n	8006d8c <__cvt+0x84>
 8006d6e:	eb00 0904 	add.w	r9, r0, r4
 8006d72:	2200      	movs	r2, #0
 8006d74:	2300      	movs	r3, #0
 8006d76:	4630      	mov	r0, r6
 8006d78:	4639      	mov	r1, r7
 8006d7a:	f7f9 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d7e:	b108      	cbz	r0, 8006d84 <__cvt+0x7c>
 8006d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d84:	2230      	movs	r2, #48	@ 0x30
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	454b      	cmp	r3, r9
 8006d8a:	d31e      	bcc.n	8006dca <__cvt+0xc2>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d90:	1b5b      	subs	r3, r3, r5
 8006d92:	4628      	mov	r0, r5
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	b004      	add	sp, #16
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006da0:	eb00 0904 	add.w	r9, r0, r4
 8006da4:	d1e5      	bne.n	8006d72 <__cvt+0x6a>
 8006da6:	7803      	ldrb	r3, [r0, #0]
 8006da8:	2b30      	cmp	r3, #48	@ 0x30
 8006daa:	d10a      	bne.n	8006dc2 <__cvt+0xba>
 8006dac:	2200      	movs	r2, #0
 8006dae:	2300      	movs	r3, #0
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7f9 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8006db8:	b918      	cbnz	r0, 8006dc2 <__cvt+0xba>
 8006dba:	f1c4 0401 	rsb	r4, r4, #1
 8006dbe:	f8ca 4000 	str.w	r4, [sl]
 8006dc2:	f8da 3000 	ldr.w	r3, [sl]
 8006dc6:	4499      	add	r9, r3
 8006dc8:	e7d3      	b.n	8006d72 <__cvt+0x6a>
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	9103      	str	r1, [sp, #12]
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	e7d9      	b.n	8006d86 <__cvt+0x7e>

08006dd2 <__exponent>:
 8006dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	bfba      	itte	lt
 8006dd8:	4249      	neglt	r1, r1
 8006dda:	232d      	movlt	r3, #45	@ 0x2d
 8006ddc:	232b      	movge	r3, #43	@ 0x2b
 8006dde:	2909      	cmp	r1, #9
 8006de0:	7002      	strb	r2, [r0, #0]
 8006de2:	7043      	strb	r3, [r0, #1]
 8006de4:	dd29      	ble.n	8006e3a <__exponent+0x68>
 8006de6:	f10d 0307 	add.w	r3, sp, #7
 8006dea:	461d      	mov	r5, r3
 8006dec:	270a      	movs	r7, #10
 8006dee:	461a      	mov	r2, r3
 8006df0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006df4:	fb07 1416 	mls	r4, r7, r6, r1
 8006df8:	3430      	adds	r4, #48	@ 0x30
 8006dfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006dfe:	460c      	mov	r4, r1
 8006e00:	2c63      	cmp	r4, #99	@ 0x63
 8006e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e06:	4631      	mov	r1, r6
 8006e08:	dcf1      	bgt.n	8006dee <__exponent+0x1c>
 8006e0a:	3130      	adds	r1, #48	@ 0x30
 8006e0c:	1e94      	subs	r4, r2, #2
 8006e0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e12:	1c41      	adds	r1, r0, #1
 8006e14:	4623      	mov	r3, r4
 8006e16:	42ab      	cmp	r3, r5
 8006e18:	d30a      	bcc.n	8006e30 <__exponent+0x5e>
 8006e1a:	f10d 0309 	add.w	r3, sp, #9
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	42ac      	cmp	r4, r5
 8006e22:	bf88      	it	hi
 8006e24:	2300      	movhi	r3, #0
 8006e26:	3302      	adds	r3, #2
 8006e28:	4403      	add	r3, r0
 8006e2a:	1a18      	subs	r0, r3, r0
 8006e2c:	b003      	add	sp, #12
 8006e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e38:	e7ed      	b.n	8006e16 <__exponent+0x44>
 8006e3a:	2330      	movs	r3, #48	@ 0x30
 8006e3c:	3130      	adds	r1, #48	@ 0x30
 8006e3e:	7083      	strb	r3, [r0, #2]
 8006e40:	70c1      	strb	r1, [r0, #3]
 8006e42:	1d03      	adds	r3, r0, #4
 8006e44:	e7f1      	b.n	8006e2a <__exponent+0x58>
	...

08006e48 <_printf_float>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	b08d      	sub	sp, #52	@ 0x34
 8006e4e:	460c      	mov	r4, r1
 8006e50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e54:	4616      	mov	r6, r2
 8006e56:	461f      	mov	r7, r3
 8006e58:	4605      	mov	r5, r0
 8006e5a:	f000 feef 	bl	8007c3c <_localeconv_r>
 8006e5e:	6803      	ldr	r3, [r0, #0]
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7f9 fa04 	bl	8000270 <strlen>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	9005      	str	r0, [sp, #20]
 8006e72:	3307      	adds	r3, #7
 8006e74:	f023 0307 	bic.w	r3, r3, #7
 8006e78:	f103 0208 	add.w	r2, r3, #8
 8006e7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e80:	f8d4 b000 	ldr.w	fp, [r4]
 8006e84:	f8c8 2000 	str.w	r2, [r8]
 8006e88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007110 <_printf_float+0x2c8>)
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	f7f9 fe42 	bl	8000b2c <__aeabi_dcmpun>
 8006ea8:	bb70      	cbnz	r0, 8006f08 <_printf_float+0xc0>
 8006eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eae:	4b98      	ldr	r3, [pc, #608]	@ (8007110 <_printf_float+0x2c8>)
 8006eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb4:	f7f9 fe1c 	bl	8000af0 <__aeabi_dcmple>
 8006eb8:	bb30      	cbnz	r0, 8006f08 <_printf_float+0xc0>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 fe0b 	bl	8000adc <__aeabi_dcmplt>
 8006ec6:	b110      	cbz	r0, 8006ece <_printf_float+0x86>
 8006ec8:	232d      	movs	r3, #45	@ 0x2d
 8006eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ece:	4a91      	ldr	r2, [pc, #580]	@ (8007114 <_printf_float+0x2cc>)
 8006ed0:	4b91      	ldr	r3, [pc, #580]	@ (8007118 <_printf_float+0x2d0>)
 8006ed2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ed6:	bf94      	ite	ls
 8006ed8:	4690      	movls	r8, r2
 8006eda:	4698      	movhi	r8, r3
 8006edc:	2303      	movs	r3, #3
 8006ede:	6123      	str	r3, [r4, #16]
 8006ee0:	f02b 0304 	bic.w	r3, fp, #4
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f04f 0900 	mov.w	r9, #0
 8006eea:	9700      	str	r7, [sp, #0]
 8006eec:	4633      	mov	r3, r6
 8006eee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f9d2 	bl	800729c <_printf_common>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f040 808d 	bne.w	8007018 <_printf_float+0x1d0>
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295
 8006f02:	b00d      	add	sp, #52	@ 0x34
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f08:	4642      	mov	r2, r8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4649      	mov	r1, r9
 8006f10:	f7f9 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 8006f14:	b140      	cbz	r0, 8006f28 <_printf_float+0xe0>
 8006f16:	464b      	mov	r3, r9
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfbc      	itt	lt
 8006f1c:	232d      	movlt	r3, #45	@ 0x2d
 8006f1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f22:	4a7e      	ldr	r2, [pc, #504]	@ (800711c <_printf_float+0x2d4>)
 8006f24:	4b7e      	ldr	r3, [pc, #504]	@ (8007120 <_printf_float+0x2d8>)
 8006f26:	e7d4      	b.n	8006ed2 <_printf_float+0x8a>
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f2e:	9206      	str	r2, [sp, #24]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	d13b      	bne.n	8006fac <_printf_float+0x164>
 8006f34:	2306      	movs	r3, #6
 8006f36:	6063      	str	r3, [r4, #4]
 8006f38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f48:	ab09      	add	r3, sp, #36	@ 0x24
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	6861      	ldr	r1, [r4, #4]
 8006f4e:	ec49 8b10 	vmov	d0, r8, r9
 8006f52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f56:	4628      	mov	r0, r5
 8006f58:	f7ff fed6 	bl	8006d08 <__cvt>
 8006f5c:	9b06      	ldr	r3, [sp, #24]
 8006f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f60:	2b47      	cmp	r3, #71	@ 0x47
 8006f62:	4680      	mov	r8, r0
 8006f64:	d129      	bne.n	8006fba <_printf_float+0x172>
 8006f66:	1cc8      	adds	r0, r1, #3
 8006f68:	db02      	blt.n	8006f70 <_printf_float+0x128>
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	dd41      	ble.n	8006ff4 <_printf_float+0x1ac>
 8006f70:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f74:	fa5f fa8a 	uxtb.w	sl, sl
 8006f78:	3901      	subs	r1, #1
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006f80:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f82:	f7ff ff26 	bl	8006dd2 <__exponent>
 8006f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f88:	1813      	adds	r3, r2, r0
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	4681      	mov	r9, r0
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	dc02      	bgt.n	8006f98 <_printf_float+0x150>
 8006f92:	6822      	ldr	r2, [r4, #0]
 8006f94:	07d2      	lsls	r2, r2, #31
 8006f96:	d501      	bpl.n	8006f9c <_printf_float+0x154>
 8006f98:	3301      	adds	r3, #1
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0a2      	beq.n	8006eea <_printf_float+0xa2>
 8006fa4:	232d      	movs	r3, #45	@ 0x2d
 8006fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006faa:	e79e      	b.n	8006eea <_printf_float+0xa2>
 8006fac:	9a06      	ldr	r2, [sp, #24]
 8006fae:	2a47      	cmp	r2, #71	@ 0x47
 8006fb0:	d1c2      	bne.n	8006f38 <_printf_float+0xf0>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c0      	bne.n	8006f38 <_printf_float+0xf0>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7bd      	b.n	8006f36 <_printf_float+0xee>
 8006fba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fbe:	d9db      	bls.n	8006f78 <_printf_float+0x130>
 8006fc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006fc4:	d118      	bne.n	8006ff8 <_printf_float+0x1b0>
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	dd0b      	ble.n	8006fe4 <_printf_float+0x19c>
 8006fcc:	6121      	str	r1, [r4, #16]
 8006fce:	b913      	cbnz	r3, 8006fd6 <_printf_float+0x18e>
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	07d0      	lsls	r0, r2, #31
 8006fd4:	d502      	bpl.n	8006fdc <_printf_float+0x194>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	440b      	add	r3, r1
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006fde:	f04f 0900 	mov.w	r9, #0
 8006fe2:	e7db      	b.n	8006f9c <_printf_float+0x154>
 8006fe4:	b913      	cbnz	r3, 8006fec <_printf_float+0x1a4>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	07d2      	lsls	r2, r2, #31
 8006fea:	d501      	bpl.n	8006ff0 <_printf_float+0x1a8>
 8006fec:	3302      	adds	r3, #2
 8006fee:	e7f4      	b.n	8006fda <_printf_float+0x192>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7f2      	b.n	8006fda <_printf_float+0x192>
 8006ff4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	db05      	blt.n	800700a <_printf_float+0x1c2>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	6121      	str	r1, [r4, #16]
 8007002:	07d8      	lsls	r0, r3, #31
 8007004:	d5ea      	bpl.n	8006fdc <_printf_float+0x194>
 8007006:	1c4b      	adds	r3, r1, #1
 8007008:	e7e7      	b.n	8006fda <_printf_float+0x192>
 800700a:	2900      	cmp	r1, #0
 800700c:	bfd4      	ite	le
 800700e:	f1c1 0202 	rsble	r2, r1, #2
 8007012:	2201      	movgt	r2, #1
 8007014:	4413      	add	r3, r2
 8007016:	e7e0      	b.n	8006fda <_printf_float+0x192>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	055a      	lsls	r2, r3, #21
 800701c:	d407      	bmi.n	800702e <_printf_float+0x1e6>
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	4642      	mov	r2, r8
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	d12b      	bne.n	8007084 <_printf_float+0x23c>
 800702c:	e767      	b.n	8006efe <_printf_float+0xb6>
 800702e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007032:	f240 80dd 	bls.w	80071f0 <_printf_float+0x3a8>
 8007036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800703a:	2200      	movs	r2, #0
 800703c:	2300      	movs	r3, #0
 800703e:	f7f9 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007042:	2800      	cmp	r0, #0
 8007044:	d033      	beq.n	80070ae <_printf_float+0x266>
 8007046:	4a37      	ldr	r2, [pc, #220]	@ (8007124 <_printf_float+0x2dc>)
 8007048:	2301      	movs	r3, #1
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f af54 	beq.w	8006efe <_printf_float+0xb6>
 8007056:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800705a:	4543      	cmp	r3, r8
 800705c:	db02      	blt.n	8007064 <_printf_float+0x21c>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	07d8      	lsls	r0, r3, #31
 8007062:	d50f      	bpl.n	8007084 <_printf_float+0x23c>
 8007064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af45 	beq.w	8006efe <_printf_float+0xb6>
 8007074:	f04f 0900 	mov.w	r9, #0
 8007078:	f108 38ff 	add.w	r8, r8, #4294967295
 800707c:	f104 0a1a 	add.w	sl, r4, #26
 8007080:	45c8      	cmp	r8, r9
 8007082:	dc09      	bgt.n	8007098 <_printf_float+0x250>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	f100 8103 	bmi.w	8007292 <_printf_float+0x44a>
 800708c:	68e0      	ldr	r0, [r4, #12]
 800708e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007090:	4298      	cmp	r0, r3
 8007092:	bfb8      	it	lt
 8007094:	4618      	movlt	r0, r3
 8007096:	e734      	b.n	8006f02 <_printf_float+0xba>
 8007098:	2301      	movs	r3, #1
 800709a:	4652      	mov	r2, sl
 800709c:	4631      	mov	r1, r6
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	f43f af2b 	beq.w	8006efe <_printf_float+0xb6>
 80070a8:	f109 0901 	add.w	r9, r9, #1
 80070ac:	e7e8      	b.n	8007080 <_printf_float+0x238>
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc39      	bgt.n	8007128 <_printf_float+0x2e0>
 80070b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007124 <_printf_float+0x2dc>)
 80070b6:	2301      	movs	r3, #1
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f af1d 	beq.w	8006efe <_printf_float+0xb6>
 80070c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80070c8:	ea59 0303 	orrs.w	r3, r9, r3
 80070cc:	d102      	bne.n	80070d4 <_printf_float+0x28c>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	07d9      	lsls	r1, r3, #31
 80070d2:	d5d7      	bpl.n	8007084 <_printf_float+0x23c>
 80070d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f af0d 	beq.w	8006efe <_printf_float+0xb6>
 80070e4:	f04f 0a00 	mov.w	sl, #0
 80070e8:	f104 0b1a 	add.w	fp, r4, #26
 80070ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ee:	425b      	negs	r3, r3
 80070f0:	4553      	cmp	r3, sl
 80070f2:	dc01      	bgt.n	80070f8 <_printf_float+0x2b0>
 80070f4:	464b      	mov	r3, r9
 80070f6:	e793      	b.n	8007020 <_printf_float+0x1d8>
 80070f8:	2301      	movs	r3, #1
 80070fa:	465a      	mov	r2, fp
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f aefb 	beq.w	8006efe <_printf_float+0xb6>
 8007108:	f10a 0a01 	add.w	sl, sl, #1
 800710c:	e7ee      	b.n	80070ec <_printf_float+0x2a4>
 800710e:	bf00      	nop
 8007110:	7fefffff 	.word	0x7fefffff
 8007114:	0800c1cc 	.word	0x0800c1cc
 8007118:	0800c1d0 	.word	0x0800c1d0
 800711c:	0800c1d4 	.word	0x0800c1d4
 8007120:	0800c1d8 	.word	0x0800c1d8
 8007124:	0800c1dc 	.word	0x0800c1dc
 8007128:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800712a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800712e:	4553      	cmp	r3, sl
 8007130:	bfa8      	it	ge
 8007132:	4653      	movge	r3, sl
 8007134:	2b00      	cmp	r3, #0
 8007136:	4699      	mov	r9, r3
 8007138:	dc36      	bgt.n	80071a8 <_printf_float+0x360>
 800713a:	f04f 0b00 	mov.w	fp, #0
 800713e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007142:	f104 021a 	add.w	r2, r4, #26
 8007146:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007148:	9306      	str	r3, [sp, #24]
 800714a:	eba3 0309 	sub.w	r3, r3, r9
 800714e:	455b      	cmp	r3, fp
 8007150:	dc31      	bgt.n	80071b6 <_printf_float+0x36e>
 8007152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007154:	459a      	cmp	sl, r3
 8007156:	dc3a      	bgt.n	80071ce <_printf_float+0x386>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07da      	lsls	r2, r3, #31
 800715c:	d437      	bmi.n	80071ce <_printf_float+0x386>
 800715e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007160:	ebaa 0903 	sub.w	r9, sl, r3
 8007164:	9b06      	ldr	r3, [sp, #24]
 8007166:	ebaa 0303 	sub.w	r3, sl, r3
 800716a:	4599      	cmp	r9, r3
 800716c:	bfa8      	it	ge
 800716e:	4699      	movge	r9, r3
 8007170:	f1b9 0f00 	cmp.w	r9, #0
 8007174:	dc33      	bgt.n	80071de <_printf_float+0x396>
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717e:	f104 0b1a 	add.w	fp, r4, #26
 8007182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007184:	ebaa 0303 	sub.w	r3, sl, r3
 8007188:	eba3 0309 	sub.w	r3, r3, r9
 800718c:	4543      	cmp	r3, r8
 800718e:	f77f af79 	ble.w	8007084 <_printf_float+0x23c>
 8007192:	2301      	movs	r3, #1
 8007194:	465a      	mov	r2, fp
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	f43f aeae 	beq.w	8006efe <_printf_float+0xb6>
 80071a2:	f108 0801 	add.w	r8, r8, #1
 80071a6:	e7ec      	b.n	8007182 <_printf_float+0x33a>
 80071a8:	4642      	mov	r2, r8
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	d1c2      	bne.n	800713a <_printf_float+0x2f2>
 80071b4:	e6a3      	b.n	8006efe <_printf_float+0xb6>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	9206      	str	r2, [sp, #24]
 80071be:	47b8      	blx	r7
 80071c0:	3001      	adds	r0, #1
 80071c2:	f43f ae9c 	beq.w	8006efe <_printf_float+0xb6>
 80071c6:	9a06      	ldr	r2, [sp, #24]
 80071c8:	f10b 0b01 	add.w	fp, fp, #1
 80071cc:	e7bb      	b.n	8007146 <_printf_float+0x2fe>
 80071ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d1c0      	bne.n	800715e <_printf_float+0x316>
 80071dc:	e68f      	b.n	8006efe <_printf_float+0xb6>
 80071de:	9a06      	ldr	r2, [sp, #24]
 80071e0:	464b      	mov	r3, r9
 80071e2:	4442      	add	r2, r8
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d1c3      	bne.n	8007176 <_printf_float+0x32e>
 80071ee:	e686      	b.n	8006efe <_printf_float+0xb6>
 80071f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071f4:	f1ba 0f01 	cmp.w	sl, #1
 80071f8:	dc01      	bgt.n	80071fe <_printf_float+0x3b6>
 80071fa:	07db      	lsls	r3, r3, #31
 80071fc:	d536      	bpl.n	800726c <_printf_float+0x424>
 80071fe:	2301      	movs	r3, #1
 8007200:	4642      	mov	r2, r8
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	f43f ae78 	beq.w	8006efe <_printf_float+0xb6>
 800720e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f ae70 	beq.w	8006efe <_printf_float+0xb6>
 800721e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007222:	2200      	movs	r2, #0
 8007224:	2300      	movs	r3, #0
 8007226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800722a:	f7f9 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800722e:	b9c0      	cbnz	r0, 8007262 <_printf_float+0x41a>
 8007230:	4653      	mov	r3, sl
 8007232:	f108 0201 	add.w	r2, r8, #1
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	d10c      	bne.n	800725a <_printf_float+0x412>
 8007240:	e65d      	b.n	8006efe <_printf_float+0xb6>
 8007242:	2301      	movs	r3, #1
 8007244:	465a      	mov	r2, fp
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f ae56 	beq.w	8006efe <_printf_float+0xb6>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	45d0      	cmp	r8, sl
 8007258:	dbf3      	blt.n	8007242 <_printf_float+0x3fa>
 800725a:	464b      	mov	r3, r9
 800725c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007260:	e6df      	b.n	8007022 <_printf_float+0x1da>
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	f104 0b1a 	add.w	fp, r4, #26
 800726a:	e7f4      	b.n	8007256 <_printf_float+0x40e>
 800726c:	2301      	movs	r3, #1
 800726e:	4642      	mov	r2, r8
 8007270:	e7e1      	b.n	8007236 <_printf_float+0x3ee>
 8007272:	2301      	movs	r3, #1
 8007274:	464a      	mov	r2, r9
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	f43f ae3e 	beq.w	8006efe <_printf_float+0xb6>
 8007282:	f108 0801 	add.w	r8, r8, #1
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800728a:	1a5b      	subs	r3, r3, r1
 800728c:	4543      	cmp	r3, r8
 800728e:	dcf0      	bgt.n	8007272 <_printf_float+0x42a>
 8007290:	e6fc      	b.n	800708c <_printf_float+0x244>
 8007292:	f04f 0800 	mov.w	r8, #0
 8007296:	f104 0919 	add.w	r9, r4, #25
 800729a:	e7f4      	b.n	8007286 <_printf_float+0x43e>

0800729c <_printf_common>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	4616      	mov	r6, r2
 80072a2:	4698      	mov	r8, r3
 80072a4:	688a      	ldr	r2, [r1, #8]
 80072a6:	690b      	ldr	r3, [r1, #16]
 80072a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bfb8      	it	lt
 80072b0:	4613      	movlt	r3, r2
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072b8:	4607      	mov	r7, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b10a      	cbz	r2, 80072c2 <_printf_common+0x26>
 80072be:	3301      	adds	r3, #1
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	0699      	lsls	r1, r3, #26
 80072c6:	bf42      	ittt	mi
 80072c8:	6833      	ldrmi	r3, [r6, #0]
 80072ca:	3302      	addmi	r3, #2
 80072cc:	6033      	strmi	r3, [r6, #0]
 80072ce:	6825      	ldr	r5, [r4, #0]
 80072d0:	f015 0506 	ands.w	r5, r5, #6
 80072d4:	d106      	bne.n	80072e4 <_printf_common+0x48>
 80072d6:	f104 0a19 	add.w	sl, r4, #25
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	6832      	ldr	r2, [r6, #0]
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc26      	bgt.n	8007332 <_printf_common+0x96>
 80072e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	3b00      	subs	r3, #0
 80072ec:	bf18      	it	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	0692      	lsls	r2, r2, #26
 80072f2:	d42b      	bmi.n	800734c <_printf_common+0xb0>
 80072f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072f8:	4641      	mov	r1, r8
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c8      	blx	r9
 80072fe:	3001      	adds	r0, #1
 8007300:	d01e      	beq.n	8007340 <_printf_common+0xa4>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	6922      	ldr	r2, [r4, #16]
 8007306:	f003 0306 	and.w	r3, r3, #6
 800730a:	2b04      	cmp	r3, #4
 800730c:	bf02      	ittt	eq
 800730e:	68e5      	ldreq	r5, [r4, #12]
 8007310:	6833      	ldreq	r3, [r6, #0]
 8007312:	1aed      	subeq	r5, r5, r3
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	bf0c      	ite	eq
 8007318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800731c:	2500      	movne	r5, #0
 800731e:	4293      	cmp	r3, r2
 8007320:	bfc4      	itt	gt
 8007322:	1a9b      	subgt	r3, r3, r2
 8007324:	18ed      	addgt	r5, r5, r3
 8007326:	2600      	movs	r6, #0
 8007328:	341a      	adds	r4, #26
 800732a:	42b5      	cmp	r5, r6
 800732c:	d11a      	bne.n	8007364 <_printf_common+0xc8>
 800732e:	2000      	movs	r0, #0
 8007330:	e008      	b.n	8007344 <_printf_common+0xa8>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4641      	mov	r1, r8
 8007338:	4638      	mov	r0, r7
 800733a:	47c8      	blx	r9
 800733c:	3001      	adds	r0, #1
 800733e:	d103      	bne.n	8007348 <_printf_common+0xac>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	3501      	adds	r5, #1
 800734a:	e7c6      	b.n	80072da <_printf_common+0x3e>
 800734c:	18e1      	adds	r1, r4, r3
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	2030      	movs	r0, #48	@ 0x30
 8007352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007356:	4422      	add	r2, r4
 8007358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800735c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007360:	3302      	adds	r3, #2
 8007362:	e7c7      	b.n	80072f4 <_printf_common+0x58>
 8007364:	2301      	movs	r3, #1
 8007366:	4622      	mov	r2, r4
 8007368:	4641      	mov	r1, r8
 800736a:	4638      	mov	r0, r7
 800736c:	47c8      	blx	r9
 800736e:	3001      	adds	r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa4>
 8007372:	3601      	adds	r6, #1
 8007374:	e7d9      	b.n	800732a <_printf_common+0x8e>
	...

08007378 <_printf_i>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	7e0f      	ldrb	r7, [r1, #24]
 800737e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007380:	2f78      	cmp	r7, #120	@ 0x78
 8007382:	4691      	mov	r9, r2
 8007384:	4680      	mov	r8, r0
 8007386:	460c      	mov	r4, r1
 8007388:	469a      	mov	sl, r3
 800738a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800738e:	d807      	bhi.n	80073a0 <_printf_i+0x28>
 8007390:	2f62      	cmp	r7, #98	@ 0x62
 8007392:	d80a      	bhi.n	80073aa <_printf_i+0x32>
 8007394:	2f00      	cmp	r7, #0
 8007396:	f000 80d2 	beq.w	800753e <_printf_i+0x1c6>
 800739a:	2f58      	cmp	r7, #88	@ 0x58
 800739c:	f000 80b9 	beq.w	8007512 <_printf_i+0x19a>
 80073a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073a8:	e03a      	b.n	8007420 <_printf_i+0xa8>
 80073aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073ae:	2b15      	cmp	r3, #21
 80073b0:	d8f6      	bhi.n	80073a0 <_printf_i+0x28>
 80073b2:	a101      	add	r1, pc, #4	@ (adr r1, 80073b8 <_printf_i+0x40>)
 80073b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007425 	.word	0x08007425
 80073c0:	080073a1 	.word	0x080073a1
 80073c4:	080073a1 	.word	0x080073a1
 80073c8:	080073a1 	.word	0x080073a1
 80073cc:	080073a1 	.word	0x080073a1
 80073d0:	08007425 	.word	0x08007425
 80073d4:	080073a1 	.word	0x080073a1
 80073d8:	080073a1 	.word	0x080073a1
 80073dc:	080073a1 	.word	0x080073a1
 80073e0:	080073a1 	.word	0x080073a1
 80073e4:	08007525 	.word	0x08007525
 80073e8:	0800744f 	.word	0x0800744f
 80073ec:	080074df 	.word	0x080074df
 80073f0:	080073a1 	.word	0x080073a1
 80073f4:	080073a1 	.word	0x080073a1
 80073f8:	08007547 	.word	0x08007547
 80073fc:	080073a1 	.word	0x080073a1
 8007400:	0800744f 	.word	0x0800744f
 8007404:	080073a1 	.word	0x080073a1
 8007408:	080073a1 	.word	0x080073a1
 800740c:	080074e7 	.word	0x080074e7
 8007410:	6833      	ldr	r3, [r6, #0]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6032      	str	r2, [r6, #0]
 8007418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800741c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007420:	2301      	movs	r3, #1
 8007422:	e09d      	b.n	8007560 <_printf_i+0x1e8>
 8007424:	6833      	ldr	r3, [r6, #0]
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	6031      	str	r1, [r6, #0]
 800742c:	0606      	lsls	r6, r0, #24
 800742e:	d501      	bpl.n	8007434 <_printf_i+0xbc>
 8007430:	681d      	ldr	r5, [r3, #0]
 8007432:	e003      	b.n	800743c <_printf_i+0xc4>
 8007434:	0645      	lsls	r5, r0, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0xb8>
 8007438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800743c:	2d00      	cmp	r5, #0
 800743e:	da03      	bge.n	8007448 <_printf_i+0xd0>
 8007440:	232d      	movs	r3, #45	@ 0x2d
 8007442:	426d      	negs	r5, r5
 8007444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007448:	4859      	ldr	r0, [pc, #356]	@ (80075b0 <_printf_i+0x238>)
 800744a:	230a      	movs	r3, #10
 800744c:	e011      	b.n	8007472 <_printf_i+0xfa>
 800744e:	6821      	ldr	r1, [r4, #0]
 8007450:	6833      	ldr	r3, [r6, #0]
 8007452:	0608      	lsls	r0, r1, #24
 8007454:	f853 5b04 	ldr.w	r5, [r3], #4
 8007458:	d402      	bmi.n	8007460 <_printf_i+0xe8>
 800745a:	0649      	lsls	r1, r1, #25
 800745c:	bf48      	it	mi
 800745e:	b2ad      	uxthmi	r5, r5
 8007460:	2f6f      	cmp	r7, #111	@ 0x6f
 8007462:	4853      	ldr	r0, [pc, #332]	@ (80075b0 <_printf_i+0x238>)
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	bf14      	ite	ne
 8007468:	230a      	movne	r3, #10
 800746a:	2308      	moveq	r3, #8
 800746c:	2100      	movs	r1, #0
 800746e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007472:	6866      	ldr	r6, [r4, #4]
 8007474:	60a6      	str	r6, [r4, #8]
 8007476:	2e00      	cmp	r6, #0
 8007478:	bfa2      	ittt	ge
 800747a:	6821      	ldrge	r1, [r4, #0]
 800747c:	f021 0104 	bicge.w	r1, r1, #4
 8007480:	6021      	strge	r1, [r4, #0]
 8007482:	b90d      	cbnz	r5, 8007488 <_printf_i+0x110>
 8007484:	2e00      	cmp	r6, #0
 8007486:	d04b      	beq.n	8007520 <_printf_i+0x1a8>
 8007488:	4616      	mov	r6, r2
 800748a:	fbb5 f1f3 	udiv	r1, r5, r3
 800748e:	fb03 5711 	mls	r7, r3, r1, r5
 8007492:	5dc7      	ldrb	r7, [r0, r7]
 8007494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007498:	462f      	mov	r7, r5
 800749a:	42bb      	cmp	r3, r7
 800749c:	460d      	mov	r5, r1
 800749e:	d9f4      	bls.n	800748a <_printf_i+0x112>
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d10b      	bne.n	80074bc <_printf_i+0x144>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07df      	lsls	r7, r3, #31
 80074a8:	d508      	bpl.n	80074bc <_printf_i+0x144>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	6861      	ldr	r1, [r4, #4]
 80074ae:	4299      	cmp	r1, r3
 80074b0:	bfde      	ittt	le
 80074b2:	2330      	movle	r3, #48	@ 0x30
 80074b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074bc:	1b92      	subs	r2, r2, r6
 80074be:	6122      	str	r2, [r4, #16]
 80074c0:	f8cd a000 	str.w	sl, [sp]
 80074c4:	464b      	mov	r3, r9
 80074c6:	aa03      	add	r2, sp, #12
 80074c8:	4621      	mov	r1, r4
 80074ca:	4640      	mov	r0, r8
 80074cc:	f7ff fee6 	bl	800729c <_printf_common>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d14a      	bne.n	800756a <_printf_i+0x1f2>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b004      	add	sp, #16
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	f043 0320 	orr.w	r3, r3, #32
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	4833      	ldr	r0, [pc, #204]	@ (80075b4 <_printf_i+0x23c>)
 80074e8:	2778      	movs	r7, #120	@ 0x78
 80074ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	6831      	ldr	r1, [r6, #0]
 80074f2:	061f      	lsls	r7, r3, #24
 80074f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80074f8:	d402      	bmi.n	8007500 <_printf_i+0x188>
 80074fa:	065f      	lsls	r7, r3, #25
 80074fc:	bf48      	it	mi
 80074fe:	b2ad      	uxthmi	r5, r5
 8007500:	6031      	str	r1, [r6, #0]
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	bf44      	itt	mi
 8007506:	f043 0320 	orrmi.w	r3, r3, #32
 800750a:	6023      	strmi	r3, [r4, #0]
 800750c:	b11d      	cbz	r5, 8007516 <_printf_i+0x19e>
 800750e:	2310      	movs	r3, #16
 8007510:	e7ac      	b.n	800746c <_printf_i+0xf4>
 8007512:	4827      	ldr	r0, [pc, #156]	@ (80075b0 <_printf_i+0x238>)
 8007514:	e7e9      	b.n	80074ea <_printf_i+0x172>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f023 0320 	bic.w	r3, r3, #32
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	e7f6      	b.n	800750e <_printf_i+0x196>
 8007520:	4616      	mov	r6, r2
 8007522:	e7bd      	b.n	80074a0 <_printf_i+0x128>
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	6961      	ldr	r1, [r4, #20]
 800752a:	1d18      	adds	r0, r3, #4
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	062e      	lsls	r6, r5, #24
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	d501      	bpl.n	8007538 <_printf_i+0x1c0>
 8007534:	6019      	str	r1, [r3, #0]
 8007536:	e002      	b.n	800753e <_printf_i+0x1c6>
 8007538:	0668      	lsls	r0, r5, #25
 800753a:	d5fb      	bpl.n	8007534 <_printf_i+0x1bc>
 800753c:	8019      	strh	r1, [r3, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	4616      	mov	r6, r2
 8007544:	e7bc      	b.n	80074c0 <_printf_i+0x148>
 8007546:	6833      	ldr	r3, [r6, #0]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	6032      	str	r2, [r6, #0]
 800754c:	681e      	ldr	r6, [r3, #0]
 800754e:	6862      	ldr	r2, [r4, #4]
 8007550:	2100      	movs	r1, #0
 8007552:	4630      	mov	r0, r6
 8007554:	f7f8 fe3c 	bl	80001d0 <memchr>
 8007558:	b108      	cbz	r0, 800755e <_printf_i+0x1e6>
 800755a:	1b80      	subs	r0, r0, r6
 800755c:	6060      	str	r0, [r4, #4]
 800755e:	6863      	ldr	r3, [r4, #4]
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	2300      	movs	r3, #0
 8007564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007568:	e7aa      	b.n	80074c0 <_printf_i+0x148>
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	4632      	mov	r2, r6
 800756e:	4649      	mov	r1, r9
 8007570:	4640      	mov	r0, r8
 8007572:	47d0      	blx	sl
 8007574:	3001      	adds	r0, #1
 8007576:	d0ad      	beq.n	80074d4 <_printf_i+0x15c>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	079b      	lsls	r3, r3, #30
 800757c:	d413      	bmi.n	80075a6 <_printf_i+0x22e>
 800757e:	68e0      	ldr	r0, [r4, #12]
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	4298      	cmp	r0, r3
 8007584:	bfb8      	it	lt
 8007586:	4618      	movlt	r0, r3
 8007588:	e7a6      	b.n	80074d8 <_printf_i+0x160>
 800758a:	2301      	movs	r3, #1
 800758c:	4632      	mov	r2, r6
 800758e:	4649      	mov	r1, r9
 8007590:	4640      	mov	r0, r8
 8007592:	47d0      	blx	sl
 8007594:	3001      	adds	r0, #1
 8007596:	d09d      	beq.n	80074d4 <_printf_i+0x15c>
 8007598:	3501      	adds	r5, #1
 800759a:	68e3      	ldr	r3, [r4, #12]
 800759c:	9903      	ldr	r1, [sp, #12]
 800759e:	1a5b      	subs	r3, r3, r1
 80075a0:	42ab      	cmp	r3, r5
 80075a2:	dcf2      	bgt.n	800758a <_printf_i+0x212>
 80075a4:	e7eb      	b.n	800757e <_printf_i+0x206>
 80075a6:	2500      	movs	r5, #0
 80075a8:	f104 0619 	add.w	r6, r4, #25
 80075ac:	e7f5      	b.n	800759a <_printf_i+0x222>
 80075ae:	bf00      	nop
 80075b0:	0800c1de 	.word	0x0800c1de
 80075b4:	0800c1ef 	.word	0x0800c1ef

080075b8 <_scanf_float>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	b087      	sub	sp, #28
 80075be:	4617      	mov	r7, r2
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	688b      	ldr	r3, [r1, #8]
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80075ca:	bf81      	itttt	hi
 80075cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80075d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80075d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80075d8:	608b      	strhi	r3, [r1, #8]
 80075da:	680b      	ldr	r3, [r1, #0]
 80075dc:	460a      	mov	r2, r1
 80075de:	f04f 0500 	mov.w	r5, #0
 80075e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80075e6:	f842 3b1c 	str.w	r3, [r2], #28
 80075ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075ee:	4680      	mov	r8, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	bf98      	it	ls
 80075f4:	f04f 0b00 	movls.w	fp, #0
 80075f8:	9201      	str	r2, [sp, #4]
 80075fa:	4616      	mov	r6, r2
 80075fc:	46aa      	mov	sl, r5
 80075fe:	46a9      	mov	r9, r5
 8007600:	9502      	str	r5, [sp, #8]
 8007602:	68a2      	ldr	r2, [r4, #8]
 8007604:	b152      	cbz	r2, 800761c <_scanf_float+0x64>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b4e      	cmp	r3, #78	@ 0x4e
 800760c:	d864      	bhi.n	80076d8 <_scanf_float+0x120>
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d83c      	bhi.n	800768c <_scanf_float+0xd4>
 8007612:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007616:	b2c8      	uxtb	r0, r1
 8007618:	280e      	cmp	r0, #14
 800761a:	d93a      	bls.n	8007692 <_scanf_float+0xda>
 800761c:	f1b9 0f00 	cmp.w	r9, #0
 8007620:	d003      	beq.n	800762a <_scanf_float+0x72>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800762e:	f1ba 0f01 	cmp.w	sl, #1
 8007632:	f200 8117 	bhi.w	8007864 <_scanf_float+0x2ac>
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	429e      	cmp	r6, r3
 800763a:	f200 8108 	bhi.w	800784e <_scanf_float+0x296>
 800763e:	2001      	movs	r0, #1
 8007640:	b007      	add	sp, #28
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800764a:	2a0d      	cmp	r2, #13
 800764c:	d8e6      	bhi.n	800761c <_scanf_float+0x64>
 800764e:	a101      	add	r1, pc, #4	@ (adr r1, 8007654 <_scanf_float+0x9c>)
 8007650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007654:	0800779b 	.word	0x0800779b
 8007658:	0800761d 	.word	0x0800761d
 800765c:	0800761d 	.word	0x0800761d
 8007660:	0800761d 	.word	0x0800761d
 8007664:	080077fb 	.word	0x080077fb
 8007668:	080077d3 	.word	0x080077d3
 800766c:	0800761d 	.word	0x0800761d
 8007670:	0800761d 	.word	0x0800761d
 8007674:	080077a9 	.word	0x080077a9
 8007678:	0800761d 	.word	0x0800761d
 800767c:	0800761d 	.word	0x0800761d
 8007680:	0800761d 	.word	0x0800761d
 8007684:	0800761d 	.word	0x0800761d
 8007688:	08007761 	.word	0x08007761
 800768c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007690:	e7db      	b.n	800764a <_scanf_float+0x92>
 8007692:	290e      	cmp	r1, #14
 8007694:	d8c2      	bhi.n	800761c <_scanf_float+0x64>
 8007696:	a001      	add	r0, pc, #4	@ (adr r0, 800769c <_scanf_float+0xe4>)
 8007698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800769c:	08007751 	.word	0x08007751
 80076a0:	0800761d 	.word	0x0800761d
 80076a4:	08007751 	.word	0x08007751
 80076a8:	080077e7 	.word	0x080077e7
 80076ac:	0800761d 	.word	0x0800761d
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	08007737 	.word	0x08007737
 80076b8:	08007737 	.word	0x08007737
 80076bc:	08007737 	.word	0x08007737
 80076c0:	08007737 	.word	0x08007737
 80076c4:	08007737 	.word	0x08007737
 80076c8:	08007737 	.word	0x08007737
 80076cc:	08007737 	.word	0x08007737
 80076d0:	08007737 	.word	0x08007737
 80076d4:	08007737 	.word	0x08007737
 80076d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80076da:	d809      	bhi.n	80076f0 <_scanf_float+0x138>
 80076dc:	2b60      	cmp	r3, #96	@ 0x60
 80076de:	d8b2      	bhi.n	8007646 <_scanf_float+0x8e>
 80076e0:	2b54      	cmp	r3, #84	@ 0x54
 80076e2:	d07b      	beq.n	80077dc <_scanf_float+0x224>
 80076e4:	2b59      	cmp	r3, #89	@ 0x59
 80076e6:	d199      	bne.n	800761c <_scanf_float+0x64>
 80076e8:	2d07      	cmp	r5, #7
 80076ea:	d197      	bne.n	800761c <_scanf_float+0x64>
 80076ec:	2508      	movs	r5, #8
 80076ee:	e02c      	b.n	800774a <_scanf_float+0x192>
 80076f0:	2b74      	cmp	r3, #116	@ 0x74
 80076f2:	d073      	beq.n	80077dc <_scanf_float+0x224>
 80076f4:	2b79      	cmp	r3, #121	@ 0x79
 80076f6:	e7f6      	b.n	80076e6 <_scanf_float+0x12e>
 80076f8:	6821      	ldr	r1, [r4, #0]
 80076fa:	05c8      	lsls	r0, r1, #23
 80076fc:	d51b      	bpl.n	8007736 <_scanf_float+0x17e>
 80076fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007702:	6021      	str	r1, [r4, #0]
 8007704:	f109 0901 	add.w	r9, r9, #1
 8007708:	f1bb 0f00 	cmp.w	fp, #0
 800770c:	d003      	beq.n	8007716 <_scanf_float+0x15e>
 800770e:	3201      	adds	r2, #1
 8007710:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007714:	60a2      	str	r2, [r4, #8]
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	3b01      	subs	r3, #1
 800771a:	60a3      	str	r3, [r4, #8]
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	3301      	adds	r3, #1
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3b01      	subs	r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	f340 8087 	ble.w	800783c <_scanf_float+0x284>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	e765      	b.n	8007602 <_scanf_float+0x4a>
 8007736:	eb1a 0105 	adds.w	r1, sl, r5
 800773a:	f47f af6f 	bne.w	800761c <_scanf_float+0x64>
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	460d      	mov	r5, r1
 8007748:	468a      	mov	sl, r1
 800774a:	f806 3b01 	strb.w	r3, [r6], #1
 800774e:	e7e2      	b.n	8007716 <_scanf_float+0x15e>
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	0610      	lsls	r0, r2, #24
 8007754:	f57f af62 	bpl.w	800761c <_scanf_float+0x64>
 8007758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	e7f4      	b.n	800774a <_scanf_float+0x192>
 8007760:	f1ba 0f00 	cmp.w	sl, #0
 8007764:	d10e      	bne.n	8007784 <_scanf_float+0x1cc>
 8007766:	f1b9 0f00 	cmp.w	r9, #0
 800776a:	d10e      	bne.n	800778a <_scanf_float+0x1d2>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007772:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007776:	d108      	bne.n	800778a <_scanf_float+0x1d2>
 8007778:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800777c:	6022      	str	r2, [r4, #0]
 800777e:	f04f 0a01 	mov.w	sl, #1
 8007782:	e7e2      	b.n	800774a <_scanf_float+0x192>
 8007784:	f1ba 0f02 	cmp.w	sl, #2
 8007788:	d055      	beq.n	8007836 <_scanf_float+0x27e>
 800778a:	2d01      	cmp	r5, #1
 800778c:	d002      	beq.n	8007794 <_scanf_float+0x1dc>
 800778e:	2d04      	cmp	r5, #4
 8007790:	f47f af44 	bne.w	800761c <_scanf_float+0x64>
 8007794:	3501      	adds	r5, #1
 8007796:	b2ed      	uxtb	r5, r5
 8007798:	e7d7      	b.n	800774a <_scanf_float+0x192>
 800779a:	f1ba 0f01 	cmp.w	sl, #1
 800779e:	f47f af3d 	bne.w	800761c <_scanf_float+0x64>
 80077a2:	f04f 0a02 	mov.w	sl, #2
 80077a6:	e7d0      	b.n	800774a <_scanf_float+0x192>
 80077a8:	b97d      	cbnz	r5, 80077ca <_scanf_float+0x212>
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	f47f af38 	bne.w	8007622 <_scanf_float+0x6a>
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80077b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80077bc:	f040 8108 	bne.w	80079d0 <_scanf_float+0x418>
 80077c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80077c4:	6022      	str	r2, [r4, #0]
 80077c6:	2501      	movs	r5, #1
 80077c8:	e7bf      	b.n	800774a <_scanf_float+0x192>
 80077ca:	2d03      	cmp	r5, #3
 80077cc:	d0e2      	beq.n	8007794 <_scanf_float+0x1dc>
 80077ce:	2d05      	cmp	r5, #5
 80077d0:	e7de      	b.n	8007790 <_scanf_float+0x1d8>
 80077d2:	2d02      	cmp	r5, #2
 80077d4:	f47f af22 	bne.w	800761c <_scanf_float+0x64>
 80077d8:	2503      	movs	r5, #3
 80077da:	e7b6      	b.n	800774a <_scanf_float+0x192>
 80077dc:	2d06      	cmp	r5, #6
 80077de:	f47f af1d 	bne.w	800761c <_scanf_float+0x64>
 80077e2:	2507      	movs	r5, #7
 80077e4:	e7b1      	b.n	800774a <_scanf_float+0x192>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	0591      	lsls	r1, r2, #22
 80077ea:	f57f af17 	bpl.w	800761c <_scanf_float+0x64>
 80077ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80077f2:	6022      	str	r2, [r4, #0]
 80077f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80077f8:	e7a7      	b.n	800774a <_scanf_float+0x192>
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007800:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007804:	d006      	beq.n	8007814 <_scanf_float+0x25c>
 8007806:	0550      	lsls	r0, r2, #21
 8007808:	f57f af08 	bpl.w	800761c <_scanf_float+0x64>
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	f000 80de 	beq.w	80079d0 <_scanf_float+0x418>
 8007814:	0591      	lsls	r1, r2, #22
 8007816:	bf58      	it	pl
 8007818:	9902      	ldrpl	r1, [sp, #8]
 800781a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800781e:	bf58      	it	pl
 8007820:	eba9 0101 	subpl.w	r1, r9, r1
 8007824:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007828:	bf58      	it	pl
 800782a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	f04f 0900 	mov.w	r9, #0
 8007834:	e789      	b.n	800774a <_scanf_float+0x192>
 8007836:	f04f 0a03 	mov.w	sl, #3
 800783a:	e786      	b.n	800774a <_scanf_float+0x192>
 800783c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007840:	4639      	mov	r1, r7
 8007842:	4640      	mov	r0, r8
 8007844:	4798      	blx	r3
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f aedb 	beq.w	8007602 <_scanf_float+0x4a>
 800784c:	e6e6      	b.n	800761c <_scanf_float+0x64>
 800784e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007856:	463a      	mov	r2, r7
 8007858:	4640      	mov	r0, r8
 800785a:	4798      	blx	r3
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	3b01      	subs	r3, #1
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	e6e8      	b.n	8007636 <_scanf_float+0x7e>
 8007864:	1e6b      	subs	r3, r5, #1
 8007866:	2b06      	cmp	r3, #6
 8007868:	d824      	bhi.n	80078b4 <_scanf_float+0x2fc>
 800786a:	2d02      	cmp	r5, #2
 800786c:	d836      	bhi.n	80078dc <_scanf_float+0x324>
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	429e      	cmp	r6, r3
 8007872:	f67f aee4 	bls.w	800763e <_scanf_float+0x86>
 8007876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800787a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800787e:	463a      	mov	r2, r7
 8007880:	4640      	mov	r0, r8
 8007882:	4798      	blx	r3
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	3b01      	subs	r3, #1
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	e7f0      	b.n	800786e <_scanf_float+0x2b6>
 800788c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007890:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007894:	463a      	mov	r2, r7
 8007896:	4640      	mov	r0, r8
 8007898:	4798      	blx	r3
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	3b01      	subs	r3, #1
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a4:	fa5f fa8a 	uxtb.w	sl, sl
 80078a8:	f1ba 0f02 	cmp.w	sl, #2
 80078ac:	d1ee      	bne.n	800788c <_scanf_float+0x2d4>
 80078ae:	3d03      	subs	r5, #3
 80078b0:	b2ed      	uxtb	r5, r5
 80078b2:	1b76      	subs	r6, r6, r5
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	05da      	lsls	r2, r3, #23
 80078b8:	d530      	bpl.n	800791c <_scanf_float+0x364>
 80078ba:	055b      	lsls	r3, r3, #21
 80078bc:	d511      	bpl.n	80078e2 <_scanf_float+0x32a>
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	429e      	cmp	r6, r3
 80078c2:	f67f aebc 	bls.w	800763e <_scanf_float+0x86>
 80078c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ce:	463a      	mov	r2, r7
 80078d0:	4640      	mov	r0, r8
 80078d2:	4798      	blx	r3
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	e7f0      	b.n	80078be <_scanf_float+0x306>
 80078dc:	46aa      	mov	sl, r5
 80078de:	46b3      	mov	fp, r6
 80078e0:	e7de      	b.n	80078a0 <_scanf_float+0x2e8>
 80078e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	2965      	cmp	r1, #101	@ 0x65
 80078ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	d00c      	beq.n	8007910 <_scanf_float+0x358>
 80078f6:	2945      	cmp	r1, #69	@ 0x45
 80078f8:	d00a      	beq.n	8007910 <_scanf_float+0x358>
 80078fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078fe:	463a      	mov	r2, r7
 8007900:	4640      	mov	r0, r8
 8007902:	4798      	blx	r3
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800790a:	3b01      	subs	r3, #1
 800790c:	1eb5      	subs	r5, r6, #2
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007914:	463a      	mov	r2, r7
 8007916:	4640      	mov	r0, r8
 8007918:	4798      	blx	r3
 800791a:	462e      	mov	r6, r5
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	f012 0210 	ands.w	r2, r2, #16
 8007922:	d001      	beq.n	8007928 <_scanf_float+0x370>
 8007924:	2000      	movs	r0, #0
 8007926:	e68b      	b.n	8007640 <_scanf_float+0x88>
 8007928:	7032      	strb	r2, [r6, #0]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007934:	d11c      	bne.n	8007970 <_scanf_float+0x3b8>
 8007936:	9b02      	ldr	r3, [sp, #8]
 8007938:	454b      	cmp	r3, r9
 800793a:	eba3 0209 	sub.w	r2, r3, r9
 800793e:	d123      	bne.n	8007988 <_scanf_float+0x3d0>
 8007940:	9901      	ldr	r1, [sp, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	4640      	mov	r0, r8
 8007946:	f002 fbf7 	bl	800a138 <_strtod_r>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	6821      	ldr	r1, [r4, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f011 0f02 	tst.w	r1, #2
 8007954:	ec57 6b10 	vmov	r6, r7, d0
 8007958:	f103 0204 	add.w	r2, r3, #4
 800795c:	d01f      	beq.n	800799e <_scanf_float+0x3e6>
 800795e:	9903      	ldr	r1, [sp, #12]
 8007960:	600a      	str	r2, [r1, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	e9c3 6700 	strd	r6, r7, [r3]
 8007968:	68e3      	ldr	r3, [r4, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60e3      	str	r3, [r4, #12]
 800796e:	e7d9      	b.n	8007924 <_scanf_float+0x36c>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0e4      	beq.n	8007940 <_scanf_float+0x388>
 8007976:	9905      	ldr	r1, [sp, #20]
 8007978:	230a      	movs	r3, #10
 800797a:	3101      	adds	r1, #1
 800797c:	4640      	mov	r0, r8
 800797e:	f002 fc5b 	bl	800a238 <_strtol_r>
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	9e05      	ldr	r6, [sp, #20]
 8007986:	1ac2      	subs	r2, r0, r3
 8007988:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800798c:	429e      	cmp	r6, r3
 800798e:	bf28      	it	cs
 8007990:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007994:	4910      	ldr	r1, [pc, #64]	@ (80079d8 <_scanf_float+0x420>)
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f8e4 	bl	8007b64 <siprintf>
 800799c:	e7d0      	b.n	8007940 <_scanf_float+0x388>
 800799e:	f011 0f04 	tst.w	r1, #4
 80079a2:	9903      	ldr	r1, [sp, #12]
 80079a4:	600a      	str	r2, [r1, #0]
 80079a6:	d1dc      	bne.n	8007962 <_scanf_float+0x3aa>
 80079a8:	681d      	ldr	r5, [r3, #0]
 80079aa:	4632      	mov	r2, r6
 80079ac:	463b      	mov	r3, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f9 f8bb 	bl	8000b2c <__aeabi_dcmpun>
 80079b6:	b128      	cbz	r0, 80079c4 <_scanf_float+0x40c>
 80079b8:	4808      	ldr	r0, [pc, #32]	@ (80079dc <_scanf_float+0x424>)
 80079ba:	f000 f9b7 	bl	8007d2c <nanf>
 80079be:	ed85 0a00 	vstr	s0, [r5]
 80079c2:	e7d1      	b.n	8007968 <_scanf_float+0x3b0>
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f9 f90e 	bl	8000be8 <__aeabi_d2f>
 80079cc:	6028      	str	r0, [r5, #0]
 80079ce:	e7cb      	b.n	8007968 <_scanf_float+0x3b0>
 80079d0:	f04f 0900 	mov.w	r9, #0
 80079d4:	e629      	b.n	800762a <_scanf_float+0x72>
 80079d6:	bf00      	nop
 80079d8:	0800c200 	.word	0x0800c200
 80079dc:	0800c595 	.word	0x0800c595

080079e0 <std>:
 80079e0:	2300      	movs	r3, #0
 80079e2:	b510      	push	{r4, lr}
 80079e4:	4604      	mov	r4, r0
 80079e6:	e9c0 3300 	strd	r3, r3, [r0]
 80079ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ee:	6083      	str	r3, [r0, #8]
 80079f0:	8181      	strh	r1, [r0, #12]
 80079f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80079f4:	81c2      	strh	r2, [r0, #14]
 80079f6:	6183      	str	r3, [r0, #24]
 80079f8:	4619      	mov	r1, r3
 80079fa:	2208      	movs	r2, #8
 80079fc:	305c      	adds	r0, #92	@ 0x5c
 80079fe:	f000 f914 	bl	8007c2a <memset>
 8007a02:	4b0d      	ldr	r3, [pc, #52]	@ (8007a38 <std+0x58>)
 8007a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a06:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <std+0x5c>)
 8007a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a40 <std+0x60>)
 8007a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <std+0x64>)
 8007a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <std+0x68>)
 8007a14:	6224      	str	r4, [r4, #32]
 8007a16:	429c      	cmp	r4, r3
 8007a18:	d006      	beq.n	8007a28 <std+0x48>
 8007a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a1e:	4294      	cmp	r4, r2
 8007a20:	d002      	beq.n	8007a28 <std+0x48>
 8007a22:	33d0      	adds	r3, #208	@ 0xd0
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d105      	bne.n	8007a34 <std+0x54>
 8007a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	f000 b978 	b.w	8007d24 <__retarget_lock_init_recursive>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	08007ba5 	.word	0x08007ba5
 8007a3c:	08007bc7 	.word	0x08007bc7
 8007a40:	08007bff 	.word	0x08007bff
 8007a44:	08007c23 	.word	0x08007c23
 8007a48:	200008bc 	.word	0x200008bc

08007a4c <stdio_exit_handler>:
 8007a4c:	4a02      	ldr	r2, [pc, #8]	@ (8007a58 <stdio_exit_handler+0xc>)
 8007a4e:	4903      	ldr	r1, [pc, #12]	@ (8007a5c <stdio_exit_handler+0x10>)
 8007a50:	4803      	ldr	r0, [pc, #12]	@ (8007a60 <stdio_exit_handler+0x14>)
 8007a52:	f000 b869 	b.w	8007b28 <_fwalk_sglue>
 8007a56:	bf00      	nop
 8007a58:	20000014 	.word	0x20000014
 8007a5c:	0800a5f5 	.word	0x0800a5f5
 8007a60:	20000024 	.word	0x20000024

08007a64 <cleanup_stdio>:
 8007a64:	6841      	ldr	r1, [r0, #4]
 8007a66:	4b0c      	ldr	r3, [pc, #48]	@ (8007a98 <cleanup_stdio+0x34>)
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	d001      	beq.n	8007a74 <cleanup_stdio+0x10>
 8007a70:	f002 fdc0 	bl	800a5f4 <_fflush_r>
 8007a74:	68a1      	ldr	r1, [r4, #8]
 8007a76:	4b09      	ldr	r3, [pc, #36]	@ (8007a9c <cleanup_stdio+0x38>)
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	d002      	beq.n	8007a82 <cleanup_stdio+0x1e>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f002 fdb9 	bl	800a5f4 <_fflush_r>
 8007a82:	68e1      	ldr	r1, [r4, #12]
 8007a84:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <cleanup_stdio+0x3c>)
 8007a86:	4299      	cmp	r1, r3
 8007a88:	d004      	beq.n	8007a94 <cleanup_stdio+0x30>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a90:	f002 bdb0 	b.w	800a5f4 <_fflush_r>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	bf00      	nop
 8007a98:	200008bc 	.word	0x200008bc
 8007a9c:	20000924 	.word	0x20000924
 8007aa0:	2000098c 	.word	0x2000098c

08007aa4 <global_stdio_init.part.0>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad4 <global_stdio_init.part.0+0x30>)
 8007aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8007ad8 <global_stdio_init.part.0+0x34>)
 8007aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8007adc <global_stdio_init.part.0+0x38>)
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	f7ff ff94 	bl	80079e0 <std>
 8007ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007abc:	2201      	movs	r2, #1
 8007abe:	2109      	movs	r1, #9
 8007ac0:	f7ff ff8e 	bl	80079e0 <std>
 8007ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ac8:	2202      	movs	r2, #2
 8007aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ace:	2112      	movs	r1, #18
 8007ad0:	f7ff bf86 	b.w	80079e0 <std>
 8007ad4:	200009f4 	.word	0x200009f4
 8007ad8:	200008bc 	.word	0x200008bc
 8007adc:	08007a4d 	.word	0x08007a4d

08007ae0 <__sfp_lock_acquire>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	@ (8007ae8 <__sfp_lock_acquire+0x8>)
 8007ae2:	f000 b920 	b.w	8007d26 <__retarget_lock_acquire_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	200009fd 	.word	0x200009fd

08007aec <__sfp_lock_release>:
 8007aec:	4801      	ldr	r0, [pc, #4]	@ (8007af4 <__sfp_lock_release+0x8>)
 8007aee:	f000 b91b 	b.w	8007d28 <__retarget_lock_release_recursive>
 8007af2:	bf00      	nop
 8007af4:	200009fd 	.word	0x200009fd

08007af8 <__sinit>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4604      	mov	r4, r0
 8007afc:	f7ff fff0 	bl	8007ae0 <__sfp_lock_acquire>
 8007b00:	6a23      	ldr	r3, [r4, #32]
 8007b02:	b11b      	cbz	r3, 8007b0c <__sinit+0x14>
 8007b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b08:	f7ff bff0 	b.w	8007aec <__sfp_lock_release>
 8007b0c:	4b04      	ldr	r3, [pc, #16]	@ (8007b20 <__sinit+0x28>)
 8007b0e:	6223      	str	r3, [r4, #32]
 8007b10:	4b04      	ldr	r3, [pc, #16]	@ (8007b24 <__sinit+0x2c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f5      	bne.n	8007b04 <__sinit+0xc>
 8007b18:	f7ff ffc4 	bl	8007aa4 <global_stdio_init.part.0>
 8007b1c:	e7f2      	b.n	8007b04 <__sinit+0xc>
 8007b1e:	bf00      	nop
 8007b20:	08007a65 	.word	0x08007a65
 8007b24:	200009f4 	.word	0x200009f4

08007b28 <_fwalk_sglue>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	4688      	mov	r8, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	2600      	movs	r6, #0
 8007b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b38:	f1b9 0901 	subs.w	r9, r9, #1
 8007b3c:	d505      	bpl.n	8007b4a <_fwalk_sglue+0x22>
 8007b3e:	6824      	ldr	r4, [r4, #0]
 8007b40:	2c00      	cmp	r4, #0
 8007b42:	d1f7      	bne.n	8007b34 <_fwalk_sglue+0xc>
 8007b44:	4630      	mov	r0, r6
 8007b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4a:	89ab      	ldrh	r3, [r5, #12]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d907      	bls.n	8007b60 <_fwalk_sglue+0x38>
 8007b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b54:	3301      	adds	r3, #1
 8007b56:	d003      	beq.n	8007b60 <_fwalk_sglue+0x38>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	4306      	orrs	r6, r0
 8007b60:	3568      	adds	r5, #104	@ 0x68
 8007b62:	e7e9      	b.n	8007b38 <_fwalk_sglue+0x10>

08007b64 <siprintf>:
 8007b64:	b40e      	push	{r1, r2, r3}
 8007b66:	b500      	push	{lr}
 8007b68:	b09c      	sub	sp, #112	@ 0x70
 8007b6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	9006      	str	r0, [sp, #24]
 8007b70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b74:	4809      	ldr	r0, [pc, #36]	@ (8007b9c <siprintf+0x38>)
 8007b76:	9107      	str	r1, [sp, #28]
 8007b78:	9104      	str	r1, [sp, #16]
 8007b7a:	4909      	ldr	r1, [pc, #36]	@ (8007ba0 <siprintf+0x3c>)
 8007b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b80:	9105      	str	r1, [sp, #20]
 8007b82:	6800      	ldr	r0, [r0, #0]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	a902      	add	r1, sp, #8
 8007b88:	f002 fbb4 	bl	800a2f4 <_svfiprintf_r>
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	b01c      	add	sp, #112	@ 0x70
 8007b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b98:	b003      	add	sp, #12
 8007b9a:	4770      	bx	lr
 8007b9c:	20000020 	.word	0x20000020
 8007ba0:	ffff0208 	.word	0xffff0208

08007ba4 <__sread>:
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bac:	f000 f86c 	bl	8007c88 <_read_r>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	bfab      	itete	ge
 8007bb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bb8:	181b      	addge	r3, r3, r0
 8007bba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bbe:	bfac      	ite	ge
 8007bc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bc2:	81a3      	strhlt	r3, [r4, #12]
 8007bc4:	bd10      	pop	{r4, pc}

08007bc6 <__swrite>:
 8007bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bca:	461f      	mov	r7, r3
 8007bcc:	898b      	ldrh	r3, [r1, #12]
 8007bce:	05db      	lsls	r3, r3, #23
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	d505      	bpl.n	8007be4 <__swrite+0x1e>
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	2302      	movs	r3, #2
 8007bde:	2200      	movs	r2, #0
 8007be0:	f000 f840 	bl	8007c64 <_lseek_r>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	f000 b857 	b.w	8007cac <_write_r>

08007bfe <__sseek>:
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	460c      	mov	r4, r1
 8007c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c06:	f000 f82d 	bl	8007c64 <_lseek_r>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	bf15      	itete	ne
 8007c10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c1a:	81a3      	strheq	r3, [r4, #12]
 8007c1c:	bf18      	it	ne
 8007c1e:	81a3      	strhne	r3, [r4, #12]
 8007c20:	bd10      	pop	{r4, pc}

08007c22 <__sclose>:
 8007c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c26:	f000 b80d 	b.w	8007c44 <_close_r>

08007c2a <memset>:
 8007c2a:	4402      	add	r2, r0
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d100      	bne.n	8007c34 <memset+0xa>
 8007c32:	4770      	bx	lr
 8007c34:	f803 1b01 	strb.w	r1, [r3], #1
 8007c38:	e7f9      	b.n	8007c2e <memset+0x4>
	...

08007c3c <_localeconv_r>:
 8007c3c:	4800      	ldr	r0, [pc, #0]	@ (8007c40 <_localeconv_r+0x4>)
 8007c3e:	4770      	bx	lr
 8007c40:	20000160 	.word	0x20000160

08007c44 <_close_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d06      	ldr	r5, [pc, #24]	@ (8007c60 <_close_r+0x1c>)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	f7fa fec2 	bl	80029d8 <_close>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d102      	bne.n	8007c5e <_close_r+0x1a>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <_close_r+0x1a>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	200009f8 	.word	0x200009f8

08007c64 <_lseek_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	@ (8007c84 <_lseek_r+0x20>)
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7fa fed7 	bl	8002a26 <_lseek>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_lseek_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_lseek_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	200009f8 	.word	0x200009f8

08007c88 <_read_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d07      	ldr	r5, [pc, #28]	@ (8007ca8 <_read_r+0x20>)
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	4608      	mov	r0, r1
 8007c90:	4611      	mov	r1, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	602a      	str	r2, [r5, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	f7fa fe65 	bl	8002966 <_read>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_read_r+0x1e>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_read_r+0x1e>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	200009f8 	.word	0x200009f8

08007cac <_write_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	@ (8007ccc <_write_r+0x20>)
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4608      	mov	r0, r1
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	602a      	str	r2, [r5, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f7fa fe70 	bl	80029a0 <_write>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_write_r+0x1e>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_write_r+0x1e>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	200009f8 	.word	0x200009f8

08007cd0 <__errno>:
 8007cd0:	4b01      	ldr	r3, [pc, #4]	@ (8007cd8 <__errno+0x8>)
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000020 	.word	0x20000020

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4d0d      	ldr	r5, [pc, #52]	@ (8007d14 <__libc_init_array+0x38>)
 8007ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8007d18 <__libc_init_array+0x3c>)
 8007ce2:	1b64      	subs	r4, r4, r5
 8007ce4:	10a4      	asrs	r4, r4, #2
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	4d0b      	ldr	r5, [pc, #44]	@ (8007d1c <__libc_init_array+0x40>)
 8007cee:	4c0c      	ldr	r4, [pc, #48]	@ (8007d20 <__libc_init_array+0x44>)
 8007cf0:	f003 fb70 	bl	800b3d4 <_init>
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	0800c600 	.word	0x0800c600
 8007d18:	0800c600 	.word	0x0800c600
 8007d1c:	0800c600 	.word	0x0800c600
 8007d20:	0800c604 	.word	0x0800c604

08007d24 <__retarget_lock_init_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <__retarget_lock_acquire_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <__retarget_lock_release_recursive>:
 8007d28:	4770      	bx	lr
	...

08007d2c <nanf>:
 8007d2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007d34 <nanf+0x8>
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	7fc00000 	.word	0x7fc00000

08007d38 <quorem>:
 8007d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	6903      	ldr	r3, [r0, #16]
 8007d3e:	690c      	ldr	r4, [r1, #16]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	4607      	mov	r7, r0
 8007d44:	db7e      	blt.n	8007e44 <quorem+0x10c>
 8007d46:	3c01      	subs	r4, #1
 8007d48:	f101 0814 	add.w	r8, r1, #20
 8007d4c:	00a3      	lsls	r3, r4, #2
 8007d4e:	f100 0514 	add.w	r5, r0, #20
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d62:	3301      	adds	r3, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d6e:	d32e      	bcc.n	8007dce <quorem+0x96>
 8007d70:	f04f 0a00 	mov.w	sl, #0
 8007d74:	46c4      	mov	ip, r8
 8007d76:	46ae      	mov	lr, r5
 8007d78:	46d3      	mov	fp, sl
 8007d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d7e:	b298      	uxth	r0, r3
 8007d80:	fb06 a000 	mla	r0, r6, r0, sl
 8007d84:	0c02      	lsrs	r2, r0, #16
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	fb06 2303 	mla	r3, r6, r3, r2
 8007d8c:	f8de 2000 	ldr.w	r2, [lr]
 8007d90:	b280      	uxth	r0, r0
 8007d92:	b292      	uxth	r2, r2
 8007d94:	1a12      	subs	r2, r2, r0
 8007d96:	445a      	add	r2, fp
 8007d98:	f8de 0000 	ldr.w	r0, [lr]
 8007d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007da6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007daa:	b292      	uxth	r2, r2
 8007dac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007db0:	45e1      	cmp	r9, ip
 8007db2:	f84e 2b04 	str.w	r2, [lr], #4
 8007db6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007dba:	d2de      	bcs.n	8007d7a <quorem+0x42>
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	58eb      	ldr	r3, [r5, r3]
 8007dc0:	b92b      	cbnz	r3, 8007dce <quorem+0x96>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	d32f      	bcc.n	8007e2c <quorem+0xf4>
 8007dcc:	613c      	str	r4, [r7, #16]
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f001 f9c2 	bl	8009158 <__mcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	db25      	blt.n	8007e24 <quorem+0xec>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007de0:	f8d1 c000 	ldr.w	ip, [r1]
 8007de4:	fa1f fe82 	uxth.w	lr, r2
 8007de8:	fa1f f38c 	uxth.w	r3, ip
 8007dec:	eba3 030e 	sub.w	r3, r3, lr
 8007df0:	4403      	add	r3, r0
 8007df2:	0c12      	lsrs	r2, r2, #16
 8007df4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007df8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e02:	45c1      	cmp	r9, r8
 8007e04:	f841 3b04 	str.w	r3, [r1], #4
 8007e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e0c:	d2e6      	bcs.n	8007ddc <quorem+0xa4>
 8007e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e16:	b922      	cbnz	r2, 8007e22 <quorem+0xea>
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	d30b      	bcc.n	8007e38 <quorem+0x100>
 8007e20:	613c      	str	r4, [r7, #16]
 8007e22:	3601      	adds	r6, #1
 8007e24:	4630      	mov	r0, r6
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	3b04      	subs	r3, #4
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d1cb      	bne.n	8007dcc <quorem+0x94>
 8007e34:	3c01      	subs	r4, #1
 8007e36:	e7c6      	b.n	8007dc6 <quorem+0x8e>
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1ef      	bne.n	8007e20 <quorem+0xe8>
 8007e40:	3c01      	subs	r4, #1
 8007e42:	e7ea      	b.n	8007e1a <quorem+0xe2>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7ee      	b.n	8007e26 <quorem+0xee>

08007e48 <_dtoa_r>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	69c7      	ldr	r7, [r0, #28]
 8007e4e:	b099      	sub	sp, #100	@ 0x64
 8007e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e54:	ec55 4b10 	vmov	r4, r5, d0
 8007e58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e5c:	4683      	mov	fp, r0
 8007e5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e62:	b97f      	cbnz	r7, 8007e84 <_dtoa_r+0x3c>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f000 fdfd 	bl	8008a64 <malloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e70:	b920      	cbnz	r0, 8007e7c <_dtoa_r+0x34>
 8007e72:	4ba7      	ldr	r3, [pc, #668]	@ (8008110 <_dtoa_r+0x2c8>)
 8007e74:	21ef      	movs	r1, #239	@ 0xef
 8007e76:	48a7      	ldr	r0, [pc, #668]	@ (8008114 <_dtoa_r+0x2cc>)
 8007e78:	f002 fc36 	bl	800a6e8 <__assert_func>
 8007e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e80:	6007      	str	r7, [r0, #0]
 8007e82:	60c7      	str	r7, [r0, #12]
 8007e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	b159      	cbz	r1, 8007ea4 <_dtoa_r+0x5c>
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	604a      	str	r2, [r1, #4]
 8007e90:	2301      	movs	r3, #1
 8007e92:	4093      	lsls	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
 8007e96:	4658      	mov	r0, fp
 8007e98:	f000 feda 	bl	8008c50 <_Bfree>
 8007e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	1e2b      	subs	r3, r5, #0
 8007ea6:	bfb9      	ittee	lt
 8007ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eac:	9303      	strlt	r3, [sp, #12]
 8007eae:	2300      	movge	r3, #0
 8007eb0:	6033      	strge	r3, [r6, #0]
 8007eb2:	9f03      	ldr	r7, [sp, #12]
 8007eb4:	4b98      	ldr	r3, [pc, #608]	@ (8008118 <_dtoa_r+0x2d0>)
 8007eb6:	bfbc      	itt	lt
 8007eb8:	2201      	movlt	r2, #1
 8007eba:	6032      	strlt	r2, [r6, #0]
 8007ebc:	43bb      	bics	r3, r7
 8007ebe:	d112      	bne.n	8007ee6 <_dtoa_r+0x9e>
 8007ec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	f000 854d 	beq.w	800896c <_dtoa_r+0xb24>
 8007ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800812c <_dtoa_r+0x2e4>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 854f 	beq.w	800897c <_dtoa_r+0xb34>
 8007ede:	f10a 0303 	add.w	r3, sl, #3
 8007ee2:	f000 bd49 	b.w	8008978 <_dtoa_r+0xb30>
 8007ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	ec51 0b17 	vmov	r0, r1, d7
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ef6:	f7f8 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007efa:	4680      	mov	r8, r0
 8007efc:	b158      	cbz	r0, 8007f16 <_dtoa_r+0xce>
 8007efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f00:	2301      	movs	r3, #1
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f06:	b113      	cbz	r3, 8007f0e <_dtoa_r+0xc6>
 8007f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f0a:	4b84      	ldr	r3, [pc, #528]	@ (800811c <_dtoa_r+0x2d4>)
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008130 <_dtoa_r+0x2e8>
 8007f12:	f000 bd33 	b.w	800897c <_dtoa_r+0xb34>
 8007f16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007f1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f001 fa3a 	bl	8009398 <__d2b>
 8007f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f28:	4681      	mov	r9, r0
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d077      	beq.n	800801e <_dtoa_r+0x1d6>
 8007f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f48:	4619      	mov	r1, r3
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4b74      	ldr	r3, [pc, #464]	@ (8008120 <_dtoa_r+0x2d8>)
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	a369      	add	r3, pc, #420	@ (adr r3, 80080f8 <_dtoa_r+0x2b0>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8007f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8008100 <_dtoa_r+0x2b8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f993 	bl	800028c <__adddf3>
 8007f66:	4604      	mov	r4, r0
 8007f68:	4630      	mov	r0, r6
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	f7f8 fada 	bl	8000524 <__aeabi_i2d>
 8007f70:	a365      	add	r3, pc, #404	@ (adr r3, 8008108 <_dtoa_r+0x2c0>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fb3f 	bl	80005f8 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 f983 	bl	800028c <__adddf3>
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	f7f8 fde5 	bl	8000b58 <__aeabi_d2iz>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4607      	mov	r7, r0
 8007f92:	2300      	movs	r3, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 fda0 	bl	8000adc <__aeabi_dcmplt>
 8007f9c:	b140      	cbz	r0, 8007fb0 <_dtoa_r+0x168>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7f8 fac0 	bl	8000524 <__aeabi_i2d>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	f7f8 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fac:	b900      	cbnz	r0, 8007fb0 <_dtoa_r+0x168>
 8007fae:	3f01      	subs	r7, #1
 8007fb0:	2f16      	cmp	r7, #22
 8007fb2:	d851      	bhi.n	8008058 <_dtoa_r+0x210>
 8007fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008124 <_dtoa_r+0x2dc>)
 8007fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fc2:	f7f8 fd8b 	bl	8000adc <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d048      	beq.n	800805c <_dtoa_r+0x214>
 8007fca:	3f01      	subs	r7, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9312      	str	r3, [sp, #72]	@ 0x48
 8007fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fd2:	1b9b      	subs	r3, r3, r6
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	bf44      	itt	mi
 8007fd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007fdc:	2300      	movmi	r3, #0
 8007fde:	9208      	str	r2, [sp, #32]
 8007fe0:	bf54      	ite	pl
 8007fe2:	f04f 0800 	movpl.w	r8, #0
 8007fe6:	9308      	strmi	r3, [sp, #32]
 8007fe8:	2f00      	cmp	r7, #0
 8007fea:	db39      	blt.n	8008060 <_dtoa_r+0x218>
 8007fec:	9b08      	ldr	r3, [sp, #32]
 8007fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ff0:	443b      	add	r3, r7
 8007ff2:	9308      	str	r3, [sp, #32]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d864      	bhi.n	80080c8 <_dtoa_r+0x280>
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	bfc4      	itt	gt
 8008002:	3b04      	subgt	r3, #4
 8008004:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	f1a3 0302 	sub.w	r3, r3, #2
 800800c:	bfcc      	ite	gt
 800800e:	2400      	movgt	r4, #0
 8008010:	2401      	movle	r4, #1
 8008012:	2b03      	cmp	r3, #3
 8008014:	d863      	bhi.n	80080de <_dtoa_r+0x296>
 8008016:	e8df f003 	tbb	[pc, r3]
 800801a:	372a      	.short	0x372a
 800801c:	5535      	.short	0x5535
 800801e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008022:	441e      	add	r6, r3
 8008024:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008028:	2b20      	cmp	r3, #32
 800802a:	bfc1      	itttt	gt
 800802c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008030:	409f      	lslgt	r7, r3
 8008032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800803a:	bfd6      	itet	le
 800803c:	f1c3 0320 	rsble	r3, r3, #32
 8008040:	ea47 0003 	orrgt.w	r0, r7, r3
 8008044:	fa04 f003 	lslle.w	r0, r4, r3
 8008048:	f7f8 fa5c 	bl	8000504 <__aeabi_ui2d>
 800804c:	2201      	movs	r2, #1
 800804e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008052:	3e01      	subs	r6, #1
 8008054:	9214      	str	r2, [sp, #80]	@ 0x50
 8008056:	e777      	b.n	8007f48 <_dtoa_r+0x100>
 8008058:	2301      	movs	r3, #1
 800805a:	e7b8      	b.n	8007fce <_dtoa_r+0x186>
 800805c:	9012      	str	r0, [sp, #72]	@ 0x48
 800805e:	e7b7      	b.n	8007fd0 <_dtoa_r+0x188>
 8008060:	427b      	negs	r3, r7
 8008062:	930a      	str	r3, [sp, #40]	@ 0x28
 8008064:	2300      	movs	r3, #0
 8008066:	eba8 0807 	sub.w	r8, r8, r7
 800806a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800806c:	e7c4      	b.n	8007ff8 <_dtoa_r+0x1b0>
 800806e:	2300      	movs	r3, #0
 8008070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc35      	bgt.n	80080e4 <_dtoa_r+0x29c>
 8008078:	2301      	movs	r3, #1
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	9307      	str	r3, [sp, #28]
 800807e:	461a      	mov	r2, r3
 8008080:	920e      	str	r2, [sp, #56]	@ 0x38
 8008082:	e00b      	b.n	800809c <_dtoa_r+0x254>
 8008084:	2301      	movs	r3, #1
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0x228>
 8008088:	2300      	movs	r3, #0
 800808a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800808c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	2b01      	cmp	r3, #1
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	bfb8      	it	lt
 800809a:	2301      	movlt	r3, #1
 800809c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080a0:	2100      	movs	r1, #0
 80080a2:	2204      	movs	r2, #4
 80080a4:	f102 0514 	add.w	r5, r2, #20
 80080a8:	429d      	cmp	r5, r3
 80080aa:	d91f      	bls.n	80080ec <_dtoa_r+0x2a4>
 80080ac:	6041      	str	r1, [r0, #4]
 80080ae:	4658      	mov	r0, fp
 80080b0:	f000 fd8e 	bl	8008bd0 <_Balloc>
 80080b4:	4682      	mov	sl, r0
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d13c      	bne.n	8008134 <_dtoa_r+0x2ec>
 80080ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008128 <_dtoa_r+0x2e0>)
 80080bc:	4602      	mov	r2, r0
 80080be:	f240 11af 	movw	r1, #431	@ 0x1af
 80080c2:	e6d8      	b.n	8007e76 <_dtoa_r+0x2e>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e7e0      	b.n	800808a <_dtoa_r+0x242>
 80080c8:	2401      	movs	r4, #1
 80080ca:	2300      	movs	r3, #0
 80080cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	2200      	movs	r2, #0
 80080da:	2312      	movs	r3, #18
 80080dc:	e7d0      	b.n	8008080 <_dtoa_r+0x238>
 80080de:	2301      	movs	r3, #1
 80080e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e2:	e7f5      	b.n	80080d0 <_dtoa_r+0x288>
 80080e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	9307      	str	r3, [sp, #28]
 80080ea:	e7d7      	b.n	800809c <_dtoa_r+0x254>
 80080ec:	3101      	adds	r1, #1
 80080ee:	0052      	lsls	r2, r2, #1
 80080f0:	e7d8      	b.n	80080a4 <_dtoa_r+0x25c>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	636f4361 	.word	0x636f4361
 80080fc:	3fd287a7 	.word	0x3fd287a7
 8008100:	8b60c8b3 	.word	0x8b60c8b3
 8008104:	3fc68a28 	.word	0x3fc68a28
 8008108:	509f79fb 	.word	0x509f79fb
 800810c:	3fd34413 	.word	0x3fd34413
 8008110:	0800c212 	.word	0x0800c212
 8008114:	0800c229 	.word	0x0800c229
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	0800c1dd 	.word	0x0800c1dd
 8008120:	3ff80000 	.word	0x3ff80000
 8008124:	0800c320 	.word	0x0800c320
 8008128:	0800c281 	.word	0x0800c281
 800812c:	0800c20e 	.word	0x0800c20e
 8008130:	0800c1dc 	.word	0x0800c1dc
 8008134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008138:	6018      	str	r0, [r3, #0]
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	2b0e      	cmp	r3, #14
 800813e:	f200 80a4 	bhi.w	800828a <_dtoa_r+0x442>
 8008142:	2c00      	cmp	r4, #0
 8008144:	f000 80a1 	beq.w	800828a <_dtoa_r+0x442>
 8008148:	2f00      	cmp	r7, #0
 800814a:	dd33      	ble.n	80081b4 <_dtoa_r+0x36c>
 800814c:	4bad      	ldr	r3, [pc, #692]	@ (8008404 <_dtoa_r+0x5bc>)
 800814e:	f007 020f 	and.w	r2, r7, #15
 8008152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008156:	ed93 7b00 	vldr	d7, [r3]
 800815a:	05f8      	lsls	r0, r7, #23
 800815c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008164:	d516      	bpl.n	8008194 <_dtoa_r+0x34c>
 8008166:	4ba8      	ldr	r3, [pc, #672]	@ (8008408 <_dtoa_r+0x5c0>)
 8008168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800816c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008170:	f7f8 fb6c 	bl	800084c <__aeabi_ddiv>
 8008174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008178:	f004 040f 	and.w	r4, r4, #15
 800817c:	2603      	movs	r6, #3
 800817e:	4da2      	ldr	r5, [pc, #648]	@ (8008408 <_dtoa_r+0x5c0>)
 8008180:	b954      	cbnz	r4, 8008198 <_dtoa_r+0x350>
 8008182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	f7f8 fb5f 	bl	800084c <__aeabi_ddiv>
 800818e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008192:	e028      	b.n	80081e6 <_dtoa_r+0x39e>
 8008194:	2602      	movs	r6, #2
 8008196:	e7f2      	b.n	800817e <_dtoa_r+0x336>
 8008198:	07e1      	lsls	r1, r4, #31
 800819a:	d508      	bpl.n	80081ae <_dtoa_r+0x366>
 800819c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ac:	3601      	adds	r6, #1
 80081ae:	1064      	asrs	r4, r4, #1
 80081b0:	3508      	adds	r5, #8
 80081b2:	e7e5      	b.n	8008180 <_dtoa_r+0x338>
 80081b4:	f000 80d2 	beq.w	800835c <_dtoa_r+0x514>
 80081b8:	427c      	negs	r4, r7
 80081ba:	4b92      	ldr	r3, [pc, #584]	@ (8008404 <_dtoa_r+0x5bc>)
 80081bc:	4d92      	ldr	r5, [pc, #584]	@ (8008408 <_dtoa_r+0x5c0>)
 80081be:	f004 020f 	and.w	r2, r4, #15
 80081c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ce:	f7f8 fa13 	bl	80005f8 <__aeabi_dmul>
 80081d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d6:	1124      	asrs	r4, r4, #4
 80081d8:	2300      	movs	r3, #0
 80081da:	2602      	movs	r6, #2
 80081dc:	2c00      	cmp	r4, #0
 80081de:	f040 80b2 	bne.w	8008346 <_dtoa_r+0x4fe>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1d3      	bne.n	800818e <_dtoa_r+0x346>
 80081e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80b7 	beq.w	8008360 <_dtoa_r+0x518>
 80081f2:	4b86      	ldr	r3, [pc, #536]	@ (800840c <_dtoa_r+0x5c4>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	4620      	mov	r0, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	f7f8 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	f000 80ae 	beq.w	8008360 <_dtoa_r+0x518>
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80aa 	beq.w	8008360 <_dtoa_r+0x518>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd37      	ble.n	8008282 <_dtoa_r+0x43a>
 8008212:	1e7b      	subs	r3, r7, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	4620      	mov	r0, r4
 8008218:	4b7d      	ldr	r3, [pc, #500]	@ (8008410 <_dtoa_r+0x5c8>)
 800821a:	2200      	movs	r2, #0
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 f9eb 	bl	80005f8 <__aeabi_dmul>
 8008222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008226:	9c00      	ldr	r4, [sp, #0]
 8008228:	3601      	adds	r6, #1
 800822a:	4630      	mov	r0, r6
 800822c:	f7f8 f97a 	bl	8000524 <__aeabi_i2d>
 8008230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008234:	f7f8 f9e0 	bl	80005f8 <__aeabi_dmul>
 8008238:	4b76      	ldr	r3, [pc, #472]	@ (8008414 <_dtoa_r+0x5cc>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f826 	bl	800028c <__adddf3>
 8008240:	4605      	mov	r5, r0
 8008242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008246:	2c00      	cmp	r4, #0
 8008248:	f040 808d 	bne.w	8008366 <_dtoa_r+0x51e>
 800824c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008250:	4b71      	ldr	r3, [pc, #452]	@ (8008418 <_dtoa_r+0x5d0>)
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008260:	462a      	mov	r2, r5
 8008262:	4633      	mov	r3, r6
 8008264:	f7f8 fc58 	bl	8000b18 <__aeabi_dcmpgt>
 8008268:	2800      	cmp	r0, #0
 800826a:	f040 828b 	bne.w	8008784 <_dtoa_r+0x93c>
 800826e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008272:	462a      	mov	r2, r5
 8008274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008278:	f7f8 fc30 	bl	8000adc <__aeabi_dcmplt>
 800827c:	2800      	cmp	r0, #0
 800827e:	f040 8128 	bne.w	80084d2 <_dtoa_r+0x68a>
 8008282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800828a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f2c0 815a 	blt.w	8008546 <_dtoa_r+0x6fe>
 8008292:	2f0e      	cmp	r7, #14
 8008294:	f300 8157 	bgt.w	8008546 <_dtoa_r+0x6fe>
 8008298:	4b5a      	ldr	r3, [pc, #360]	@ (8008404 <_dtoa_r+0x5bc>)
 800829a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800829e:	ed93 7b00 	vldr	d7, [r3]
 80082a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	ed8d 7b00 	vstr	d7, [sp]
 80082aa:	da03      	bge.n	80082b4 <_dtoa_r+0x46c>
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f340 8101 	ble.w	80084b6 <_dtoa_r+0x66e>
 80082b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082b8:	4656      	mov	r6, sl
 80082ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 fac3 	bl	800084c <__aeabi_ddiv>
 80082c6:	f7f8 fc47 	bl	8000b58 <__aeabi_d2iz>
 80082ca:	4680      	mov	r8, r0
 80082cc:	f7f8 f92a 	bl	8000524 <__aeabi_i2d>
 80082d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082e4:	f7f7 ffd0 	bl	8000288 <__aeabi_dsub>
 80082e8:	f806 4b01 	strb.w	r4, [r6], #1
 80082ec:	9d07      	ldr	r5, [sp, #28]
 80082ee:	eba6 040a 	sub.w	r4, r6, sl
 80082f2:	42a5      	cmp	r5, r4
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	f040 8117 	bne.w	800852a <_dtoa_r+0x6e2>
 80082fc:	f7f7 ffc6 	bl	800028c <__adddf3>
 8008300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	f7f8 fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f040 80f9 	bne.w	8008504 <_dtoa_r+0x6bc>
 8008312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f8 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800831e:	b118      	cbz	r0, 8008328 <_dtoa_r+0x4e0>
 8008320:	f018 0f01 	tst.w	r8, #1
 8008324:	f040 80ee 	bne.w	8008504 <_dtoa_r+0x6bc>
 8008328:	4649      	mov	r1, r9
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fc90 	bl	8008c50 <_Bfree>
 8008330:	2300      	movs	r3, #0
 8008332:	7033      	strb	r3, [r6, #0]
 8008334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008336:	3701      	adds	r7, #1
 8008338:	601f      	str	r7, [r3, #0]
 800833a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 831d 	beq.w	800897c <_dtoa_r+0xb34>
 8008342:	601e      	str	r6, [r3, #0]
 8008344:	e31a      	b.n	800897c <_dtoa_r+0xb34>
 8008346:	07e2      	lsls	r2, r4, #31
 8008348:	d505      	bpl.n	8008356 <_dtoa_r+0x50e>
 800834a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	3601      	adds	r6, #1
 8008354:	2301      	movs	r3, #1
 8008356:	1064      	asrs	r4, r4, #1
 8008358:	3508      	adds	r5, #8
 800835a:	e73f      	b.n	80081dc <_dtoa_r+0x394>
 800835c:	2602      	movs	r6, #2
 800835e:	e742      	b.n	80081e6 <_dtoa_r+0x39e>
 8008360:	9c07      	ldr	r4, [sp, #28]
 8008362:	9704      	str	r7, [sp, #16]
 8008364:	e761      	b.n	800822a <_dtoa_r+0x3e2>
 8008366:	4b27      	ldr	r3, [pc, #156]	@ (8008404 <_dtoa_r+0x5bc>)
 8008368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800836a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800836e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008372:	4454      	add	r4, sl
 8008374:	2900      	cmp	r1, #0
 8008376:	d053      	beq.n	8008420 <_dtoa_r+0x5d8>
 8008378:	4928      	ldr	r1, [pc, #160]	@ (800841c <_dtoa_r+0x5d4>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7f8 fa66 	bl	800084c <__aeabi_ddiv>
 8008380:	4633      	mov	r3, r6
 8008382:	462a      	mov	r2, r5
 8008384:	f7f7 ff80 	bl	8000288 <__aeabi_dsub>
 8008388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800838c:	4656      	mov	r6, sl
 800838e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008392:	f7f8 fbe1 	bl	8000b58 <__aeabi_d2iz>
 8008396:	4605      	mov	r5, r0
 8008398:	f7f8 f8c4 	bl	8000524 <__aeabi_i2d>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a4:	f7f7 ff70 	bl	8000288 <__aeabi_dsub>
 80083a8:	3530      	adds	r5, #48	@ 0x30
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083b2:	f806 5b01 	strb.w	r5, [r6], #1
 80083b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083ba:	f7f8 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d171      	bne.n	80084a6 <_dtoa_r+0x65e>
 80083c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c6:	4911      	ldr	r1, [pc, #68]	@ (800840c <_dtoa_r+0x5c4>)
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7f7 ff5d 	bl	8000288 <__aeabi_dsub>
 80083ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083d2:	f7f8 fb83 	bl	8000adc <__aeabi_dcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 8095 	bne.w	8008506 <_dtoa_r+0x6be>
 80083dc:	42a6      	cmp	r6, r4
 80083de:	f43f af50 	beq.w	8008282 <_dtoa_r+0x43a>
 80083e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008410 <_dtoa_r+0x5c8>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	f7f8 f905 	bl	80005f8 <__aeabi_dmul>
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <_dtoa_r+0x5c8>)
 80083f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083f4:	2200      	movs	r2, #0
 80083f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083fa:	f7f8 f8fd 	bl	80005f8 <__aeabi_dmul>
 80083fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008402:	e7c4      	b.n	800838e <_dtoa_r+0x546>
 8008404:	0800c320 	.word	0x0800c320
 8008408:	0800c2f8 	.word	0x0800c2f8
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	40240000 	.word	0x40240000
 8008414:	401c0000 	.word	0x401c0000
 8008418:	40140000 	.word	0x40140000
 800841c:	3fe00000 	.word	0x3fe00000
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	f7f8 f8e8 	bl	80005f8 <__aeabi_dmul>
 8008428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800842c:	9415      	str	r4, [sp, #84]	@ 0x54
 800842e:	4656      	mov	r6, sl
 8008430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008434:	f7f8 fb90 	bl	8000b58 <__aeabi_d2iz>
 8008438:	4605      	mov	r5, r0
 800843a:	f7f8 f873 	bl	8000524 <__aeabi_i2d>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008446:	f7f7 ff1f 	bl	8000288 <__aeabi_dsub>
 800844a:	3530      	adds	r5, #48	@ 0x30
 800844c:	f806 5b01 	strb.w	r5, [r6], #1
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	42a6      	cmp	r6, r4
 8008456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	d124      	bne.n	80084aa <_dtoa_r+0x662>
 8008460:	4bac      	ldr	r3, [pc, #688]	@ (8008714 <_dtoa_r+0x8cc>)
 8008462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008466:	f7f7 ff11 	bl	800028c <__adddf3>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	f7f8 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d145      	bne.n	8008506 <_dtoa_r+0x6be>
 800847a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800847e:	49a5      	ldr	r1, [pc, #660]	@ (8008714 <_dtoa_r+0x8cc>)
 8008480:	2000      	movs	r0, #0
 8008482:	f7f7 ff01 	bl	8000288 <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848e:	f7f8 fb25 	bl	8000adc <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f aef5 	beq.w	8008282 <_dtoa_r+0x43a>
 8008498:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800849a:	1e73      	subs	r3, r6, #1
 800849c:	9315      	str	r3, [sp, #84]	@ 0x54
 800849e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084a2:	2b30      	cmp	r3, #48	@ 0x30
 80084a4:	d0f8      	beq.n	8008498 <_dtoa_r+0x650>
 80084a6:	9f04      	ldr	r7, [sp, #16]
 80084a8:	e73e      	b.n	8008328 <_dtoa_r+0x4e0>
 80084aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008718 <_dtoa_r+0x8d0>)
 80084ac:	f7f8 f8a4 	bl	80005f8 <__aeabi_dmul>
 80084b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b4:	e7bc      	b.n	8008430 <_dtoa_r+0x5e8>
 80084b6:	d10c      	bne.n	80084d2 <_dtoa_r+0x68a>
 80084b8:	4b98      	ldr	r3, [pc, #608]	@ (800871c <_dtoa_r+0x8d4>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c0:	f7f8 f89a 	bl	80005f8 <__aeabi_dmul>
 80084c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c8:	f7f8 fb1c 	bl	8000b04 <__aeabi_dcmpge>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f000 8157 	beq.w	8008780 <_dtoa_r+0x938>
 80084d2:	2400      	movs	r4, #0
 80084d4:	4625      	mov	r5, r4
 80084d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084d8:	43db      	mvns	r3, r3
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	4656      	mov	r6, sl
 80084de:	2700      	movs	r7, #0
 80084e0:	4621      	mov	r1, r4
 80084e2:	4658      	mov	r0, fp
 80084e4:	f000 fbb4 	bl	8008c50 <_Bfree>
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	d0dc      	beq.n	80084a6 <_dtoa_r+0x65e>
 80084ec:	b12f      	cbz	r7, 80084fa <_dtoa_r+0x6b2>
 80084ee:	42af      	cmp	r7, r5
 80084f0:	d003      	beq.n	80084fa <_dtoa_r+0x6b2>
 80084f2:	4639      	mov	r1, r7
 80084f4:	4658      	mov	r0, fp
 80084f6:	f000 fbab 	bl	8008c50 <_Bfree>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4658      	mov	r0, fp
 80084fe:	f000 fba7 	bl	8008c50 <_Bfree>
 8008502:	e7d0      	b.n	80084a6 <_dtoa_r+0x65e>
 8008504:	9704      	str	r7, [sp, #16]
 8008506:	4633      	mov	r3, r6
 8008508:	461e      	mov	r6, r3
 800850a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800850e:	2a39      	cmp	r2, #57	@ 0x39
 8008510:	d107      	bne.n	8008522 <_dtoa_r+0x6da>
 8008512:	459a      	cmp	sl, r3
 8008514:	d1f8      	bne.n	8008508 <_dtoa_r+0x6c0>
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	3201      	adds	r2, #1
 800851a:	9204      	str	r2, [sp, #16]
 800851c:	2230      	movs	r2, #48	@ 0x30
 800851e:	f88a 2000 	strb.w	r2, [sl]
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	3201      	adds	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	e7bd      	b.n	80084a6 <_dtoa_r+0x65e>
 800852a:	4b7b      	ldr	r3, [pc, #492]	@ (8008718 <_dtoa_r+0x8d0>)
 800852c:	2200      	movs	r2, #0
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f8 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f aebb 	beq.w	80082ba <_dtoa_r+0x472>
 8008544:	e6f0      	b.n	8008328 <_dtoa_r+0x4e0>
 8008546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008548:	2a00      	cmp	r2, #0
 800854a:	f000 80db 	beq.w	8008704 <_dtoa_r+0x8bc>
 800854e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008550:	2a01      	cmp	r2, #1
 8008552:	f300 80bf 	bgt.w	80086d4 <_dtoa_r+0x88c>
 8008556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008558:	2a00      	cmp	r2, #0
 800855a:	f000 80b7 	beq.w	80086cc <_dtoa_r+0x884>
 800855e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008562:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008564:	4646      	mov	r6, r8
 8008566:	9a08      	ldr	r2, [sp, #32]
 8008568:	2101      	movs	r1, #1
 800856a:	441a      	add	r2, r3
 800856c:	4658      	mov	r0, fp
 800856e:	4498      	add	r8, r3
 8008570:	9208      	str	r2, [sp, #32]
 8008572:	f000 fc6b 	bl	8008e4c <__i2b>
 8008576:	4605      	mov	r5, r0
 8008578:	b15e      	cbz	r6, 8008592 <_dtoa_r+0x74a>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd08      	ble.n	8008592 <_dtoa_r+0x74a>
 8008580:	42b3      	cmp	r3, r6
 8008582:	9a08      	ldr	r2, [sp, #32]
 8008584:	bfa8      	it	ge
 8008586:	4633      	movge	r3, r6
 8008588:	eba8 0803 	sub.w	r8, r8, r3
 800858c:	1af6      	subs	r6, r6, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008594:	b1f3      	cbz	r3, 80085d4 <_dtoa_r+0x78c>
 8008596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80b7 	beq.w	800870c <_dtoa_r+0x8c4>
 800859e:	b18c      	cbz	r4, 80085c4 <_dtoa_r+0x77c>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4622      	mov	r2, r4
 80085a4:	4658      	mov	r0, fp
 80085a6:	f000 fd11 	bl	8008fcc <__pow5mult>
 80085aa:	464a      	mov	r2, r9
 80085ac:	4601      	mov	r1, r0
 80085ae:	4605      	mov	r5, r0
 80085b0:	4658      	mov	r0, fp
 80085b2:	f000 fc61 	bl	8008e78 <__multiply>
 80085b6:	4649      	mov	r1, r9
 80085b8:	9004      	str	r0, [sp, #16]
 80085ba:	4658      	mov	r0, fp
 80085bc:	f000 fb48 	bl	8008c50 <_Bfree>
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	4699      	mov	r9, r3
 80085c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c6:	1b1a      	subs	r2, r3, r4
 80085c8:	d004      	beq.n	80085d4 <_dtoa_r+0x78c>
 80085ca:	4649      	mov	r1, r9
 80085cc:	4658      	mov	r0, fp
 80085ce:	f000 fcfd 	bl	8008fcc <__pow5mult>
 80085d2:	4681      	mov	r9, r0
 80085d4:	2101      	movs	r1, #1
 80085d6:	4658      	mov	r0, fp
 80085d8:	f000 fc38 	bl	8008e4c <__i2b>
 80085dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085de:	4604      	mov	r4, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 81cf 	beq.w	8008984 <_dtoa_r+0xb3c>
 80085e6:	461a      	mov	r2, r3
 80085e8:	4601      	mov	r1, r0
 80085ea:	4658      	mov	r0, fp
 80085ec:	f000 fcee 	bl	8008fcc <__pow5mult>
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	4604      	mov	r4, r0
 80085f6:	f300 8095 	bgt.w	8008724 <_dtoa_r+0x8dc>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f040 8087 	bne.w	8008710 <_dtoa_r+0x8c8>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008608:	2b00      	cmp	r3, #0
 800860a:	f040 8089 	bne.w	8008720 <_dtoa_r+0x8d8>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008614:	0d1b      	lsrs	r3, r3, #20
 8008616:	051b      	lsls	r3, r3, #20
 8008618:	b12b      	cbz	r3, 8008626 <_dtoa_r+0x7de>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	3301      	adds	r3, #1
 800861e:	9308      	str	r3, [sp, #32]
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	2301      	movs	r3, #1
 8008626:	930a      	str	r3, [sp, #40]	@ 0x28
 8008628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 81b0 	beq.w	8008990 <_dtoa_r+0xb48>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008636:	6918      	ldr	r0, [r3, #16]
 8008638:	f000 fbbc 	bl	8008db4 <__hi0bits>
 800863c:	f1c0 0020 	rsb	r0, r0, #32
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	4418      	add	r0, r3
 8008644:	f010 001f 	ands.w	r0, r0, #31
 8008648:	d077      	beq.n	800873a <_dtoa_r+0x8f2>
 800864a:	f1c0 0320 	rsb	r3, r0, #32
 800864e:	2b04      	cmp	r3, #4
 8008650:	dd6b      	ble.n	800872a <_dtoa_r+0x8e2>
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	f1c0 001c 	rsb	r0, r0, #28
 8008658:	4403      	add	r3, r0
 800865a:	4480      	add	r8, r0
 800865c:	4406      	add	r6, r0
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	f1b8 0f00 	cmp.w	r8, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x82a>
 8008666:	4649      	mov	r1, r9
 8008668:	4642      	mov	r2, r8
 800866a:	4658      	mov	r0, fp
 800866c:	f000 fd08 	bl	8009080 <__lshift>
 8008670:	4681      	mov	r9, r0
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd05      	ble.n	8008684 <_dtoa_r+0x83c>
 8008678:	4621      	mov	r1, r4
 800867a:	461a      	mov	r2, r3
 800867c:	4658      	mov	r0, fp
 800867e:	f000 fcff 	bl	8009080 <__lshift>
 8008682:	4604      	mov	r4, r0
 8008684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008686:	2b00      	cmp	r3, #0
 8008688:	d059      	beq.n	800873e <_dtoa_r+0x8f6>
 800868a:	4621      	mov	r1, r4
 800868c:	4648      	mov	r0, r9
 800868e:	f000 fd63 	bl	8009158 <__mcmp>
 8008692:	2800      	cmp	r0, #0
 8008694:	da53      	bge.n	800873e <_dtoa_r+0x8f6>
 8008696:	1e7b      	subs	r3, r7, #1
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	4649      	mov	r1, r9
 800869c:	2300      	movs	r3, #0
 800869e:	220a      	movs	r2, #10
 80086a0:	4658      	mov	r0, fp
 80086a2:	f000 faf7 	bl	8008c94 <__multadd>
 80086a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a8:	4681      	mov	r9, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8172 	beq.w	8008994 <_dtoa_r+0xb4c>
 80086b0:	2300      	movs	r3, #0
 80086b2:	4629      	mov	r1, r5
 80086b4:	220a      	movs	r2, #10
 80086b6:	4658      	mov	r0, fp
 80086b8:	f000 faec 	bl	8008c94 <__multadd>
 80086bc:	9b00      	ldr	r3, [sp, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	4605      	mov	r5, r0
 80086c2:	dc67      	bgt.n	8008794 <_dtoa_r+0x94c>
 80086c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc41      	bgt.n	800874e <_dtoa_r+0x906>
 80086ca:	e063      	b.n	8008794 <_dtoa_r+0x94c>
 80086cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086d2:	e746      	b.n	8008562 <_dtoa_r+0x71a>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	1e5c      	subs	r4, r3, #1
 80086d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086da:	42a3      	cmp	r3, r4
 80086dc:	bfbf      	itttt	lt
 80086de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80086e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80086e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80086e4:	1ae3      	sublt	r3, r4, r3
 80086e6:	bfb4      	ite	lt
 80086e8:	18d2      	addlt	r2, r2, r3
 80086ea:	1b1c      	subge	r4, r3, r4
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	bfbc      	itt	lt
 80086f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80086f2:	2400      	movlt	r4, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb5      	itete	lt
 80086f8:	eba8 0603 	sublt.w	r6, r8, r3
 80086fc:	9b07      	ldrge	r3, [sp, #28]
 80086fe:	2300      	movlt	r3, #0
 8008700:	4646      	movge	r6, r8
 8008702:	e730      	b.n	8008566 <_dtoa_r+0x71e>
 8008704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008706:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008708:	4646      	mov	r6, r8
 800870a:	e735      	b.n	8008578 <_dtoa_r+0x730>
 800870c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800870e:	e75c      	b.n	80085ca <_dtoa_r+0x782>
 8008710:	2300      	movs	r3, #0
 8008712:	e788      	b.n	8008626 <_dtoa_r+0x7de>
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	40240000 	.word	0x40240000
 800871c:	40140000 	.word	0x40140000
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	e780      	b.n	8008626 <_dtoa_r+0x7de>
 8008724:	2300      	movs	r3, #0
 8008726:	930a      	str	r3, [sp, #40]	@ 0x28
 8008728:	e782      	b.n	8008630 <_dtoa_r+0x7e8>
 800872a:	d099      	beq.n	8008660 <_dtoa_r+0x818>
 800872c:	9a08      	ldr	r2, [sp, #32]
 800872e:	331c      	adds	r3, #28
 8008730:	441a      	add	r2, r3
 8008732:	4498      	add	r8, r3
 8008734:	441e      	add	r6, r3
 8008736:	9208      	str	r2, [sp, #32]
 8008738:	e792      	b.n	8008660 <_dtoa_r+0x818>
 800873a:	4603      	mov	r3, r0
 800873c:	e7f6      	b.n	800872c <_dtoa_r+0x8e4>
 800873e:	9b07      	ldr	r3, [sp, #28]
 8008740:	9704      	str	r7, [sp, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dc20      	bgt.n	8008788 <_dtoa_r+0x940>
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874a:	2b02      	cmp	r3, #2
 800874c:	dd1e      	ble.n	800878c <_dtoa_r+0x944>
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f aec0 	bne.w	80084d6 <_dtoa_r+0x68e>
 8008756:	4621      	mov	r1, r4
 8008758:	2205      	movs	r2, #5
 800875a:	4658      	mov	r0, fp
 800875c:	f000 fa9a 	bl	8008c94 <__multadd>
 8008760:	4601      	mov	r1, r0
 8008762:	4604      	mov	r4, r0
 8008764:	4648      	mov	r0, r9
 8008766:	f000 fcf7 	bl	8009158 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	f77f aeb3 	ble.w	80084d6 <_dtoa_r+0x68e>
 8008770:	4656      	mov	r6, sl
 8008772:	2331      	movs	r3, #49	@ 0x31
 8008774:	f806 3b01 	strb.w	r3, [r6], #1
 8008778:	9b04      	ldr	r3, [sp, #16]
 800877a:	3301      	adds	r3, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	e6ae      	b.n	80084de <_dtoa_r+0x696>
 8008780:	9c07      	ldr	r4, [sp, #28]
 8008782:	9704      	str	r7, [sp, #16]
 8008784:	4625      	mov	r5, r4
 8008786:	e7f3      	b.n	8008770 <_dtoa_r+0x928>
 8008788:	9b07      	ldr	r3, [sp, #28]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 8104 	beq.w	800899c <_dtoa_r+0xb54>
 8008794:	2e00      	cmp	r6, #0
 8008796:	dd05      	ble.n	80087a4 <_dtoa_r+0x95c>
 8008798:	4629      	mov	r1, r5
 800879a:	4632      	mov	r2, r6
 800879c:	4658      	mov	r0, fp
 800879e:	f000 fc6f 	bl	8009080 <__lshift>
 80087a2:	4605      	mov	r5, r0
 80087a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d05a      	beq.n	8008860 <_dtoa_r+0xa18>
 80087aa:	6869      	ldr	r1, [r5, #4]
 80087ac:	4658      	mov	r0, fp
 80087ae:	f000 fa0f 	bl	8008bd0 <_Balloc>
 80087b2:	4606      	mov	r6, r0
 80087b4:	b928      	cbnz	r0, 80087c2 <_dtoa_r+0x97a>
 80087b6:	4b84      	ldr	r3, [pc, #528]	@ (80089c8 <_dtoa_r+0xb80>)
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087be:	f7ff bb5a 	b.w	8007e76 <_dtoa_r+0x2e>
 80087c2:	692a      	ldr	r2, [r5, #16]
 80087c4:	3202      	adds	r2, #2
 80087c6:	0092      	lsls	r2, r2, #2
 80087c8:	f105 010c 	add.w	r1, r5, #12
 80087cc:	300c      	adds	r0, #12
 80087ce:	f001 ff75 	bl	800a6bc <memcpy>
 80087d2:	2201      	movs	r2, #1
 80087d4:	4631      	mov	r1, r6
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 fc52 	bl	8009080 <__lshift>
 80087dc:	f10a 0301 	add.w	r3, sl, #1
 80087e0:	9307      	str	r3, [sp, #28]
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	4453      	add	r3, sl
 80087e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	462f      	mov	r7, r5
 80087f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f2:	4605      	mov	r5, r0
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	4621      	mov	r1, r4
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4648      	mov	r0, r9
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	f7ff fa9b 	bl	8007d38 <quorem>
 8008802:	4639      	mov	r1, r7
 8008804:	9002      	str	r0, [sp, #8]
 8008806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800880a:	4648      	mov	r0, r9
 800880c:	f000 fca4 	bl	8009158 <__mcmp>
 8008810:	462a      	mov	r2, r5
 8008812:	9008      	str	r0, [sp, #32]
 8008814:	4621      	mov	r1, r4
 8008816:	4658      	mov	r0, fp
 8008818:	f000 fcba 	bl	8009190 <__mdiff>
 800881c:	68c2      	ldr	r2, [r0, #12]
 800881e:	4606      	mov	r6, r0
 8008820:	bb02      	cbnz	r2, 8008864 <_dtoa_r+0xa1c>
 8008822:	4601      	mov	r1, r0
 8008824:	4648      	mov	r0, r9
 8008826:	f000 fc97 	bl	8009158 <__mcmp>
 800882a:	4602      	mov	r2, r0
 800882c:	4631      	mov	r1, r6
 800882e:	4658      	mov	r0, fp
 8008830:	920e      	str	r2, [sp, #56]	@ 0x38
 8008832:	f000 fa0d 	bl	8008c50 <_Bfree>
 8008836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800883a:	9e07      	ldr	r6, [sp, #28]
 800883c:	ea43 0102 	orr.w	r1, r3, r2
 8008840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008842:	4319      	orrs	r1, r3
 8008844:	d110      	bne.n	8008868 <_dtoa_r+0xa20>
 8008846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800884a:	d029      	beq.n	80088a0 <_dtoa_r+0xa58>
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd02      	ble.n	8008858 <_dtoa_r+0xa10>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	f883 8000 	strb.w	r8, [r3]
 800885e:	e63f      	b.n	80084e0 <_dtoa_r+0x698>
 8008860:	4628      	mov	r0, r5
 8008862:	e7bb      	b.n	80087dc <_dtoa_r+0x994>
 8008864:	2201      	movs	r2, #1
 8008866:	e7e1      	b.n	800882c <_dtoa_r+0x9e4>
 8008868:	9b08      	ldr	r3, [sp, #32]
 800886a:	2b00      	cmp	r3, #0
 800886c:	db04      	blt.n	8008878 <_dtoa_r+0xa30>
 800886e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008870:	430b      	orrs	r3, r1
 8008872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008874:	430b      	orrs	r3, r1
 8008876:	d120      	bne.n	80088ba <_dtoa_r+0xa72>
 8008878:	2a00      	cmp	r2, #0
 800887a:	dded      	ble.n	8008858 <_dtoa_r+0xa10>
 800887c:	4649      	mov	r1, r9
 800887e:	2201      	movs	r2, #1
 8008880:	4658      	mov	r0, fp
 8008882:	f000 fbfd 	bl	8009080 <__lshift>
 8008886:	4621      	mov	r1, r4
 8008888:	4681      	mov	r9, r0
 800888a:	f000 fc65 	bl	8009158 <__mcmp>
 800888e:	2800      	cmp	r0, #0
 8008890:	dc03      	bgt.n	800889a <_dtoa_r+0xa52>
 8008892:	d1e1      	bne.n	8008858 <_dtoa_r+0xa10>
 8008894:	f018 0f01 	tst.w	r8, #1
 8008898:	d0de      	beq.n	8008858 <_dtoa_r+0xa10>
 800889a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800889e:	d1d8      	bne.n	8008852 <_dtoa_r+0xa0a>
 80088a0:	9a00      	ldr	r2, [sp, #0]
 80088a2:	2339      	movs	r3, #57	@ 0x39
 80088a4:	7013      	strb	r3, [r2, #0]
 80088a6:	4633      	mov	r3, r6
 80088a8:	461e      	mov	r6, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088b0:	2a39      	cmp	r2, #57	@ 0x39
 80088b2:	d052      	beq.n	800895a <_dtoa_r+0xb12>
 80088b4:	3201      	adds	r2, #1
 80088b6:	701a      	strb	r2, [r3, #0]
 80088b8:	e612      	b.n	80084e0 <_dtoa_r+0x698>
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	dd07      	ble.n	80088ce <_dtoa_r+0xa86>
 80088be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088c2:	d0ed      	beq.n	80088a0 <_dtoa_r+0xa58>
 80088c4:	9a00      	ldr	r2, [sp, #0]
 80088c6:	f108 0301 	add.w	r3, r8, #1
 80088ca:	7013      	strb	r3, [r2, #0]
 80088cc:	e608      	b.n	80084e0 <_dtoa_r+0x698>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	9a07      	ldr	r2, [sp, #28]
 80088d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d8:	4293      	cmp	r3, r2
 80088da:	d028      	beq.n	800892e <_dtoa_r+0xae6>
 80088dc:	4649      	mov	r1, r9
 80088de:	2300      	movs	r3, #0
 80088e0:	220a      	movs	r2, #10
 80088e2:	4658      	mov	r0, fp
 80088e4:	f000 f9d6 	bl	8008c94 <__multadd>
 80088e8:	42af      	cmp	r7, r5
 80088ea:	4681      	mov	r9, r0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	f04f 020a 	mov.w	r2, #10
 80088f4:	4639      	mov	r1, r7
 80088f6:	4658      	mov	r0, fp
 80088f8:	d107      	bne.n	800890a <_dtoa_r+0xac2>
 80088fa:	f000 f9cb 	bl	8008c94 <__multadd>
 80088fe:	4607      	mov	r7, r0
 8008900:	4605      	mov	r5, r0
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	3301      	adds	r3, #1
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	e774      	b.n	80087f4 <_dtoa_r+0x9ac>
 800890a:	f000 f9c3 	bl	8008c94 <__multadd>
 800890e:	4629      	mov	r1, r5
 8008910:	4607      	mov	r7, r0
 8008912:	2300      	movs	r3, #0
 8008914:	220a      	movs	r2, #10
 8008916:	4658      	mov	r0, fp
 8008918:	f000 f9bc 	bl	8008c94 <__multadd>
 800891c:	4605      	mov	r5, r0
 800891e:	e7f0      	b.n	8008902 <_dtoa_r+0xaba>
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	bfcc      	ite	gt
 8008926:	461e      	movgt	r6, r3
 8008928:	2601      	movle	r6, #1
 800892a:	4456      	add	r6, sl
 800892c:	2700      	movs	r7, #0
 800892e:	4649      	mov	r1, r9
 8008930:	2201      	movs	r2, #1
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fba4 	bl	8009080 <__lshift>
 8008938:	4621      	mov	r1, r4
 800893a:	4681      	mov	r9, r0
 800893c:	f000 fc0c 	bl	8009158 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	dcb0      	bgt.n	80088a6 <_dtoa_r+0xa5e>
 8008944:	d102      	bne.n	800894c <_dtoa_r+0xb04>
 8008946:	f018 0f01 	tst.w	r8, #1
 800894a:	d1ac      	bne.n	80088a6 <_dtoa_r+0xa5e>
 800894c:	4633      	mov	r3, r6
 800894e:	461e      	mov	r6, r3
 8008950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008954:	2a30      	cmp	r2, #48	@ 0x30
 8008956:	d0fa      	beq.n	800894e <_dtoa_r+0xb06>
 8008958:	e5c2      	b.n	80084e0 <_dtoa_r+0x698>
 800895a:	459a      	cmp	sl, r3
 800895c:	d1a4      	bne.n	80088a8 <_dtoa_r+0xa60>
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	3301      	adds	r3, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	2331      	movs	r3, #49	@ 0x31
 8008966:	f88a 3000 	strb.w	r3, [sl]
 800896a:	e5b9      	b.n	80084e0 <_dtoa_r+0x698>
 800896c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800896e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089cc <_dtoa_r+0xb84>
 8008972:	b11b      	cbz	r3, 800897c <_dtoa_r+0xb34>
 8008974:	f10a 0308 	add.w	r3, sl, #8
 8008978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	4650      	mov	r0, sl
 800897e:	b019      	add	sp, #100	@ 0x64
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	2b01      	cmp	r3, #1
 8008988:	f77f ae37 	ble.w	80085fa <_dtoa_r+0x7b2>
 800898c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008990:	2001      	movs	r0, #1
 8008992:	e655      	b.n	8008640 <_dtoa_r+0x7f8>
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f77f aed6 	ble.w	8008748 <_dtoa_r+0x900>
 800899c:	4656      	mov	r6, sl
 800899e:	4621      	mov	r1, r4
 80089a0:	4648      	mov	r0, r9
 80089a2:	f7ff f9c9 	bl	8007d38 <quorem>
 80089a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089aa:	f806 8b01 	strb.w	r8, [r6], #1
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	eba6 020a 	sub.w	r2, r6, sl
 80089b4:	4293      	cmp	r3, r2
 80089b6:	ddb3      	ble.n	8008920 <_dtoa_r+0xad8>
 80089b8:	4649      	mov	r1, r9
 80089ba:	2300      	movs	r3, #0
 80089bc:	220a      	movs	r2, #10
 80089be:	4658      	mov	r0, fp
 80089c0:	f000 f968 	bl	8008c94 <__multadd>
 80089c4:	4681      	mov	r9, r0
 80089c6:	e7ea      	b.n	800899e <_dtoa_r+0xb56>
 80089c8:	0800c281 	.word	0x0800c281
 80089cc:	0800c205 	.word	0x0800c205

080089d0 <_free_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d041      	beq.n	8008a5c <_free_r+0x8c>
 80089d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089dc:	1f0c      	subs	r4, r1, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	18e4      	addlt	r4, r4, r3
 80089e4:	f000 f8e8 	bl	8008bb8 <__malloc_lock>
 80089e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <_free_r+0x90>)
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	b933      	cbnz	r3, 80089fc <_free_r+0x2c>
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	6014      	str	r4, [r2, #0]
 80089f2:	4628      	mov	r0, r5
 80089f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f8:	f000 b8e4 	b.w	8008bc4 <__malloc_unlock>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d908      	bls.n	8008a12 <_free_r+0x42>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	1821      	adds	r1, r4, r0
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf01      	itttt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	1809      	addeq	r1, r1, r0
 8008a0e:	6021      	streq	r1, [r4, #0]
 8008a10:	e7ed      	b.n	80089ee <_free_r+0x1e>
 8008a12:	461a      	mov	r2, r3
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b10b      	cbz	r3, 8008a1c <_free_r+0x4c>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d9fa      	bls.n	8008a12 <_free_r+0x42>
 8008a1c:	6811      	ldr	r1, [r2, #0]
 8008a1e:	1850      	adds	r0, r2, r1
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d10b      	bne.n	8008a3c <_free_r+0x6c>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	4401      	add	r1, r0
 8008a28:	1850      	adds	r0, r2, r1
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	d1e0      	bne.n	80089f2 <_free_r+0x22>
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	6053      	str	r3, [r2, #4]
 8008a36:	4408      	add	r0, r1
 8008a38:	6010      	str	r0, [r2, #0]
 8008a3a:	e7da      	b.n	80089f2 <_free_r+0x22>
 8008a3c:	d902      	bls.n	8008a44 <_free_r+0x74>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	e7d6      	b.n	80089f2 <_free_r+0x22>
 8008a44:	6820      	ldr	r0, [r4, #0]
 8008a46:	1821      	adds	r1, r4, r0
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf04      	itt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	bf04      	itt	eq
 8008a54:	1809      	addeq	r1, r1, r0
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	6054      	str	r4, [r2, #4]
 8008a5a:	e7ca      	b.n	80089f2 <_free_r+0x22>
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000a04 	.word	0x20000a04

08008a64 <malloc>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	@ (8008a70 <malloc+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f000 b825 	b.w	8008ab8 <_malloc_r>
 8008a6e:	bf00      	nop
 8008a70:	20000020 	.word	0x20000020

08008a74 <sbrk_aligned>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4e0f      	ldr	r6, [pc, #60]	@ (8008ab4 <sbrk_aligned+0x40>)
 8008a78:	460c      	mov	r4, r1
 8008a7a:	6831      	ldr	r1, [r6, #0]
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	b911      	cbnz	r1, 8008a86 <sbrk_aligned+0x12>
 8008a80:	f001 fe0c 	bl	800a69c <_sbrk_r>
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f001 fe07 	bl	800a69c <_sbrk_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d103      	bne.n	8008a9a <sbrk_aligned+0x26>
 8008a92:	f04f 34ff 	mov.w	r4, #4294967295
 8008a96:	4620      	mov	r0, r4
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
 8008a9a:	1cc4      	adds	r4, r0, #3
 8008a9c:	f024 0403 	bic.w	r4, r4, #3
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d0f8      	beq.n	8008a96 <sbrk_aligned+0x22>
 8008aa4:	1a21      	subs	r1, r4, r0
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f001 fdf8 	bl	800a69c <_sbrk_r>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d1f2      	bne.n	8008a96 <sbrk_aligned+0x22>
 8008ab0:	e7ef      	b.n	8008a92 <sbrk_aligned+0x1e>
 8008ab2:	bf00      	nop
 8008ab4:	20000a00 	.word	0x20000a00

08008ab8 <_malloc_r>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	1ccd      	adds	r5, r1, #3
 8008abe:	f025 0503 	bic.w	r5, r5, #3
 8008ac2:	3508      	adds	r5, #8
 8008ac4:	2d0c      	cmp	r5, #12
 8008ac6:	bf38      	it	cc
 8008ac8:	250c      	movcc	r5, #12
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	4606      	mov	r6, r0
 8008ace:	db01      	blt.n	8008ad4 <_malloc_r+0x1c>
 8008ad0:	42a9      	cmp	r1, r5
 8008ad2:	d904      	bls.n	8008ade <_malloc_r+0x26>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	6033      	str	r3, [r6, #0]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bb4 <_malloc_r+0xfc>
 8008ae2:	f000 f869 	bl	8008bb8 <__malloc_lock>
 8008ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aea:	461c      	mov	r4, r3
 8008aec:	bb44      	cbnz	r4, 8008b40 <_malloc_r+0x88>
 8008aee:	4629      	mov	r1, r5
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff ffbf 	bl	8008a74 <sbrk_aligned>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	4604      	mov	r4, r0
 8008afa:	d158      	bne.n	8008bae <_malloc_r+0xf6>
 8008afc:	f8d8 4000 	ldr.w	r4, [r8]
 8008b00:	4627      	mov	r7, r4
 8008b02:	2f00      	cmp	r7, #0
 8008b04:	d143      	bne.n	8008b8e <_malloc_r+0xd6>
 8008b06:	2c00      	cmp	r4, #0
 8008b08:	d04b      	beq.n	8008ba2 <_malloc_r+0xea>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	4630      	mov	r0, r6
 8008b10:	eb04 0903 	add.w	r9, r4, r3
 8008b14:	f001 fdc2 	bl	800a69c <_sbrk_r>
 8008b18:	4581      	cmp	r9, r0
 8008b1a:	d142      	bne.n	8008ba2 <_malloc_r+0xea>
 8008b1c:	6821      	ldr	r1, [r4, #0]
 8008b1e:	1a6d      	subs	r5, r5, r1
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ffa6 	bl	8008a74 <sbrk_aligned>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d03a      	beq.n	8008ba2 <_malloc_r+0xea>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	442b      	add	r3, r5
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	f8d8 3000 	ldr.w	r3, [r8]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	bb62      	cbnz	r2, 8008b94 <_malloc_r+0xdc>
 8008b3a:	f8c8 7000 	str.w	r7, [r8]
 8008b3e:	e00f      	b.n	8008b60 <_malloc_r+0xa8>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	1b52      	subs	r2, r2, r5
 8008b44:	d420      	bmi.n	8008b88 <_malloc_r+0xd0>
 8008b46:	2a0b      	cmp	r2, #11
 8008b48:	d917      	bls.n	8008b7a <_malloc_r+0xc2>
 8008b4a:	1961      	adds	r1, r4, r5
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	6025      	str	r5, [r4, #0]
 8008b50:	bf18      	it	ne
 8008b52:	6059      	strne	r1, [r3, #4]
 8008b54:	6863      	ldr	r3, [r4, #4]
 8008b56:	bf08      	it	eq
 8008b58:	f8c8 1000 	streq.w	r1, [r8]
 8008b5c:	5162      	str	r2, [r4, r5]
 8008b5e:	604b      	str	r3, [r1, #4]
 8008b60:	4630      	mov	r0, r6
 8008b62:	f000 f82f 	bl	8008bc4 <__malloc_unlock>
 8008b66:	f104 000b 	add.w	r0, r4, #11
 8008b6a:	1d23      	adds	r3, r4, #4
 8008b6c:	f020 0007 	bic.w	r0, r0, #7
 8008b70:	1ac2      	subs	r2, r0, r3
 8008b72:	bf1c      	itt	ne
 8008b74:	1a1b      	subne	r3, r3, r0
 8008b76:	50a3      	strne	r3, [r4, r2]
 8008b78:	e7af      	b.n	8008ada <_malloc_r+0x22>
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	bf0c      	ite	eq
 8008b80:	f8c8 2000 	streq.w	r2, [r8]
 8008b84:	605a      	strne	r2, [r3, #4]
 8008b86:	e7eb      	b.n	8008b60 <_malloc_r+0xa8>
 8008b88:	4623      	mov	r3, r4
 8008b8a:	6864      	ldr	r4, [r4, #4]
 8008b8c:	e7ae      	b.n	8008aec <_malloc_r+0x34>
 8008b8e:	463c      	mov	r4, r7
 8008b90:	687f      	ldr	r7, [r7, #4]
 8008b92:	e7b6      	b.n	8008b02 <_malloc_r+0x4a>
 8008b94:	461a      	mov	r2, r3
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	d1fb      	bne.n	8008b94 <_malloc_r+0xdc>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6053      	str	r3, [r2, #4]
 8008ba0:	e7de      	b.n	8008b60 <_malloc_r+0xa8>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	6033      	str	r3, [r6, #0]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 f80c 	bl	8008bc4 <__malloc_unlock>
 8008bac:	e794      	b.n	8008ad8 <_malloc_r+0x20>
 8008bae:	6005      	str	r5, [r0, #0]
 8008bb0:	e7d6      	b.n	8008b60 <_malloc_r+0xa8>
 8008bb2:	bf00      	nop
 8008bb4:	20000a04 	.word	0x20000a04

08008bb8 <__malloc_lock>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	@ (8008bc0 <__malloc_lock+0x8>)
 8008bba:	f7ff b8b4 	b.w	8007d26 <__retarget_lock_acquire_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	200009fc 	.word	0x200009fc

08008bc4 <__malloc_unlock>:
 8008bc4:	4801      	ldr	r0, [pc, #4]	@ (8008bcc <__malloc_unlock+0x8>)
 8008bc6:	f7ff b8af 	b.w	8007d28 <__retarget_lock_release_recursive>
 8008bca:	bf00      	nop
 8008bcc:	200009fc 	.word	0x200009fc

08008bd0 <_Balloc>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	69c6      	ldr	r6, [r0, #28]
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	460d      	mov	r5, r1
 8008bd8:	b976      	cbnz	r6, 8008bf8 <_Balloc+0x28>
 8008bda:	2010      	movs	r0, #16
 8008bdc:	f7ff ff42 	bl	8008a64 <malloc>
 8008be0:	4602      	mov	r2, r0
 8008be2:	61e0      	str	r0, [r4, #28]
 8008be4:	b920      	cbnz	r0, 8008bf0 <_Balloc+0x20>
 8008be6:	4b18      	ldr	r3, [pc, #96]	@ (8008c48 <_Balloc+0x78>)
 8008be8:	4818      	ldr	r0, [pc, #96]	@ (8008c4c <_Balloc+0x7c>)
 8008bea:	216b      	movs	r1, #107	@ 0x6b
 8008bec:	f001 fd7c 	bl	800a6e8 <__assert_func>
 8008bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf4:	6006      	str	r6, [r0, #0]
 8008bf6:	60c6      	str	r6, [r0, #12]
 8008bf8:	69e6      	ldr	r6, [r4, #28]
 8008bfa:	68f3      	ldr	r3, [r6, #12]
 8008bfc:	b183      	cbz	r3, 8008c20 <_Balloc+0x50>
 8008bfe:	69e3      	ldr	r3, [r4, #28]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c06:	b9b8      	cbnz	r0, 8008c38 <_Balloc+0x68>
 8008c08:	2101      	movs	r1, #1
 8008c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c0e:	1d72      	adds	r2, r6, #5
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	4620      	mov	r0, r4
 8008c14:	f001 fd86 	bl	800a724 <_calloc_r>
 8008c18:	b160      	cbz	r0, 8008c34 <_Balloc+0x64>
 8008c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c1e:	e00e      	b.n	8008c3e <_Balloc+0x6e>
 8008c20:	2221      	movs	r2, #33	@ 0x21
 8008c22:	2104      	movs	r1, #4
 8008c24:	4620      	mov	r0, r4
 8008c26:	f001 fd7d 	bl	800a724 <_calloc_r>
 8008c2a:	69e3      	ldr	r3, [r4, #28]
 8008c2c:	60f0      	str	r0, [r6, #12]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e4      	bne.n	8008bfe <_Balloc+0x2e>
 8008c34:	2000      	movs	r0, #0
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	6802      	ldr	r2, [r0, #0]
 8008c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c44:	e7f7      	b.n	8008c36 <_Balloc+0x66>
 8008c46:	bf00      	nop
 8008c48:	0800c212 	.word	0x0800c212
 8008c4c:	0800c292 	.word	0x0800c292

08008c50 <_Bfree>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	69c6      	ldr	r6, [r0, #28]
 8008c54:	4605      	mov	r5, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	b976      	cbnz	r6, 8008c78 <_Bfree+0x28>
 8008c5a:	2010      	movs	r0, #16
 8008c5c:	f7ff ff02 	bl	8008a64 <malloc>
 8008c60:	4602      	mov	r2, r0
 8008c62:	61e8      	str	r0, [r5, #28]
 8008c64:	b920      	cbnz	r0, 8008c70 <_Bfree+0x20>
 8008c66:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <_Bfree+0x3c>)
 8008c68:	4809      	ldr	r0, [pc, #36]	@ (8008c90 <_Bfree+0x40>)
 8008c6a:	218f      	movs	r1, #143	@ 0x8f
 8008c6c:	f001 fd3c 	bl	800a6e8 <__assert_func>
 8008c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c74:	6006      	str	r6, [r0, #0]
 8008c76:	60c6      	str	r6, [r0, #12]
 8008c78:	b13c      	cbz	r4, 8008c8a <_Bfree+0x3a>
 8008c7a:	69eb      	ldr	r3, [r5, #28]
 8008c7c:	6862      	ldr	r2, [r4, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c84:	6021      	str	r1, [r4, #0]
 8008c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	0800c212 	.word	0x0800c212
 8008c90:	0800c292 	.word	0x0800c292

08008c94 <__multadd>:
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	690d      	ldr	r5, [r1, #16]
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	461e      	mov	r6, r3
 8008ca0:	f101 0c14 	add.w	ip, r1, #20
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8008caa:	b299      	uxth	r1, r3
 8008cac:	fb02 6101 	mla	r1, r2, r1, r6
 8008cb0:	0c1e      	lsrs	r6, r3, #16
 8008cb2:	0c0b      	lsrs	r3, r1, #16
 8008cb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008cb8:	b289      	uxth	r1, r1
 8008cba:	3001      	adds	r0, #1
 8008cbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cc0:	4285      	cmp	r5, r0
 8008cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8008cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cca:	dcec      	bgt.n	8008ca6 <__multadd+0x12>
 8008ccc:	b30e      	cbz	r6, 8008d12 <__multadd+0x7e>
 8008cce:	68a3      	ldr	r3, [r4, #8]
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	dc19      	bgt.n	8008d08 <__multadd+0x74>
 8008cd4:	6861      	ldr	r1, [r4, #4]
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	3101      	adds	r1, #1
 8008cda:	f7ff ff79 	bl	8008bd0 <_Balloc>
 8008cde:	4680      	mov	r8, r0
 8008ce0:	b928      	cbnz	r0, 8008cee <__multadd+0x5a>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <__multadd+0x84>)
 8008ce6:	480d      	ldr	r0, [pc, #52]	@ (8008d1c <__multadd+0x88>)
 8008ce8:	21ba      	movs	r1, #186	@ 0xba
 8008cea:	f001 fcfd 	bl	800a6e8 <__assert_func>
 8008cee:	6922      	ldr	r2, [r4, #16]
 8008cf0:	3202      	adds	r2, #2
 8008cf2:	f104 010c 	add.w	r1, r4, #12
 8008cf6:	0092      	lsls	r2, r2, #2
 8008cf8:	300c      	adds	r0, #12
 8008cfa:	f001 fcdf 	bl	800a6bc <memcpy>
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ffa5 	bl	8008c50 <_Bfree>
 8008d06:	4644      	mov	r4, r8
 8008d08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	615e      	str	r6, [r3, #20]
 8008d10:	6125      	str	r5, [r4, #16]
 8008d12:	4620      	mov	r0, r4
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	0800c281 	.word	0x0800c281
 8008d1c:	0800c292 	.word	0x0800c292

08008d20 <__s2b>:
 8008d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	460c      	mov	r4, r1
 8008d26:	4615      	mov	r5, r2
 8008d28:	461f      	mov	r7, r3
 8008d2a:	2209      	movs	r2, #9
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	4606      	mov	r6, r0
 8008d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d34:	2100      	movs	r1, #0
 8008d36:	2201      	movs	r2, #1
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	db09      	blt.n	8008d50 <__s2b+0x30>
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff ff47 	bl	8008bd0 <_Balloc>
 8008d42:	b940      	cbnz	r0, 8008d56 <__s2b+0x36>
 8008d44:	4602      	mov	r2, r0
 8008d46:	4b19      	ldr	r3, [pc, #100]	@ (8008dac <__s2b+0x8c>)
 8008d48:	4819      	ldr	r0, [pc, #100]	@ (8008db0 <__s2b+0x90>)
 8008d4a:	21d3      	movs	r1, #211	@ 0xd3
 8008d4c:	f001 fccc 	bl	800a6e8 <__assert_func>
 8008d50:	0052      	lsls	r2, r2, #1
 8008d52:	3101      	adds	r1, #1
 8008d54:	e7f0      	b.n	8008d38 <__s2b+0x18>
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	6143      	str	r3, [r0, #20]
 8008d5a:	2d09      	cmp	r5, #9
 8008d5c:	f04f 0301 	mov.w	r3, #1
 8008d60:	6103      	str	r3, [r0, #16]
 8008d62:	dd16      	ble.n	8008d92 <__s2b+0x72>
 8008d64:	f104 0909 	add.w	r9, r4, #9
 8008d68:	46c8      	mov	r8, r9
 8008d6a:	442c      	add	r4, r5
 8008d6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d70:	4601      	mov	r1, r0
 8008d72:	3b30      	subs	r3, #48	@ 0x30
 8008d74:	220a      	movs	r2, #10
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ff8c 	bl	8008c94 <__multadd>
 8008d7c:	45a0      	cmp	r8, r4
 8008d7e:	d1f5      	bne.n	8008d6c <__s2b+0x4c>
 8008d80:	f1a5 0408 	sub.w	r4, r5, #8
 8008d84:	444c      	add	r4, r9
 8008d86:	1b2d      	subs	r5, r5, r4
 8008d88:	1963      	adds	r3, r4, r5
 8008d8a:	42bb      	cmp	r3, r7
 8008d8c:	db04      	blt.n	8008d98 <__s2b+0x78>
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d92:	340a      	adds	r4, #10
 8008d94:	2509      	movs	r5, #9
 8008d96:	e7f6      	b.n	8008d86 <__s2b+0x66>
 8008d98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	3b30      	subs	r3, #48	@ 0x30
 8008da0:	220a      	movs	r2, #10
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff ff76 	bl	8008c94 <__multadd>
 8008da8:	e7ee      	b.n	8008d88 <__s2b+0x68>
 8008daa:	bf00      	nop
 8008dac:	0800c281 	.word	0x0800c281
 8008db0:	0800c292 	.word	0x0800c292

08008db4 <__hi0bits>:
 8008db4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008db8:	4603      	mov	r3, r0
 8008dba:	bf36      	itet	cc
 8008dbc:	0403      	lslcc	r3, r0, #16
 8008dbe:	2000      	movcs	r0, #0
 8008dc0:	2010      	movcc	r0, #16
 8008dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dc6:	bf3c      	itt	cc
 8008dc8:	021b      	lslcc	r3, r3, #8
 8008dca:	3008      	addcc	r0, #8
 8008dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dd0:	bf3c      	itt	cc
 8008dd2:	011b      	lslcc	r3, r3, #4
 8008dd4:	3004      	addcc	r0, #4
 8008dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dda:	bf3c      	itt	cc
 8008ddc:	009b      	lslcc	r3, r3, #2
 8008dde:	3002      	addcc	r0, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db05      	blt.n	8008df0 <__hi0bits+0x3c>
 8008de4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008de8:	f100 0001 	add.w	r0, r0, #1
 8008dec:	bf08      	it	eq
 8008dee:	2020      	moveq	r0, #32
 8008df0:	4770      	bx	lr

08008df2 <__lo0bits>:
 8008df2:	6803      	ldr	r3, [r0, #0]
 8008df4:	4602      	mov	r2, r0
 8008df6:	f013 0007 	ands.w	r0, r3, #7
 8008dfa:	d00b      	beq.n	8008e14 <__lo0bits+0x22>
 8008dfc:	07d9      	lsls	r1, r3, #31
 8008dfe:	d421      	bmi.n	8008e44 <__lo0bits+0x52>
 8008e00:	0798      	lsls	r0, r3, #30
 8008e02:	bf49      	itett	mi
 8008e04:	085b      	lsrmi	r3, r3, #1
 8008e06:	089b      	lsrpl	r3, r3, #2
 8008e08:	2001      	movmi	r0, #1
 8008e0a:	6013      	strmi	r3, [r2, #0]
 8008e0c:	bf5c      	itt	pl
 8008e0e:	6013      	strpl	r3, [r2, #0]
 8008e10:	2002      	movpl	r0, #2
 8008e12:	4770      	bx	lr
 8008e14:	b299      	uxth	r1, r3
 8008e16:	b909      	cbnz	r1, 8008e1c <__lo0bits+0x2a>
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	b2d9      	uxtb	r1, r3
 8008e1e:	b909      	cbnz	r1, 8008e24 <__lo0bits+0x32>
 8008e20:	3008      	adds	r0, #8
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	0719      	lsls	r1, r3, #28
 8008e26:	bf04      	itt	eq
 8008e28:	091b      	lsreq	r3, r3, #4
 8008e2a:	3004      	addeq	r0, #4
 8008e2c:	0799      	lsls	r1, r3, #30
 8008e2e:	bf04      	itt	eq
 8008e30:	089b      	lsreq	r3, r3, #2
 8008e32:	3002      	addeq	r0, #2
 8008e34:	07d9      	lsls	r1, r3, #31
 8008e36:	d403      	bmi.n	8008e40 <__lo0bits+0x4e>
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	f100 0001 	add.w	r0, r0, #1
 8008e3e:	d003      	beq.n	8008e48 <__lo0bits+0x56>
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4770      	bx	lr
 8008e44:	2000      	movs	r0, #0
 8008e46:	4770      	bx	lr
 8008e48:	2020      	movs	r0, #32
 8008e4a:	4770      	bx	lr

08008e4c <__i2b>:
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	460c      	mov	r4, r1
 8008e50:	2101      	movs	r1, #1
 8008e52:	f7ff febd 	bl	8008bd0 <_Balloc>
 8008e56:	4602      	mov	r2, r0
 8008e58:	b928      	cbnz	r0, 8008e66 <__i2b+0x1a>
 8008e5a:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <__i2b+0x24>)
 8008e5c:	4805      	ldr	r0, [pc, #20]	@ (8008e74 <__i2b+0x28>)
 8008e5e:	f240 1145 	movw	r1, #325	@ 0x145
 8008e62:	f001 fc41 	bl	800a6e8 <__assert_func>
 8008e66:	2301      	movs	r3, #1
 8008e68:	6144      	str	r4, [r0, #20]
 8008e6a:	6103      	str	r3, [r0, #16]
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	0800c281 	.word	0x0800c281
 8008e74:	0800c292 	.word	0x0800c292

08008e78 <__multiply>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	690a      	ldr	r2, [r1, #16]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	bfa8      	it	ge
 8008e86:	4623      	movge	r3, r4
 8008e88:	460f      	mov	r7, r1
 8008e8a:	bfa4      	itt	ge
 8008e8c:	460c      	movge	r4, r1
 8008e8e:	461f      	movge	r7, r3
 8008e90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e98:	68a3      	ldr	r3, [r4, #8]
 8008e9a:	6861      	ldr	r1, [r4, #4]
 8008e9c:	eb0a 0609 	add.w	r6, sl, r9
 8008ea0:	42b3      	cmp	r3, r6
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	bfb8      	it	lt
 8008ea6:	3101      	addlt	r1, #1
 8008ea8:	f7ff fe92 	bl	8008bd0 <_Balloc>
 8008eac:	b930      	cbnz	r0, 8008ebc <__multiply+0x44>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	4b44      	ldr	r3, [pc, #272]	@ (8008fc4 <__multiply+0x14c>)
 8008eb2:	4845      	ldr	r0, [pc, #276]	@ (8008fc8 <__multiply+0x150>)
 8008eb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008eb8:	f001 fc16 	bl	800a6e8 <__assert_func>
 8008ebc:	f100 0514 	add.w	r5, r0, #20
 8008ec0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4543      	cmp	r3, r8
 8008eca:	d321      	bcc.n	8008f10 <__multiply+0x98>
 8008ecc:	f107 0114 	add.w	r1, r7, #20
 8008ed0:	f104 0214 	add.w	r2, r4, #20
 8008ed4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ed8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008edc:	9302      	str	r3, [sp, #8]
 8008ede:	1b13      	subs	r3, r2, r4
 8008ee0:	3b15      	subs	r3, #21
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	f104 0715 	add.w	r7, r4, #21
 8008eec:	42ba      	cmp	r2, r7
 8008eee:	bf38      	it	cc
 8008ef0:	2304      	movcc	r3, #4
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	9b02      	ldr	r3, [sp, #8]
 8008ef6:	9103      	str	r1, [sp, #12]
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	d80c      	bhi.n	8008f16 <__multiply+0x9e>
 8008efc:	2e00      	cmp	r6, #0
 8008efe:	dd03      	ble.n	8008f08 <__multiply+0x90>
 8008f00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d05b      	beq.n	8008fc0 <__multiply+0x148>
 8008f08:	6106      	str	r6, [r0, #16]
 8008f0a:	b005      	add	sp, #20
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	f843 2b04 	str.w	r2, [r3], #4
 8008f14:	e7d8      	b.n	8008ec8 <__multiply+0x50>
 8008f16:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f1a:	f1ba 0f00 	cmp.w	sl, #0
 8008f1e:	d024      	beq.n	8008f6a <__multiply+0xf2>
 8008f20:	f104 0e14 	add.w	lr, r4, #20
 8008f24:	46a9      	mov	r9, r5
 8008f26:	f04f 0c00 	mov.w	ip, #0
 8008f2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f2e:	f8d9 3000 	ldr.w	r3, [r9]
 8008f32:	fa1f fb87 	uxth.w	fp, r7
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f40:	f8d9 7000 	ldr.w	r7, [r9]
 8008f44:	4463      	add	r3, ip
 8008f46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f4a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f58:	4572      	cmp	r2, lr
 8008f5a:	f849 3b04 	str.w	r3, [r9], #4
 8008f5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f62:	d8e2      	bhi.n	8008f2a <__multiply+0xb2>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	f845 c003 	str.w	ip, [r5, r3]
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f70:	3104      	adds	r1, #4
 8008f72:	f1b9 0f00 	cmp.w	r9, #0
 8008f76:	d021      	beq.n	8008fbc <__multiply+0x144>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	f104 0c14 	add.w	ip, r4, #20
 8008f7e:	46ae      	mov	lr, r5
 8008f80:	f04f 0a00 	mov.w	sl, #0
 8008f84:	f8bc b000 	ldrh.w	fp, [ip]
 8008f88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f8c:	fb09 770b 	mla	r7, r9, fp, r7
 8008f90:	4457      	add	r7, sl
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f98:	f84e 3b04 	str.w	r3, [lr], #4
 8008f9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa4:	f8be 3000 	ldrh.w	r3, [lr]
 8008fa8:	fb09 330a 	mla	r3, r9, sl, r3
 8008fac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fb0:	4562      	cmp	r2, ip
 8008fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb6:	d8e5      	bhi.n	8008f84 <__multiply+0x10c>
 8008fb8:	9f01      	ldr	r7, [sp, #4]
 8008fba:	51eb      	str	r3, [r5, r7]
 8008fbc:	3504      	adds	r5, #4
 8008fbe:	e799      	b.n	8008ef4 <__multiply+0x7c>
 8008fc0:	3e01      	subs	r6, #1
 8008fc2:	e79b      	b.n	8008efc <__multiply+0x84>
 8008fc4:	0800c281 	.word	0x0800c281
 8008fc8:	0800c292 	.word	0x0800c292

08008fcc <__pow5mult>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	4615      	mov	r5, r2
 8008fd2:	f012 0203 	ands.w	r2, r2, #3
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	460e      	mov	r6, r1
 8008fda:	d007      	beq.n	8008fec <__pow5mult+0x20>
 8008fdc:	4c25      	ldr	r4, [pc, #148]	@ (8009074 <__pow5mult+0xa8>)
 8008fde:	3a01      	subs	r2, #1
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe6:	f7ff fe55 	bl	8008c94 <__multadd>
 8008fea:	4606      	mov	r6, r0
 8008fec:	10ad      	asrs	r5, r5, #2
 8008fee:	d03d      	beq.n	800906c <__pow5mult+0xa0>
 8008ff0:	69fc      	ldr	r4, [r7, #28]
 8008ff2:	b97c      	cbnz	r4, 8009014 <__pow5mult+0x48>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	f7ff fd35 	bl	8008a64 <malloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	61f8      	str	r0, [r7, #28]
 8008ffe:	b928      	cbnz	r0, 800900c <__pow5mult+0x40>
 8009000:	4b1d      	ldr	r3, [pc, #116]	@ (8009078 <__pow5mult+0xac>)
 8009002:	481e      	ldr	r0, [pc, #120]	@ (800907c <__pow5mult+0xb0>)
 8009004:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009008:	f001 fb6e 	bl	800a6e8 <__assert_func>
 800900c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009010:	6004      	str	r4, [r0, #0]
 8009012:	60c4      	str	r4, [r0, #12]
 8009014:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800901c:	b94c      	cbnz	r4, 8009032 <__pow5mult+0x66>
 800901e:	f240 2171 	movw	r1, #625	@ 0x271
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff ff12 	bl	8008e4c <__i2b>
 8009028:	2300      	movs	r3, #0
 800902a:	f8c8 0008 	str.w	r0, [r8, #8]
 800902e:	4604      	mov	r4, r0
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	f04f 0900 	mov.w	r9, #0
 8009036:	07eb      	lsls	r3, r5, #31
 8009038:	d50a      	bpl.n	8009050 <__pow5mult+0x84>
 800903a:	4631      	mov	r1, r6
 800903c:	4622      	mov	r2, r4
 800903e:	4638      	mov	r0, r7
 8009040:	f7ff ff1a 	bl	8008e78 <__multiply>
 8009044:	4631      	mov	r1, r6
 8009046:	4680      	mov	r8, r0
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff fe01 	bl	8008c50 <_Bfree>
 800904e:	4646      	mov	r6, r8
 8009050:	106d      	asrs	r5, r5, #1
 8009052:	d00b      	beq.n	800906c <__pow5mult+0xa0>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	b938      	cbnz	r0, 8009068 <__pow5mult+0x9c>
 8009058:	4622      	mov	r2, r4
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ff0b 	bl	8008e78 <__multiply>
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f8c0 9000 	str.w	r9, [r0]
 8009068:	4604      	mov	r4, r0
 800906a:	e7e4      	b.n	8009036 <__pow5mult+0x6a>
 800906c:	4630      	mov	r0, r6
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	bf00      	nop
 8009074:	0800c2ec 	.word	0x0800c2ec
 8009078:	0800c212 	.word	0x0800c212
 800907c:	0800c292 	.word	0x0800c292

08009080 <__lshift>:
 8009080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	6849      	ldr	r1, [r1, #4]
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	4607      	mov	r7, r0
 8009092:	4691      	mov	r9, r2
 8009094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009098:	f108 0601 	add.w	r6, r8, #1
 800909c:	42b3      	cmp	r3, r6
 800909e:	db0b      	blt.n	80090b8 <__lshift+0x38>
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff fd95 	bl	8008bd0 <_Balloc>
 80090a6:	4605      	mov	r5, r0
 80090a8:	b948      	cbnz	r0, 80090be <__lshift+0x3e>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4b28      	ldr	r3, [pc, #160]	@ (8009150 <__lshift+0xd0>)
 80090ae:	4829      	ldr	r0, [pc, #164]	@ (8009154 <__lshift+0xd4>)
 80090b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b4:	f001 fb18 	bl	800a6e8 <__assert_func>
 80090b8:	3101      	adds	r1, #1
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	e7ee      	b.n	800909c <__lshift+0x1c>
 80090be:	2300      	movs	r3, #0
 80090c0:	f100 0114 	add.w	r1, r0, #20
 80090c4:	f100 0210 	add.w	r2, r0, #16
 80090c8:	4618      	mov	r0, r3
 80090ca:	4553      	cmp	r3, sl
 80090cc:	db33      	blt.n	8009136 <__lshift+0xb6>
 80090ce:	6920      	ldr	r0, [r4, #16]
 80090d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d4:	f104 0314 	add.w	r3, r4, #20
 80090d8:	f019 091f 	ands.w	r9, r9, #31
 80090dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e4:	d02b      	beq.n	800913e <__lshift+0xbe>
 80090e6:	f1c9 0e20 	rsb	lr, r9, #32
 80090ea:	468a      	mov	sl, r1
 80090ec:	2200      	movs	r2, #0
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	fa00 f009 	lsl.w	r0, r0, r9
 80090f4:	4310      	orrs	r0, r2
 80090f6:	f84a 0b04 	str.w	r0, [sl], #4
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	459c      	cmp	ip, r3
 8009100:	fa22 f20e 	lsr.w	r2, r2, lr
 8009104:	d8f3      	bhi.n	80090ee <__lshift+0x6e>
 8009106:	ebac 0304 	sub.w	r3, ip, r4
 800910a:	3b15      	subs	r3, #21
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	3304      	adds	r3, #4
 8009112:	f104 0015 	add.w	r0, r4, #21
 8009116:	4584      	cmp	ip, r0
 8009118:	bf38      	it	cc
 800911a:	2304      	movcc	r3, #4
 800911c:	50ca      	str	r2, [r1, r3]
 800911e:	b10a      	cbz	r2, 8009124 <__lshift+0xa4>
 8009120:	f108 0602 	add.w	r6, r8, #2
 8009124:	3e01      	subs	r6, #1
 8009126:	4638      	mov	r0, r7
 8009128:	612e      	str	r6, [r5, #16]
 800912a:	4621      	mov	r1, r4
 800912c:	f7ff fd90 	bl	8008c50 <_Bfree>
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	f842 0f04 	str.w	r0, [r2, #4]!
 800913a:	3301      	adds	r3, #1
 800913c:	e7c5      	b.n	80090ca <__lshift+0x4a>
 800913e:	3904      	subs	r1, #4
 8009140:	f853 2b04 	ldr.w	r2, [r3], #4
 8009144:	f841 2f04 	str.w	r2, [r1, #4]!
 8009148:	459c      	cmp	ip, r3
 800914a:	d8f9      	bhi.n	8009140 <__lshift+0xc0>
 800914c:	e7ea      	b.n	8009124 <__lshift+0xa4>
 800914e:	bf00      	nop
 8009150:	0800c281 	.word	0x0800c281
 8009154:	0800c292 	.word	0x0800c292

08009158 <__mcmp>:
 8009158:	690a      	ldr	r2, [r1, #16]
 800915a:	4603      	mov	r3, r0
 800915c:	6900      	ldr	r0, [r0, #16]
 800915e:	1a80      	subs	r0, r0, r2
 8009160:	b530      	push	{r4, r5, lr}
 8009162:	d10e      	bne.n	8009182 <__mcmp+0x2a>
 8009164:	3314      	adds	r3, #20
 8009166:	3114      	adds	r1, #20
 8009168:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800916c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009178:	4295      	cmp	r5, r2
 800917a:	d003      	beq.n	8009184 <__mcmp+0x2c>
 800917c:	d205      	bcs.n	800918a <__mcmp+0x32>
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	bd30      	pop	{r4, r5, pc}
 8009184:	42a3      	cmp	r3, r4
 8009186:	d3f3      	bcc.n	8009170 <__mcmp+0x18>
 8009188:	e7fb      	b.n	8009182 <__mcmp+0x2a>
 800918a:	2001      	movs	r0, #1
 800918c:	e7f9      	b.n	8009182 <__mcmp+0x2a>
	...

08009190 <__mdiff>:
 8009190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	4689      	mov	r9, r1
 8009196:	4606      	mov	r6, r0
 8009198:	4611      	mov	r1, r2
 800919a:	4648      	mov	r0, r9
 800919c:	4614      	mov	r4, r2
 800919e:	f7ff ffdb 	bl	8009158 <__mcmp>
 80091a2:	1e05      	subs	r5, r0, #0
 80091a4:	d112      	bne.n	80091cc <__mdiff+0x3c>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff fd11 	bl	8008bd0 <_Balloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	b928      	cbnz	r0, 80091be <__mdiff+0x2e>
 80091b2:	4b3f      	ldr	r3, [pc, #252]	@ (80092b0 <__mdiff+0x120>)
 80091b4:	f240 2137 	movw	r1, #567	@ 0x237
 80091b8:	483e      	ldr	r0, [pc, #248]	@ (80092b4 <__mdiff+0x124>)
 80091ba:	f001 fa95 	bl	800a6e8 <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c4:	4610      	mov	r0, r2
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	bfbc      	itt	lt
 80091ce:	464b      	movlt	r3, r9
 80091d0:	46a1      	movlt	r9, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d8:	bfba      	itte	lt
 80091da:	461c      	movlt	r4, r3
 80091dc:	2501      	movlt	r5, #1
 80091de:	2500      	movge	r5, #0
 80091e0:	f7ff fcf6 	bl	8008bd0 <_Balloc>
 80091e4:	4602      	mov	r2, r0
 80091e6:	b918      	cbnz	r0, 80091f0 <__mdiff+0x60>
 80091e8:	4b31      	ldr	r3, [pc, #196]	@ (80092b0 <__mdiff+0x120>)
 80091ea:	f240 2145 	movw	r1, #581	@ 0x245
 80091ee:	e7e3      	b.n	80091b8 <__mdiff+0x28>
 80091f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f4:	6926      	ldr	r6, [r4, #16]
 80091f6:	60c5      	str	r5, [r0, #12]
 80091f8:	f109 0310 	add.w	r3, r9, #16
 80091fc:	f109 0514 	add.w	r5, r9, #20
 8009200:	f104 0e14 	add.w	lr, r4, #20
 8009204:	f100 0b14 	add.w	fp, r0, #20
 8009208:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800920c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	46d9      	mov	r9, fp
 8009214:	f04f 0c00 	mov.w	ip, #0
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800921e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	fa1f f38a 	uxth.w	r3, sl
 8009228:	4619      	mov	r1, r3
 800922a:	b283      	uxth	r3, r0
 800922c:	1acb      	subs	r3, r1, r3
 800922e:	0c00      	lsrs	r0, r0, #16
 8009230:	4463      	add	r3, ip
 8009232:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009236:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009240:	4576      	cmp	r6, lr
 8009242:	f849 3b04 	str.w	r3, [r9], #4
 8009246:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800924a:	d8e5      	bhi.n	8009218 <__mdiff+0x88>
 800924c:	1b33      	subs	r3, r6, r4
 800924e:	3b15      	subs	r3, #21
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	3415      	adds	r4, #21
 8009256:	3304      	adds	r3, #4
 8009258:	42a6      	cmp	r6, r4
 800925a:	bf38      	it	cc
 800925c:	2304      	movcc	r3, #4
 800925e:	441d      	add	r5, r3
 8009260:	445b      	add	r3, fp
 8009262:	461e      	mov	r6, r3
 8009264:	462c      	mov	r4, r5
 8009266:	4544      	cmp	r4, r8
 8009268:	d30e      	bcc.n	8009288 <__mdiff+0xf8>
 800926a:	f108 0103 	add.w	r1, r8, #3
 800926e:	1b49      	subs	r1, r1, r5
 8009270:	f021 0103 	bic.w	r1, r1, #3
 8009274:	3d03      	subs	r5, #3
 8009276:	45a8      	cmp	r8, r5
 8009278:	bf38      	it	cc
 800927a:	2100      	movcc	r1, #0
 800927c:	440b      	add	r3, r1
 800927e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009282:	b191      	cbz	r1, 80092aa <__mdiff+0x11a>
 8009284:	6117      	str	r7, [r2, #16]
 8009286:	e79d      	b.n	80091c4 <__mdiff+0x34>
 8009288:	f854 1b04 	ldr.w	r1, [r4], #4
 800928c:	46e6      	mov	lr, ip
 800928e:	0c08      	lsrs	r0, r1, #16
 8009290:	fa1c fc81 	uxtah	ip, ip, r1
 8009294:	4471      	add	r1, lr
 8009296:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800929a:	b289      	uxth	r1, r1
 800929c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092a0:	f846 1b04 	str.w	r1, [r6], #4
 80092a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a8:	e7dd      	b.n	8009266 <__mdiff+0xd6>
 80092aa:	3f01      	subs	r7, #1
 80092ac:	e7e7      	b.n	800927e <__mdiff+0xee>
 80092ae:	bf00      	nop
 80092b0:	0800c281 	.word	0x0800c281
 80092b4:	0800c292 	.word	0x0800c292

080092b8 <__ulp>:
 80092b8:	b082      	sub	sp, #8
 80092ba:	ed8d 0b00 	vstr	d0, [sp]
 80092be:	9a01      	ldr	r2, [sp, #4]
 80092c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009300 <__ulp+0x48>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc08      	bgt.n	80092de <__ulp+0x26>
 80092cc:	425b      	negs	r3, r3
 80092ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092d6:	da04      	bge.n	80092e2 <__ulp+0x2a>
 80092d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092dc:	4113      	asrs	r3, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	e008      	b.n	80092f4 <__ulp+0x3c>
 80092e2:	f1a2 0314 	sub.w	r3, r2, #20
 80092e6:	2b1e      	cmp	r3, #30
 80092e8:	bfda      	itte	le
 80092ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092ee:	40da      	lsrle	r2, r3
 80092f0:	2201      	movgt	r2, #1
 80092f2:	2300      	movs	r3, #0
 80092f4:	4619      	mov	r1, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	ec41 0b10 	vmov	d0, r0, r1
 80092fc:	b002      	add	sp, #8
 80092fe:	4770      	bx	lr
 8009300:	7ff00000 	.word	0x7ff00000

08009304 <__b2d>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	6906      	ldr	r6, [r0, #16]
 800930a:	f100 0814 	add.w	r8, r0, #20
 800930e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009312:	1f37      	subs	r7, r6, #4
 8009314:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009318:	4610      	mov	r0, r2
 800931a:	f7ff fd4b 	bl	8008db4 <__hi0bits>
 800931e:	f1c0 0320 	rsb	r3, r0, #32
 8009322:	280a      	cmp	r0, #10
 8009324:	600b      	str	r3, [r1, #0]
 8009326:	491b      	ldr	r1, [pc, #108]	@ (8009394 <__b2d+0x90>)
 8009328:	dc15      	bgt.n	8009356 <__b2d+0x52>
 800932a:	f1c0 0c0b 	rsb	ip, r0, #11
 800932e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009332:	45b8      	cmp	r8, r7
 8009334:	ea43 0501 	orr.w	r5, r3, r1
 8009338:	bf34      	ite	cc
 800933a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800933e:	2300      	movcs	r3, #0
 8009340:	3015      	adds	r0, #21
 8009342:	fa02 f000 	lsl.w	r0, r2, r0
 8009346:	fa23 f30c 	lsr.w	r3, r3, ip
 800934a:	4303      	orrs	r3, r0
 800934c:	461c      	mov	r4, r3
 800934e:	ec45 4b10 	vmov	d0, r4, r5
 8009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009356:	45b8      	cmp	r8, r7
 8009358:	bf3a      	itte	cc
 800935a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800935e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009362:	2300      	movcs	r3, #0
 8009364:	380b      	subs	r0, #11
 8009366:	d012      	beq.n	800938e <__b2d+0x8a>
 8009368:	f1c0 0120 	rsb	r1, r0, #32
 800936c:	fa23 f401 	lsr.w	r4, r3, r1
 8009370:	4082      	lsls	r2, r0
 8009372:	4322      	orrs	r2, r4
 8009374:	4547      	cmp	r7, r8
 8009376:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800937a:	bf8c      	ite	hi
 800937c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009380:	2200      	movls	r2, #0
 8009382:	4083      	lsls	r3, r0
 8009384:	40ca      	lsrs	r2, r1
 8009386:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800938a:	4313      	orrs	r3, r2
 800938c:	e7de      	b.n	800934c <__b2d+0x48>
 800938e:	ea42 0501 	orr.w	r5, r2, r1
 8009392:	e7db      	b.n	800934c <__b2d+0x48>
 8009394:	3ff00000 	.word	0x3ff00000

08009398 <__d2b>:
 8009398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800939c:	460f      	mov	r7, r1
 800939e:	2101      	movs	r1, #1
 80093a0:	ec59 8b10 	vmov	r8, r9, d0
 80093a4:	4616      	mov	r6, r2
 80093a6:	f7ff fc13 	bl	8008bd0 <_Balloc>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b930      	cbnz	r0, 80093bc <__d2b+0x24>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b23      	ldr	r3, [pc, #140]	@ (8009440 <__d2b+0xa8>)
 80093b2:	4824      	ldr	r0, [pc, #144]	@ (8009444 <__d2b+0xac>)
 80093b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80093b8:	f001 f996 	bl	800a6e8 <__assert_func>
 80093bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c4:	b10d      	cbz	r5, 80093ca <__d2b+0x32>
 80093c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	f1b8 0300 	subs.w	r3, r8, #0
 80093d0:	d023      	beq.n	800941a <__d2b+0x82>
 80093d2:	4668      	mov	r0, sp
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	f7ff fd0c 	bl	8008df2 <__lo0bits>
 80093da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093de:	b1d0      	cbz	r0, 8009416 <__d2b+0x7e>
 80093e0:	f1c0 0320 	rsb	r3, r0, #32
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	430b      	orrs	r3, r1
 80093ea:	40c2      	lsrs	r2, r0
 80093ec:	6163      	str	r3, [r4, #20]
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	61a3      	str	r3, [r4, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bf0c      	ite	eq
 80093f8:	2201      	moveq	r2, #1
 80093fa:	2202      	movne	r2, #2
 80093fc:	6122      	str	r2, [r4, #16]
 80093fe:	b1a5      	cbz	r5, 800942a <__d2b+0x92>
 8009400:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009404:	4405      	add	r5, r0
 8009406:	603d      	str	r5, [r7, #0]
 8009408:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800940c:	6030      	str	r0, [r6, #0]
 800940e:	4620      	mov	r0, r4
 8009410:	b003      	add	sp, #12
 8009412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009416:	6161      	str	r1, [r4, #20]
 8009418:	e7ea      	b.n	80093f0 <__d2b+0x58>
 800941a:	a801      	add	r0, sp, #4
 800941c:	f7ff fce9 	bl	8008df2 <__lo0bits>
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	6163      	str	r3, [r4, #20]
 8009424:	3020      	adds	r0, #32
 8009426:	2201      	movs	r2, #1
 8009428:	e7e8      	b.n	80093fc <__d2b+0x64>
 800942a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800942e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009432:	6038      	str	r0, [r7, #0]
 8009434:	6918      	ldr	r0, [r3, #16]
 8009436:	f7ff fcbd 	bl	8008db4 <__hi0bits>
 800943a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800943e:	e7e5      	b.n	800940c <__d2b+0x74>
 8009440:	0800c281 	.word	0x0800c281
 8009444:	0800c292 	.word	0x0800c292

08009448 <__ratio>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	b085      	sub	sp, #20
 800944e:	e9cd 1000 	strd	r1, r0, [sp]
 8009452:	a902      	add	r1, sp, #8
 8009454:	f7ff ff56 	bl	8009304 <__b2d>
 8009458:	9800      	ldr	r0, [sp, #0]
 800945a:	a903      	add	r1, sp, #12
 800945c:	ec55 4b10 	vmov	r4, r5, d0
 8009460:	f7ff ff50 	bl	8009304 <__b2d>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	6919      	ldr	r1, [r3, #16]
 8009468:	9b00      	ldr	r3, [sp, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	1ac9      	subs	r1, r1, r3
 800946e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	ec5b ab10 	vmov	sl, fp, d0
 8009478:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800947c:	2b00      	cmp	r3, #0
 800947e:	bfce      	itee	gt
 8009480:	462a      	movgt	r2, r5
 8009482:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009486:	465a      	movle	r2, fp
 8009488:	462f      	mov	r7, r5
 800948a:	46d9      	mov	r9, fp
 800948c:	bfcc      	ite	gt
 800948e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009492:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009496:	464b      	mov	r3, r9
 8009498:	4652      	mov	r2, sl
 800949a:	4620      	mov	r0, r4
 800949c:	4639      	mov	r1, r7
 800949e:	f7f7 f9d5 	bl	800084c <__aeabi_ddiv>
 80094a2:	ec41 0b10 	vmov	d0, r0, r1
 80094a6:	b005      	add	sp, #20
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094ac <__copybits>:
 80094ac:	3901      	subs	r1, #1
 80094ae:	b570      	push	{r4, r5, r6, lr}
 80094b0:	1149      	asrs	r1, r1, #5
 80094b2:	6914      	ldr	r4, [r2, #16]
 80094b4:	3101      	adds	r1, #1
 80094b6:	f102 0314 	add.w	r3, r2, #20
 80094ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094c2:	1f05      	subs	r5, r0, #4
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d30c      	bcc.n	80094e2 <__copybits+0x36>
 80094c8:	1aa3      	subs	r3, r4, r2
 80094ca:	3b11      	subs	r3, #17
 80094cc:	f023 0303 	bic.w	r3, r3, #3
 80094d0:	3211      	adds	r2, #17
 80094d2:	42a2      	cmp	r2, r4
 80094d4:	bf88      	it	hi
 80094d6:	2300      	movhi	r3, #0
 80094d8:	4418      	add	r0, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	4288      	cmp	r0, r1
 80094de:	d305      	bcc.n	80094ec <__copybits+0x40>
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80094e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80094ea:	e7eb      	b.n	80094c4 <__copybits+0x18>
 80094ec:	f840 3b04 	str.w	r3, [r0], #4
 80094f0:	e7f4      	b.n	80094dc <__copybits+0x30>

080094f2 <__any_on>:
 80094f2:	f100 0214 	add.w	r2, r0, #20
 80094f6:	6900      	ldr	r0, [r0, #16]
 80094f8:	114b      	asrs	r3, r1, #5
 80094fa:	4298      	cmp	r0, r3
 80094fc:	b510      	push	{r4, lr}
 80094fe:	db11      	blt.n	8009524 <__any_on+0x32>
 8009500:	dd0a      	ble.n	8009518 <__any_on+0x26>
 8009502:	f011 011f 	ands.w	r1, r1, #31
 8009506:	d007      	beq.n	8009518 <__any_on+0x26>
 8009508:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800950c:	fa24 f001 	lsr.w	r0, r4, r1
 8009510:	fa00 f101 	lsl.w	r1, r0, r1
 8009514:	428c      	cmp	r4, r1
 8009516:	d10b      	bne.n	8009530 <__any_on+0x3e>
 8009518:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800951c:	4293      	cmp	r3, r2
 800951e:	d803      	bhi.n	8009528 <__any_on+0x36>
 8009520:	2000      	movs	r0, #0
 8009522:	bd10      	pop	{r4, pc}
 8009524:	4603      	mov	r3, r0
 8009526:	e7f7      	b.n	8009518 <__any_on+0x26>
 8009528:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800952c:	2900      	cmp	r1, #0
 800952e:	d0f5      	beq.n	800951c <__any_on+0x2a>
 8009530:	2001      	movs	r0, #1
 8009532:	e7f6      	b.n	8009522 <__any_on+0x30>

08009534 <sulp>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	ec45 4b10 	vmov	d0, r4, r5
 800953e:	4616      	mov	r6, r2
 8009540:	f7ff feba 	bl	80092b8 <__ulp>
 8009544:	ec51 0b10 	vmov	r0, r1, d0
 8009548:	b17e      	cbz	r6, 800956a <sulp+0x36>
 800954a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800954e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009552:	2b00      	cmp	r3, #0
 8009554:	dd09      	ble.n	800956a <sulp+0x36>
 8009556:	051b      	lsls	r3, r3, #20
 8009558:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800955c:	2400      	movs	r4, #0
 800955e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009562:	4622      	mov	r2, r4
 8009564:	462b      	mov	r3, r5
 8009566:	f7f7 f847 	bl	80005f8 <__aeabi_dmul>
 800956a:	ec41 0b10 	vmov	d0, r0, r1
 800956e:	bd70      	pop	{r4, r5, r6, pc}

08009570 <_strtod_l>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	b09f      	sub	sp, #124	@ 0x7c
 8009576:	460c      	mov	r4, r1
 8009578:	9217      	str	r2, [sp, #92]	@ 0x5c
 800957a:	2200      	movs	r2, #0
 800957c:	921a      	str	r2, [sp, #104]	@ 0x68
 800957e:	9005      	str	r0, [sp, #20]
 8009580:	f04f 0a00 	mov.w	sl, #0
 8009584:	f04f 0b00 	mov.w	fp, #0
 8009588:	460a      	mov	r2, r1
 800958a:	9219      	str	r2, [sp, #100]	@ 0x64
 800958c:	7811      	ldrb	r1, [r2, #0]
 800958e:	292b      	cmp	r1, #43	@ 0x2b
 8009590:	d04a      	beq.n	8009628 <_strtod_l+0xb8>
 8009592:	d838      	bhi.n	8009606 <_strtod_l+0x96>
 8009594:	290d      	cmp	r1, #13
 8009596:	d832      	bhi.n	80095fe <_strtod_l+0x8e>
 8009598:	2908      	cmp	r1, #8
 800959a:	d832      	bhi.n	8009602 <_strtod_l+0x92>
 800959c:	2900      	cmp	r1, #0
 800959e:	d03b      	beq.n	8009618 <_strtod_l+0xa8>
 80095a0:	2200      	movs	r2, #0
 80095a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80095a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80095a6:	782a      	ldrb	r2, [r5, #0]
 80095a8:	2a30      	cmp	r2, #48	@ 0x30
 80095aa:	f040 80b3 	bne.w	8009714 <_strtod_l+0x1a4>
 80095ae:	786a      	ldrb	r2, [r5, #1]
 80095b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095b4:	2a58      	cmp	r2, #88	@ 0x58
 80095b6:	d16e      	bne.n	8009696 <_strtod_l+0x126>
 80095b8:	9302      	str	r3, [sp, #8]
 80095ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	ab1a      	add	r3, sp, #104	@ 0x68
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4a8e      	ldr	r2, [pc, #568]	@ (80097fc <_strtod_l+0x28c>)
 80095c4:	9805      	ldr	r0, [sp, #20]
 80095c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095c8:	a919      	add	r1, sp, #100	@ 0x64
 80095ca:	f001 f927 	bl	800a81c <__gethex>
 80095ce:	f010 060f 	ands.w	r6, r0, #15
 80095d2:	4604      	mov	r4, r0
 80095d4:	d005      	beq.n	80095e2 <_strtod_l+0x72>
 80095d6:	2e06      	cmp	r6, #6
 80095d8:	d128      	bne.n	800962c <_strtod_l+0xbc>
 80095da:	3501      	adds	r5, #1
 80095dc:	2300      	movs	r3, #0
 80095de:	9519      	str	r5, [sp, #100]	@ 0x64
 80095e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f040 858e 	bne.w	800a106 <_strtod_l+0xb96>
 80095ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ec:	b1cb      	cbz	r3, 8009622 <_strtod_l+0xb2>
 80095ee:	4652      	mov	r2, sl
 80095f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095f4:	ec43 2b10 	vmov	d0, r2, r3
 80095f8:	b01f      	add	sp, #124	@ 0x7c
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	2920      	cmp	r1, #32
 8009600:	d1ce      	bne.n	80095a0 <_strtod_l+0x30>
 8009602:	3201      	adds	r2, #1
 8009604:	e7c1      	b.n	800958a <_strtod_l+0x1a>
 8009606:	292d      	cmp	r1, #45	@ 0x2d
 8009608:	d1ca      	bne.n	80095a0 <_strtod_l+0x30>
 800960a:	2101      	movs	r1, #1
 800960c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800960e:	1c51      	adds	r1, r2, #1
 8009610:	9119      	str	r1, [sp, #100]	@ 0x64
 8009612:	7852      	ldrb	r2, [r2, #1]
 8009614:	2a00      	cmp	r2, #0
 8009616:	d1c5      	bne.n	80095a4 <_strtod_l+0x34>
 8009618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800961a:	9419      	str	r4, [sp, #100]	@ 0x64
 800961c:	2b00      	cmp	r3, #0
 800961e:	f040 8570 	bne.w	800a102 <_strtod_l+0xb92>
 8009622:	4652      	mov	r2, sl
 8009624:	465b      	mov	r3, fp
 8009626:	e7e5      	b.n	80095f4 <_strtod_l+0x84>
 8009628:	2100      	movs	r1, #0
 800962a:	e7ef      	b.n	800960c <_strtod_l+0x9c>
 800962c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800962e:	b13a      	cbz	r2, 8009640 <_strtod_l+0xd0>
 8009630:	2135      	movs	r1, #53	@ 0x35
 8009632:	a81c      	add	r0, sp, #112	@ 0x70
 8009634:	f7ff ff3a 	bl	80094ac <__copybits>
 8009638:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800963a:	9805      	ldr	r0, [sp, #20]
 800963c:	f7ff fb08 	bl	8008c50 <_Bfree>
 8009640:	3e01      	subs	r6, #1
 8009642:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009644:	2e04      	cmp	r6, #4
 8009646:	d806      	bhi.n	8009656 <_strtod_l+0xe6>
 8009648:	e8df f006 	tbb	[pc, r6]
 800964c:	201d0314 	.word	0x201d0314
 8009650:	14          	.byte	0x14
 8009651:	00          	.byte	0x00
 8009652:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009656:	05e1      	lsls	r1, r4, #23
 8009658:	bf48      	it	mi
 800965a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800965e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009662:	0d1b      	lsrs	r3, r3, #20
 8009664:	051b      	lsls	r3, r3, #20
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1bb      	bne.n	80095e2 <_strtod_l+0x72>
 800966a:	f7fe fb31 	bl	8007cd0 <__errno>
 800966e:	2322      	movs	r3, #34	@ 0x22
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	e7b6      	b.n	80095e2 <_strtod_l+0x72>
 8009674:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009678:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800967c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009680:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009684:	e7e7      	b.n	8009656 <_strtod_l+0xe6>
 8009686:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009804 <_strtod_l+0x294>
 800968a:	e7e4      	b.n	8009656 <_strtod_l+0xe6>
 800968c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009690:	f04f 3aff 	mov.w	sl, #4294967295
 8009694:	e7df      	b.n	8009656 <_strtod_l+0xe6>
 8009696:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	9219      	str	r2, [sp, #100]	@ 0x64
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	2b30      	cmp	r3, #48	@ 0x30
 80096a0:	d0f9      	beq.n	8009696 <_strtod_l+0x126>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d09d      	beq.n	80095e2 <_strtod_l+0x72>
 80096a6:	2301      	movs	r3, #1
 80096a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80096ae:	2300      	movs	r3, #0
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80096b4:	461f      	mov	r7, r3
 80096b6:	220a      	movs	r2, #10
 80096b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096ba:	7805      	ldrb	r5, [r0, #0]
 80096bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096c0:	b2d9      	uxtb	r1, r3
 80096c2:	2909      	cmp	r1, #9
 80096c4:	d928      	bls.n	8009718 <_strtod_l+0x1a8>
 80096c6:	494e      	ldr	r1, [pc, #312]	@ (8009800 <_strtod_l+0x290>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	f000 ffd5 	bl	800a678 <strncmp>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d032      	beq.n	8009738 <_strtod_l+0x1c8>
 80096d2:	2000      	movs	r0, #0
 80096d4:	462a      	mov	r2, r5
 80096d6:	4681      	mov	r9, r0
 80096d8:	463d      	mov	r5, r7
 80096da:	4603      	mov	r3, r0
 80096dc:	2a65      	cmp	r2, #101	@ 0x65
 80096de:	d001      	beq.n	80096e4 <_strtod_l+0x174>
 80096e0:	2a45      	cmp	r2, #69	@ 0x45
 80096e2:	d114      	bne.n	800970e <_strtod_l+0x19e>
 80096e4:	b91d      	cbnz	r5, 80096ee <_strtod_l+0x17e>
 80096e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e8:	4302      	orrs	r2, r0
 80096ea:	d095      	beq.n	8009618 <_strtod_l+0xa8>
 80096ec:	2500      	movs	r5, #0
 80096ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096f0:	1c62      	adds	r2, r4, #1
 80096f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80096f4:	7862      	ldrb	r2, [r4, #1]
 80096f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80096f8:	d077      	beq.n	80097ea <_strtod_l+0x27a>
 80096fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80096fc:	d07b      	beq.n	80097f6 <_strtod_l+0x286>
 80096fe:	f04f 0c00 	mov.w	ip, #0
 8009702:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009706:	2909      	cmp	r1, #9
 8009708:	f240 8082 	bls.w	8009810 <_strtod_l+0x2a0>
 800970c:	9419      	str	r4, [sp, #100]	@ 0x64
 800970e:	f04f 0800 	mov.w	r8, #0
 8009712:	e0a2      	b.n	800985a <_strtod_l+0x2ea>
 8009714:	2300      	movs	r3, #0
 8009716:	e7c7      	b.n	80096a8 <_strtod_l+0x138>
 8009718:	2f08      	cmp	r7, #8
 800971a:	bfd5      	itete	le
 800971c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800971e:	9908      	ldrgt	r1, [sp, #32]
 8009720:	fb02 3301 	mlale	r3, r2, r1, r3
 8009724:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009728:	f100 0001 	add.w	r0, r0, #1
 800972c:	bfd4      	ite	le
 800972e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009730:	9308      	strgt	r3, [sp, #32]
 8009732:	3701      	adds	r7, #1
 8009734:	9019      	str	r0, [sp, #100]	@ 0x64
 8009736:	e7bf      	b.n	80096b8 <_strtod_l+0x148>
 8009738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	9219      	str	r2, [sp, #100]	@ 0x64
 800973e:	785a      	ldrb	r2, [r3, #1]
 8009740:	b37f      	cbz	r7, 80097a2 <_strtod_l+0x232>
 8009742:	4681      	mov	r9, r0
 8009744:	463d      	mov	r5, r7
 8009746:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800974a:	2b09      	cmp	r3, #9
 800974c:	d912      	bls.n	8009774 <_strtod_l+0x204>
 800974e:	2301      	movs	r3, #1
 8009750:	e7c4      	b.n	80096dc <_strtod_l+0x16c>
 8009752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	9219      	str	r2, [sp, #100]	@ 0x64
 8009758:	785a      	ldrb	r2, [r3, #1]
 800975a:	3001      	adds	r0, #1
 800975c:	2a30      	cmp	r2, #48	@ 0x30
 800975e:	d0f8      	beq.n	8009752 <_strtod_l+0x1e2>
 8009760:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009764:	2b08      	cmp	r3, #8
 8009766:	f200 84d3 	bhi.w	800a110 <_strtod_l+0xba0>
 800976a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800976c:	930c      	str	r3, [sp, #48]	@ 0x30
 800976e:	4681      	mov	r9, r0
 8009770:	2000      	movs	r0, #0
 8009772:	4605      	mov	r5, r0
 8009774:	3a30      	subs	r2, #48	@ 0x30
 8009776:	f100 0301 	add.w	r3, r0, #1
 800977a:	d02a      	beq.n	80097d2 <_strtod_l+0x262>
 800977c:	4499      	add	r9, r3
 800977e:	eb00 0c05 	add.w	ip, r0, r5
 8009782:	462b      	mov	r3, r5
 8009784:	210a      	movs	r1, #10
 8009786:	4563      	cmp	r3, ip
 8009788:	d10d      	bne.n	80097a6 <_strtod_l+0x236>
 800978a:	1c69      	adds	r1, r5, #1
 800978c:	4401      	add	r1, r0
 800978e:	4428      	add	r0, r5
 8009790:	2808      	cmp	r0, #8
 8009792:	dc16      	bgt.n	80097c2 <_strtod_l+0x252>
 8009794:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009796:	230a      	movs	r3, #10
 8009798:	fb03 2300 	mla	r3, r3, r0, r2
 800979c:	930a      	str	r3, [sp, #40]	@ 0x28
 800979e:	2300      	movs	r3, #0
 80097a0:	e018      	b.n	80097d4 <_strtod_l+0x264>
 80097a2:	4638      	mov	r0, r7
 80097a4:	e7da      	b.n	800975c <_strtod_l+0x1ec>
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	f103 0301 	add.w	r3, r3, #1
 80097ac:	dc03      	bgt.n	80097b6 <_strtod_l+0x246>
 80097ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80097b0:	434e      	muls	r6, r1
 80097b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80097b4:	e7e7      	b.n	8009786 <_strtod_l+0x216>
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	bfde      	ittt	le
 80097ba:	9e08      	ldrle	r6, [sp, #32]
 80097bc:	434e      	mulle	r6, r1
 80097be:	9608      	strle	r6, [sp, #32]
 80097c0:	e7e1      	b.n	8009786 <_strtod_l+0x216>
 80097c2:	280f      	cmp	r0, #15
 80097c4:	dceb      	bgt.n	800979e <_strtod_l+0x22e>
 80097c6:	9808      	ldr	r0, [sp, #32]
 80097c8:	230a      	movs	r3, #10
 80097ca:	fb03 2300 	mla	r3, r3, r0, r2
 80097ce:	9308      	str	r3, [sp, #32]
 80097d0:	e7e5      	b.n	800979e <_strtod_l+0x22e>
 80097d2:	4629      	mov	r1, r5
 80097d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097d6:	1c50      	adds	r0, r2, #1
 80097d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80097da:	7852      	ldrb	r2, [r2, #1]
 80097dc:	4618      	mov	r0, r3
 80097de:	460d      	mov	r5, r1
 80097e0:	e7b1      	b.n	8009746 <_strtod_l+0x1d6>
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	2301      	movs	r3, #1
 80097e8:	e77d      	b.n	80096e6 <_strtod_l+0x176>
 80097ea:	f04f 0c00 	mov.w	ip, #0
 80097ee:	1ca2      	adds	r2, r4, #2
 80097f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80097f2:	78a2      	ldrb	r2, [r4, #2]
 80097f4:	e785      	b.n	8009702 <_strtod_l+0x192>
 80097f6:	f04f 0c01 	mov.w	ip, #1
 80097fa:	e7f8      	b.n	80097ee <_strtod_l+0x27e>
 80097fc:	0800c400 	.word	0x0800c400
 8009800:	0800c3e8 	.word	0x0800c3e8
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800980a:	1c51      	adds	r1, r2, #1
 800980c:	9119      	str	r1, [sp, #100]	@ 0x64
 800980e:	7852      	ldrb	r2, [r2, #1]
 8009810:	2a30      	cmp	r2, #48	@ 0x30
 8009812:	d0f9      	beq.n	8009808 <_strtod_l+0x298>
 8009814:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009818:	2908      	cmp	r1, #8
 800981a:	f63f af78 	bhi.w	800970e <_strtod_l+0x19e>
 800981e:	3a30      	subs	r2, #48	@ 0x30
 8009820:	920e      	str	r2, [sp, #56]	@ 0x38
 8009822:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009824:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009826:	f04f 080a 	mov.w	r8, #10
 800982a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800982c:	1c56      	adds	r6, r2, #1
 800982e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009830:	7852      	ldrb	r2, [r2, #1]
 8009832:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009836:	f1be 0f09 	cmp.w	lr, #9
 800983a:	d939      	bls.n	80098b0 <_strtod_l+0x340>
 800983c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800983e:	1a76      	subs	r6, r6, r1
 8009840:	2e08      	cmp	r6, #8
 8009842:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009846:	dc03      	bgt.n	8009850 <_strtod_l+0x2e0>
 8009848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800984a:	4588      	cmp	r8, r1
 800984c:	bfa8      	it	ge
 800984e:	4688      	movge	r8, r1
 8009850:	f1bc 0f00 	cmp.w	ip, #0
 8009854:	d001      	beq.n	800985a <_strtod_l+0x2ea>
 8009856:	f1c8 0800 	rsb	r8, r8, #0
 800985a:	2d00      	cmp	r5, #0
 800985c:	d14e      	bne.n	80098fc <_strtod_l+0x38c>
 800985e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009860:	4308      	orrs	r0, r1
 8009862:	f47f aebe 	bne.w	80095e2 <_strtod_l+0x72>
 8009866:	2b00      	cmp	r3, #0
 8009868:	f47f aed6 	bne.w	8009618 <_strtod_l+0xa8>
 800986c:	2a69      	cmp	r2, #105	@ 0x69
 800986e:	d028      	beq.n	80098c2 <_strtod_l+0x352>
 8009870:	dc25      	bgt.n	80098be <_strtod_l+0x34e>
 8009872:	2a49      	cmp	r2, #73	@ 0x49
 8009874:	d025      	beq.n	80098c2 <_strtod_l+0x352>
 8009876:	2a4e      	cmp	r2, #78	@ 0x4e
 8009878:	f47f aece 	bne.w	8009618 <_strtod_l+0xa8>
 800987c:	499b      	ldr	r1, [pc, #620]	@ (8009aec <_strtod_l+0x57c>)
 800987e:	a819      	add	r0, sp, #100	@ 0x64
 8009880:	f001 f9ee 	bl	800ac60 <__match>
 8009884:	2800      	cmp	r0, #0
 8009886:	f43f aec7 	beq.w	8009618 <_strtod_l+0xa8>
 800988a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b28      	cmp	r3, #40	@ 0x28
 8009890:	d12e      	bne.n	80098f0 <_strtod_l+0x380>
 8009892:	4997      	ldr	r1, [pc, #604]	@ (8009af0 <_strtod_l+0x580>)
 8009894:	aa1c      	add	r2, sp, #112	@ 0x70
 8009896:	a819      	add	r0, sp, #100	@ 0x64
 8009898:	f001 f9f6 	bl	800ac88 <__hexnan>
 800989c:	2805      	cmp	r0, #5
 800989e:	d127      	bne.n	80098f0 <_strtod_l+0x380>
 80098a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80098a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80098aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098ae:	e698      	b.n	80095e2 <_strtod_l+0x72>
 80098b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80098b2:	fb08 2101 	mla	r1, r8, r1, r2
 80098b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80098bc:	e7b5      	b.n	800982a <_strtod_l+0x2ba>
 80098be:	2a6e      	cmp	r2, #110	@ 0x6e
 80098c0:	e7da      	b.n	8009878 <_strtod_l+0x308>
 80098c2:	498c      	ldr	r1, [pc, #560]	@ (8009af4 <_strtod_l+0x584>)
 80098c4:	a819      	add	r0, sp, #100	@ 0x64
 80098c6:	f001 f9cb 	bl	800ac60 <__match>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f43f aea4 	beq.w	8009618 <_strtod_l+0xa8>
 80098d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098d2:	4989      	ldr	r1, [pc, #548]	@ (8009af8 <_strtod_l+0x588>)
 80098d4:	3b01      	subs	r3, #1
 80098d6:	a819      	add	r0, sp, #100	@ 0x64
 80098d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80098da:	f001 f9c1 	bl	800ac60 <__match>
 80098de:	b910      	cbnz	r0, 80098e6 <_strtod_l+0x376>
 80098e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098e2:	3301      	adds	r3, #1
 80098e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80098e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009b08 <_strtod_l+0x598>
 80098ea:	f04f 0a00 	mov.w	sl, #0
 80098ee:	e678      	b.n	80095e2 <_strtod_l+0x72>
 80098f0:	4882      	ldr	r0, [pc, #520]	@ (8009afc <_strtod_l+0x58c>)
 80098f2:	f000 fef1 	bl	800a6d8 <nan>
 80098f6:	ec5b ab10 	vmov	sl, fp, d0
 80098fa:	e672      	b.n	80095e2 <_strtod_l+0x72>
 80098fc:	eba8 0309 	sub.w	r3, r8, r9
 8009900:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009902:	9309      	str	r3, [sp, #36]	@ 0x24
 8009904:	2f00      	cmp	r7, #0
 8009906:	bf08      	it	eq
 8009908:	462f      	moveq	r7, r5
 800990a:	2d10      	cmp	r5, #16
 800990c:	462c      	mov	r4, r5
 800990e:	bfa8      	it	ge
 8009910:	2410      	movge	r4, #16
 8009912:	f7f6 fdf7 	bl	8000504 <__aeabi_ui2d>
 8009916:	2d09      	cmp	r5, #9
 8009918:	4682      	mov	sl, r0
 800991a:	468b      	mov	fp, r1
 800991c:	dc13      	bgt.n	8009946 <_strtod_l+0x3d6>
 800991e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	f43f ae5e 	beq.w	80095e2 <_strtod_l+0x72>
 8009926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009928:	dd78      	ble.n	8009a1c <_strtod_l+0x4ac>
 800992a:	2b16      	cmp	r3, #22
 800992c:	dc5f      	bgt.n	80099ee <_strtod_l+0x47e>
 800992e:	4974      	ldr	r1, [pc, #464]	@ (8009b00 <_strtod_l+0x590>)
 8009930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009938:	4652      	mov	r2, sl
 800993a:	465b      	mov	r3, fp
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	4682      	mov	sl, r0
 8009942:	468b      	mov	fp, r1
 8009944:	e64d      	b.n	80095e2 <_strtod_l+0x72>
 8009946:	4b6e      	ldr	r3, [pc, #440]	@ (8009b00 <_strtod_l+0x590>)
 8009948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800994c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009950:	f7f6 fe52 	bl	80005f8 <__aeabi_dmul>
 8009954:	4682      	mov	sl, r0
 8009956:	9808      	ldr	r0, [sp, #32]
 8009958:	468b      	mov	fp, r1
 800995a:	f7f6 fdd3 	bl	8000504 <__aeabi_ui2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	f7f6 fc91 	bl	800028c <__adddf3>
 800996a:	2d0f      	cmp	r5, #15
 800996c:	4682      	mov	sl, r0
 800996e:	468b      	mov	fp, r1
 8009970:	ddd5      	ble.n	800991e <_strtod_l+0x3ae>
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	1b2c      	subs	r4, r5, r4
 8009976:	441c      	add	r4, r3
 8009978:	2c00      	cmp	r4, #0
 800997a:	f340 8096 	ble.w	8009aaa <_strtod_l+0x53a>
 800997e:	f014 030f 	ands.w	r3, r4, #15
 8009982:	d00a      	beq.n	800999a <_strtod_l+0x42a>
 8009984:	495e      	ldr	r1, [pc, #376]	@ (8009b00 <_strtod_l+0x590>)
 8009986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009992:	f7f6 fe31 	bl	80005f8 <__aeabi_dmul>
 8009996:	4682      	mov	sl, r0
 8009998:	468b      	mov	fp, r1
 800999a:	f034 040f 	bics.w	r4, r4, #15
 800999e:	d073      	beq.n	8009a88 <_strtod_l+0x518>
 80099a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80099a4:	dd48      	ble.n	8009a38 <_strtod_l+0x4c8>
 80099a6:	2400      	movs	r4, #0
 80099a8:	46a0      	mov	r8, r4
 80099aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80099ac:	46a1      	mov	r9, r4
 80099ae:	9a05      	ldr	r2, [sp, #20]
 80099b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009b08 <_strtod_l+0x598>
 80099b4:	2322      	movs	r3, #34	@ 0x22
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	f04f 0a00 	mov.w	sl, #0
 80099bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f43f ae0f 	beq.w	80095e2 <_strtod_l+0x72>
 80099c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099c6:	9805      	ldr	r0, [sp, #20]
 80099c8:	f7ff f942 	bl	8008c50 <_Bfree>
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7ff f93e 	bl	8008c50 <_Bfree>
 80099d4:	9805      	ldr	r0, [sp, #20]
 80099d6:	4641      	mov	r1, r8
 80099d8:	f7ff f93a 	bl	8008c50 <_Bfree>
 80099dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f7ff f936 	bl	8008c50 <_Bfree>
 80099e4:	9805      	ldr	r0, [sp, #20]
 80099e6:	4621      	mov	r1, r4
 80099e8:	f7ff f932 	bl	8008c50 <_Bfree>
 80099ec:	e5f9      	b.n	80095e2 <_strtod_l+0x72>
 80099ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099f4:	4293      	cmp	r3, r2
 80099f6:	dbbc      	blt.n	8009972 <_strtod_l+0x402>
 80099f8:	4c41      	ldr	r4, [pc, #260]	@ (8009b00 <_strtod_l+0x590>)
 80099fa:	f1c5 050f 	rsb	r5, r5, #15
 80099fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a0a:	f7f6 fdf5 	bl	80005f8 <__aeabi_dmul>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a10:	1b5d      	subs	r5, r3, r5
 8009a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a1a:	e78f      	b.n	800993c <_strtod_l+0x3cc>
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	dba8      	blt.n	8009972 <_strtod_l+0x402>
 8009a20:	4b37      	ldr	r3, [pc, #220]	@ (8009b00 <_strtod_l+0x590>)
 8009a22:	eba9 0808 	sub.w	r8, r9, r8
 8009a26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a2e:	4650      	mov	r0, sl
 8009a30:	4659      	mov	r1, fp
 8009a32:	f7f6 ff0b 	bl	800084c <__aeabi_ddiv>
 8009a36:	e783      	b.n	8009940 <_strtod_l+0x3d0>
 8009a38:	4b32      	ldr	r3, [pc, #200]	@ (8009b04 <_strtod_l+0x594>)
 8009a3a:	9308      	str	r3, [sp, #32]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	1124      	asrs	r4, r4, #4
 8009a40:	4650      	mov	r0, sl
 8009a42:	4659      	mov	r1, fp
 8009a44:	461e      	mov	r6, r3
 8009a46:	2c01      	cmp	r4, #1
 8009a48:	dc21      	bgt.n	8009a8e <_strtod_l+0x51e>
 8009a4a:	b10b      	cbz	r3, 8009a50 <_strtod_l+0x4e0>
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	468b      	mov	fp, r1
 8009a50:	492c      	ldr	r1, [pc, #176]	@ (8009b04 <_strtod_l+0x594>)
 8009a52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	4b28      	ldr	r3, [pc, #160]	@ (8009b08 <_strtod_l+0x598>)
 8009a68:	460a      	mov	r2, r1
 8009a6a:	400b      	ands	r3, r1
 8009a6c:	4927      	ldr	r1, [pc, #156]	@ (8009b0c <_strtod_l+0x59c>)
 8009a6e:	428b      	cmp	r3, r1
 8009a70:	4682      	mov	sl, r0
 8009a72:	d898      	bhi.n	80099a6 <_strtod_l+0x436>
 8009a74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a78:	428b      	cmp	r3, r1
 8009a7a:	bf86      	itte	hi
 8009a7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009b10 <_strtod_l+0x5a0>
 8009a80:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	e07a      	b.n	8009b84 <_strtod_l+0x614>
 8009a8e:	07e2      	lsls	r2, r4, #31
 8009a90:	d505      	bpl.n	8009a9e <_strtod_l+0x52e>
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fdae 	bl	80005f8 <__aeabi_dmul>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	9a08      	ldr	r2, [sp, #32]
 8009aa0:	3208      	adds	r2, #8
 8009aa2:	3601      	adds	r6, #1
 8009aa4:	1064      	asrs	r4, r4, #1
 8009aa6:	9208      	str	r2, [sp, #32]
 8009aa8:	e7cd      	b.n	8009a46 <_strtod_l+0x4d6>
 8009aaa:	d0ed      	beq.n	8009a88 <_strtod_l+0x518>
 8009aac:	4264      	negs	r4, r4
 8009aae:	f014 020f 	ands.w	r2, r4, #15
 8009ab2:	d00a      	beq.n	8009aca <_strtod_l+0x55a>
 8009ab4:	4b12      	ldr	r3, [pc, #72]	@ (8009b00 <_strtod_l+0x590>)
 8009ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aba:	4650      	mov	r0, sl
 8009abc:	4659      	mov	r1, fp
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fec3 	bl	800084c <__aeabi_ddiv>
 8009ac6:	4682      	mov	sl, r0
 8009ac8:	468b      	mov	fp, r1
 8009aca:	1124      	asrs	r4, r4, #4
 8009acc:	d0dc      	beq.n	8009a88 <_strtod_l+0x518>
 8009ace:	2c1f      	cmp	r4, #31
 8009ad0:	dd20      	ble.n	8009b14 <_strtod_l+0x5a4>
 8009ad2:	2400      	movs	r4, #0
 8009ad4:	46a0      	mov	r8, r4
 8009ad6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ad8:	46a1      	mov	r9, r4
 8009ada:	9a05      	ldr	r2, [sp, #20]
 8009adc:	2322      	movs	r3, #34	@ 0x22
 8009ade:	f04f 0a00 	mov.w	sl, #0
 8009ae2:	f04f 0b00 	mov.w	fp, #0
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	e768      	b.n	80099bc <_strtod_l+0x44c>
 8009aea:	bf00      	nop
 8009aec:	0800c1d9 	.word	0x0800c1d9
 8009af0:	0800c3ec 	.word	0x0800c3ec
 8009af4:	0800c1d1 	.word	0x0800c1d1
 8009af8:	0800c208 	.word	0x0800c208
 8009afc:	0800c595 	.word	0x0800c595
 8009b00:	0800c320 	.word	0x0800c320
 8009b04:	0800c2f8 	.word	0x0800c2f8
 8009b08:	7ff00000 	.word	0x7ff00000
 8009b0c:	7ca00000 	.word	0x7ca00000
 8009b10:	7fefffff 	.word	0x7fefffff
 8009b14:	f014 0310 	ands.w	r3, r4, #16
 8009b18:	bf18      	it	ne
 8009b1a:	236a      	movne	r3, #106	@ 0x6a
 8009b1c:	4ea9      	ldr	r6, [pc, #676]	@ (8009dc4 <_strtod_l+0x854>)
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	4650      	mov	r0, sl
 8009b22:	4659      	mov	r1, fp
 8009b24:	2300      	movs	r3, #0
 8009b26:	07e2      	lsls	r2, r4, #31
 8009b28:	d504      	bpl.n	8009b34 <_strtod_l+0x5c4>
 8009b2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	2301      	movs	r3, #1
 8009b34:	1064      	asrs	r4, r4, #1
 8009b36:	f106 0608 	add.w	r6, r6, #8
 8009b3a:	d1f4      	bne.n	8009b26 <_strtod_l+0x5b6>
 8009b3c:	b10b      	cbz	r3, 8009b42 <_strtod_l+0x5d2>
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	b1b3      	cbz	r3, 8009b74 <_strtod_l+0x604>
 8009b46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	4659      	mov	r1, fp
 8009b52:	dd0f      	ble.n	8009b74 <_strtod_l+0x604>
 8009b54:	2b1f      	cmp	r3, #31
 8009b56:	dd55      	ble.n	8009c04 <_strtod_l+0x694>
 8009b58:	2b34      	cmp	r3, #52	@ 0x34
 8009b5a:	bfde      	ittt	le
 8009b5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009b60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b64:	4093      	lslle	r3, r2
 8009b66:	f04f 0a00 	mov.w	sl, #0
 8009b6a:	bfcc      	ite	gt
 8009b6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b70:	ea03 0b01 	andle.w	fp, r3, r1
 8009b74:	2200      	movs	r2, #0
 8009b76:	2300      	movs	r3, #0
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	f7f6 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1a6      	bne.n	8009ad2 <_strtod_l+0x562>
 8009b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b8a:	9805      	ldr	r0, [sp, #20]
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	463a      	mov	r2, r7
 8009b90:	f7ff f8c6 	bl	8008d20 <__s2b>
 8009b94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f af05 	beq.w	80099a6 <_strtod_l+0x436>
 8009b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	eba9 0308 	sub.w	r3, r9, r8
 8009ba4:	bfa8      	it	ge
 8009ba6:	2300      	movge	r3, #0
 8009ba8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009baa:	2400      	movs	r4, #0
 8009bac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009bb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009bb2:	46a0      	mov	r8, r4
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bb6:	9805      	ldr	r0, [sp, #20]
 8009bb8:	6859      	ldr	r1, [r3, #4]
 8009bba:	f7ff f809 	bl	8008bd0 <_Balloc>
 8009bbe:	4681      	mov	r9, r0
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f aef4 	beq.w	80099ae <_strtod_l+0x43e>
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	3202      	adds	r2, #2
 8009bcc:	f103 010c 	add.w	r1, r3, #12
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	300c      	adds	r0, #12
 8009bd4:	f000 fd72 	bl	800a6bc <memcpy>
 8009bd8:	ec4b ab10 	vmov	d0, sl, fp
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	aa1c      	add	r2, sp, #112	@ 0x70
 8009be0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009be2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009be6:	f7ff fbd7 	bl	8009398 <__d2b>
 8009bea:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bec:	2800      	cmp	r0, #0
 8009bee:	f43f aede 	beq.w	80099ae <_strtod_l+0x43e>
 8009bf2:	9805      	ldr	r0, [sp, #20]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	f7ff f929 	bl	8008e4c <__i2b>
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	b948      	cbnz	r0, 8009c12 <_strtod_l+0x6a2>
 8009bfe:	f04f 0800 	mov.w	r8, #0
 8009c02:	e6d4      	b.n	80099ae <_strtod_l+0x43e>
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295
 8009c08:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0c:	ea03 0a0a 	and.w	sl, r3, sl
 8009c10:	e7b0      	b.n	8009b74 <_strtod_l+0x604>
 8009c12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	bfab      	itete	ge
 8009c1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c22:	bfac      	ite	ge
 8009c24:	18ef      	addge	r7, r5, r3
 8009c26:	1b5e      	sublt	r6, r3, r5
 8009c28:	9b08      	ldr	r3, [sp, #32]
 8009c2a:	1aed      	subs	r5, r5, r3
 8009c2c:	4415      	add	r5, r2
 8009c2e:	4b66      	ldr	r3, [pc, #408]	@ (8009dc8 <_strtod_l+0x858>)
 8009c30:	3d01      	subs	r5, #1
 8009c32:	429d      	cmp	r5, r3
 8009c34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c38:	da50      	bge.n	8009cdc <_strtod_l+0x76c>
 8009c3a:	1b5b      	subs	r3, r3, r5
 8009c3c:	2b1f      	cmp	r3, #31
 8009c3e:	eba2 0203 	sub.w	r2, r2, r3
 8009c42:	f04f 0101 	mov.w	r1, #1
 8009c46:	dc3d      	bgt.n	8009cc4 <_strtod_l+0x754>
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c52:	18bd      	adds	r5, r7, r2
 8009c54:	9b08      	ldr	r3, [sp, #32]
 8009c56:	42af      	cmp	r7, r5
 8009c58:	4416      	add	r6, r2
 8009c5a:	441e      	add	r6, r3
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	bfa8      	it	ge
 8009c60:	462b      	movge	r3, r5
 8009c62:	42b3      	cmp	r3, r6
 8009c64:	bfa8      	it	ge
 8009c66:	4633      	movge	r3, r6
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfc2      	ittt	gt
 8009c6c:	1aed      	subgt	r5, r5, r3
 8009c6e:	1af6      	subgt	r6, r6, r3
 8009c70:	1aff      	subgt	r7, r7, r3
 8009c72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd16      	ble.n	8009ca6 <_strtod_l+0x736>
 8009c78:	4641      	mov	r1, r8
 8009c7a:	9805      	ldr	r0, [sp, #20]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f7ff f9a5 	bl	8008fcc <__pow5mult>
 8009c82:	4680      	mov	r8, r0
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0ba      	beq.n	8009bfe <_strtod_l+0x68e>
 8009c88:	4601      	mov	r1, r0
 8009c8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c8c:	9805      	ldr	r0, [sp, #20]
 8009c8e:	f7ff f8f3 	bl	8008e78 <__multiply>
 8009c92:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c94:	2800      	cmp	r0, #0
 8009c96:	f43f ae8a 	beq.w	80099ae <_strtod_l+0x43e>
 8009c9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c9c:	9805      	ldr	r0, [sp, #20]
 8009c9e:	f7fe ffd7 	bl	8008c50 <_Bfree>
 8009ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	dc1d      	bgt.n	8009ce6 <_strtod_l+0x776>
 8009caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd23      	ble.n	8009cf8 <_strtod_l+0x788>
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cb4:	9805      	ldr	r0, [sp, #20]
 8009cb6:	f7ff f989 	bl	8008fcc <__pow5mult>
 8009cba:	4681      	mov	r9, r0
 8009cbc:	b9e0      	cbnz	r0, 8009cf8 <_strtod_l+0x788>
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	e674      	b.n	80099ae <_strtod_l+0x43e>
 8009cc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ccc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009cd0:	35e2      	adds	r5, #226	@ 0xe2
 8009cd2:	fa01 f305 	lsl.w	r3, r1, r5
 8009cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cda:	e7ba      	b.n	8009c52 <_strtod_l+0x6e2>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ce4:	e7b5      	b.n	8009c52 <_strtod_l+0x6e2>
 8009ce6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ce8:	9805      	ldr	r0, [sp, #20]
 8009cea:	462a      	mov	r2, r5
 8009cec:	f7ff f9c8 	bl	8009080 <__lshift>
 8009cf0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d1d9      	bne.n	8009caa <_strtod_l+0x73a>
 8009cf6:	e65a      	b.n	80099ae <_strtod_l+0x43e>
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	dd07      	ble.n	8009d0c <_strtod_l+0x79c>
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	9805      	ldr	r0, [sp, #20]
 8009d00:	4632      	mov	r2, r6
 8009d02:	f7ff f9bd 	bl	8009080 <__lshift>
 8009d06:	4681      	mov	r9, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d0d8      	beq.n	8009cbe <_strtod_l+0x74e>
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	dd08      	ble.n	8009d22 <_strtod_l+0x7b2>
 8009d10:	4641      	mov	r1, r8
 8009d12:	9805      	ldr	r0, [sp, #20]
 8009d14:	463a      	mov	r2, r7
 8009d16:	f7ff f9b3 	bl	8009080 <__lshift>
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f43f ae46 	beq.w	80099ae <_strtod_l+0x43e>
 8009d22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d24:	9805      	ldr	r0, [sp, #20]
 8009d26:	464a      	mov	r2, r9
 8009d28:	f7ff fa32 	bl	8009190 <__mdiff>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f ae3d 	beq.w	80099ae <_strtod_l+0x43e>
 8009d34:	68c3      	ldr	r3, [r0, #12]
 8009d36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60c3      	str	r3, [r0, #12]
 8009d3c:	4641      	mov	r1, r8
 8009d3e:	f7ff fa0b 	bl	8009158 <__mcmp>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	da46      	bge.n	8009dd4 <_strtod_l+0x864>
 8009d46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d48:	ea53 030a 	orrs.w	r3, r3, sl
 8009d4c:	d16c      	bne.n	8009e28 <_strtod_l+0x8b8>
 8009d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d168      	bne.n	8009e28 <_strtod_l+0x8b8>
 8009d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d5a:	0d1b      	lsrs	r3, r3, #20
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d62:	d961      	bls.n	8009e28 <_strtod_l+0x8b8>
 8009d64:	6963      	ldr	r3, [r4, #20]
 8009d66:	b913      	cbnz	r3, 8009d6e <_strtod_l+0x7fe>
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	dd5c      	ble.n	8009e28 <_strtod_l+0x8b8>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	2201      	movs	r2, #1
 8009d72:	9805      	ldr	r0, [sp, #20]
 8009d74:	f7ff f984 	bl	8009080 <__lshift>
 8009d78:	4641      	mov	r1, r8
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	f7ff f9ec 	bl	8009158 <__mcmp>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dd51      	ble.n	8009e28 <_strtod_l+0x8b8>
 8009d84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d88:	9a08      	ldr	r2, [sp, #32]
 8009d8a:	0d1b      	lsrs	r3, r3, #20
 8009d8c:	051b      	lsls	r3, r3, #20
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	d06b      	beq.n	8009e6a <_strtod_l+0x8fa>
 8009d92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d96:	d868      	bhi.n	8009e6a <_strtod_l+0x8fa>
 8009d98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d9c:	f67f ae9d 	bls.w	8009ada <_strtod_l+0x56a>
 8009da0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <_strtod_l+0x85c>)
 8009da2:	4650      	mov	r0, sl
 8009da4:	4659      	mov	r1, fp
 8009da6:	2200      	movs	r2, #0
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	4b08      	ldr	r3, [pc, #32]	@ (8009dd0 <_strtod_l+0x860>)
 8009dae:	400b      	ands	r3, r1
 8009db0:	4682      	mov	sl, r0
 8009db2:	468b      	mov	fp, r1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f47f ae05 	bne.w	80099c4 <_strtod_l+0x454>
 8009dba:	9a05      	ldr	r2, [sp, #20]
 8009dbc:	2322      	movs	r3, #34	@ 0x22
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e600      	b.n	80099c4 <_strtod_l+0x454>
 8009dc2:	bf00      	nop
 8009dc4:	0800c418 	.word	0x0800c418
 8009dc8:	fffffc02 	.word	0xfffffc02
 8009dcc:	39500000 	.word	0x39500000
 8009dd0:	7ff00000 	.word	0x7ff00000
 8009dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009dd8:	d165      	bne.n	8009ea6 <_strtod_l+0x936>
 8009dda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ddc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009de0:	b35a      	cbz	r2, 8009e3a <_strtod_l+0x8ca>
 8009de2:	4a9f      	ldr	r2, [pc, #636]	@ (800a060 <_strtod_l+0xaf0>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d12b      	bne.n	8009e40 <_strtod_l+0x8d0>
 8009de8:	9b08      	ldr	r3, [sp, #32]
 8009dea:	4651      	mov	r1, sl
 8009dec:	b303      	cbz	r3, 8009e30 <_strtod_l+0x8c0>
 8009dee:	4b9d      	ldr	r3, [pc, #628]	@ (800a064 <_strtod_l+0xaf4>)
 8009df0:	465a      	mov	r2, fp
 8009df2:	4013      	ands	r3, r2
 8009df4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009df8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfc:	d81b      	bhi.n	8009e36 <_strtod_l+0x8c6>
 8009dfe:	0d1b      	lsrs	r3, r3, #20
 8009e00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e04:	fa02 f303 	lsl.w	r3, r2, r3
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d119      	bne.n	8009e40 <_strtod_l+0x8d0>
 8009e0c:	4b96      	ldr	r3, [pc, #600]	@ (800a068 <_strtod_l+0xaf8>)
 8009e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d102      	bne.n	8009e1a <_strtod_l+0x8aa>
 8009e14:	3101      	adds	r1, #1
 8009e16:	f43f adca 	beq.w	80099ae <_strtod_l+0x43e>
 8009e1a:	4b92      	ldr	r3, [pc, #584]	@ (800a064 <_strtod_l+0xaf4>)
 8009e1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e1e:	401a      	ands	r2, r3
 8009e20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e24:	f04f 0a00 	mov.w	sl, #0
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1b8      	bne.n	8009da0 <_strtod_l+0x830>
 8009e2e:	e5c9      	b.n	80099c4 <_strtod_l+0x454>
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	e7e8      	b.n	8009e08 <_strtod_l+0x898>
 8009e36:	4613      	mov	r3, r2
 8009e38:	e7e6      	b.n	8009e08 <_strtod_l+0x898>
 8009e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8009e3e:	d0a1      	beq.n	8009d84 <_strtod_l+0x814>
 8009e40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e42:	b1db      	cbz	r3, 8009e7c <_strtod_l+0x90c>
 8009e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e46:	4213      	tst	r3, r2
 8009e48:	d0ee      	beq.n	8009e28 <_strtod_l+0x8b8>
 8009e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	4650      	mov	r0, sl
 8009e50:	4659      	mov	r1, fp
 8009e52:	b1bb      	cbz	r3, 8009e84 <_strtod_l+0x914>
 8009e54:	f7ff fb6e 	bl	8009534 <sulp>
 8009e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e5c:	ec53 2b10 	vmov	r2, r3, d0
 8009e60:	f7f6 fa14 	bl	800028c <__adddf3>
 8009e64:	4682      	mov	sl, r0
 8009e66:	468b      	mov	fp, r1
 8009e68:	e7de      	b.n	8009e28 <_strtod_l+0x8b8>
 8009e6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e76:	f04f 3aff 	mov.w	sl, #4294967295
 8009e7a:	e7d5      	b.n	8009e28 <_strtod_l+0x8b8>
 8009e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e7e:	ea13 0f0a 	tst.w	r3, sl
 8009e82:	e7e1      	b.n	8009e48 <_strtod_l+0x8d8>
 8009e84:	f7ff fb56 	bl	8009534 <sulp>
 8009e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e8c:	ec53 2b10 	vmov	r2, r3, d0
 8009e90:	f7f6 f9fa 	bl	8000288 <__aeabi_dsub>
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	4682      	mov	sl, r0
 8009e9a:	468b      	mov	fp, r1
 8009e9c:	f7f6 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d0c1      	beq.n	8009e28 <_strtod_l+0x8b8>
 8009ea4:	e619      	b.n	8009ada <_strtod_l+0x56a>
 8009ea6:	4641      	mov	r1, r8
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f7ff facd 	bl	8009448 <__ratio>
 8009eae:	ec57 6b10 	vmov	r6, r7, d0
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fe18 	bl	8000af0 <__aeabi_dcmple>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d06f      	beq.n	8009fa4 <_strtod_l+0xa34>
 8009ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d17a      	bne.n	8009fc0 <_strtod_l+0xa50>
 8009eca:	f1ba 0f00 	cmp.w	sl, #0
 8009ece:	d158      	bne.n	8009f82 <_strtod_l+0xa12>
 8009ed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d15a      	bne.n	8009f90 <_strtod_l+0xa20>
 8009eda:	4b64      	ldr	r3, [pc, #400]	@ (800a06c <_strtod_l+0xafc>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d159      	bne.n	8009f9e <_strtod_l+0xa2e>
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	4b60      	ldr	r3, [pc, #384]	@ (800a070 <_strtod_l+0xb00>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f7f6 fb81 	bl	80005f8 <__aeabi_dmul>
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460f      	mov	r7, r1
 8009efa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009efe:	9606      	str	r6, [sp, #24]
 8009f00:	9307      	str	r3, [sp, #28]
 8009f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f06:	4d57      	ldr	r5, [pc, #348]	@ (800a064 <_strtod_l+0xaf4>)
 8009f08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f0e:	401d      	ands	r5, r3
 8009f10:	4b58      	ldr	r3, [pc, #352]	@ (800a074 <_strtod_l+0xb04>)
 8009f12:	429d      	cmp	r5, r3
 8009f14:	f040 80b2 	bne.w	800a07c <_strtod_l+0xb0c>
 8009f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f1e:	ec4b ab10 	vmov	d0, sl, fp
 8009f22:	f7ff f9c9 	bl	80092b8 <__ulp>
 8009f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f2a:	ec51 0b10 	vmov	r0, r1, d0
 8009f2e:	f7f6 fb63 	bl	80005f8 <__aeabi_dmul>
 8009f32:	4652      	mov	r2, sl
 8009f34:	465b      	mov	r3, fp
 8009f36:	f7f6 f9a9 	bl	800028c <__adddf3>
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4949      	ldr	r1, [pc, #292]	@ (800a064 <_strtod_l+0xaf4>)
 8009f3e:	4a4e      	ldr	r2, [pc, #312]	@ (800a078 <_strtod_l+0xb08>)
 8009f40:	4019      	ands	r1, r3
 8009f42:	4291      	cmp	r1, r2
 8009f44:	4682      	mov	sl, r0
 8009f46:	d942      	bls.n	8009fce <_strtod_l+0xa5e>
 8009f48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f4a:	4b47      	ldr	r3, [pc, #284]	@ (800a068 <_strtod_l+0xaf8>)
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d103      	bne.n	8009f58 <_strtod_l+0x9e8>
 8009f50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f52:	3301      	adds	r3, #1
 8009f54:	f43f ad2b 	beq.w	80099ae <_strtod_l+0x43e>
 8009f58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a068 <_strtod_l+0xaf8>
 8009f5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009f60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f62:	9805      	ldr	r0, [sp, #20]
 8009f64:	f7fe fe74 	bl	8008c50 <_Bfree>
 8009f68:	9805      	ldr	r0, [sp, #20]
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7fe fe70 	bl	8008c50 <_Bfree>
 8009f70:	9805      	ldr	r0, [sp, #20]
 8009f72:	4641      	mov	r1, r8
 8009f74:	f7fe fe6c 	bl	8008c50 <_Bfree>
 8009f78:	9805      	ldr	r0, [sp, #20]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	f7fe fe68 	bl	8008c50 <_Bfree>
 8009f80:	e618      	b.n	8009bb4 <_strtod_l+0x644>
 8009f82:	f1ba 0f01 	cmp.w	sl, #1
 8009f86:	d103      	bne.n	8009f90 <_strtod_l+0xa20>
 8009f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f43f ada5 	beq.w	8009ada <_strtod_l+0x56a>
 8009f90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a040 <_strtod_l+0xad0>
 8009f94:	4f35      	ldr	r7, [pc, #212]	@ (800a06c <_strtod_l+0xafc>)
 8009f96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	e7b1      	b.n	8009f02 <_strtod_l+0x992>
 8009f9e:	4f34      	ldr	r7, [pc, #208]	@ (800a070 <_strtod_l+0xb00>)
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	e7aa      	b.n	8009efa <_strtod_l+0x98a>
 8009fa4:	4b32      	ldr	r3, [pc, #200]	@ (800a070 <_strtod_l+0xb00>)
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	2200      	movs	r2, #0
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d09f      	beq.n	8009efa <_strtod_l+0x98a>
 8009fba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fbe:	e7a0      	b.n	8009f02 <_strtod_l+0x992>
 8009fc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a048 <_strtod_l+0xad8>
 8009fc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fc8:	ec57 6b17 	vmov	r6, r7, d7
 8009fcc:	e799      	b.n	8009f02 <_strtod_l+0x992>
 8009fce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009fd2:	9b08      	ldr	r3, [sp, #32]
 8009fd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1c1      	bne.n	8009f60 <_strtod_l+0x9f0>
 8009fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fe0:	0d1b      	lsrs	r3, r3, #20
 8009fe2:	051b      	lsls	r3, r3, #20
 8009fe4:	429d      	cmp	r5, r3
 8009fe6:	d1bb      	bne.n	8009f60 <_strtod_l+0x9f0>
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 fe64 	bl	8000cb8 <__aeabi_d2lz>
 8009ff0:	f7f6 fad4 	bl	800059c <__aeabi_l2d>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 f944 	bl	8000288 <__aeabi_dsub>
 800a000:	460b      	mov	r3, r1
 800a002:	4602      	mov	r2, r0
 800a004:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a008:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00e:	ea46 060a 	orr.w	r6, r6, sl
 800a012:	431e      	orrs	r6, r3
 800a014:	d06f      	beq.n	800a0f6 <_strtod_l+0xb86>
 800a016:	a30e      	add	r3, pc, #56	@ (adr r3, 800a050 <_strtod_l+0xae0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800a020:	2800      	cmp	r0, #0
 800a022:	f47f accf 	bne.w	80099c4 <_strtod_l+0x454>
 800a026:	a30c      	add	r3, pc, #48	@ (adr r3, 800a058 <_strtod_l+0xae8>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a030:	f7f6 fd72 	bl	8000b18 <__aeabi_dcmpgt>
 800a034:	2800      	cmp	r0, #0
 800a036:	d093      	beq.n	8009f60 <_strtod_l+0x9f0>
 800a038:	e4c4      	b.n	80099c4 <_strtod_l+0x454>
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w
 800a040:	00000000 	.word	0x00000000
 800a044:	bff00000 	.word	0xbff00000
 800a048:	00000000 	.word	0x00000000
 800a04c:	3ff00000 	.word	0x3ff00000
 800a050:	94a03595 	.word	0x94a03595
 800a054:	3fdfffff 	.word	0x3fdfffff
 800a058:	35afe535 	.word	0x35afe535
 800a05c:	3fe00000 	.word	0x3fe00000
 800a060:	000fffff 	.word	0x000fffff
 800a064:	7ff00000 	.word	0x7ff00000
 800a068:	7fefffff 	.word	0x7fefffff
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	3fe00000 	.word	0x3fe00000
 800a074:	7fe00000 	.word	0x7fe00000
 800a078:	7c9fffff 	.word	0x7c9fffff
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	b323      	cbz	r3, 800a0ca <_strtod_l+0xb5a>
 800a080:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a084:	d821      	bhi.n	800a0ca <_strtod_l+0xb5a>
 800a086:	a328      	add	r3, pc, #160	@ (adr r3, 800a128 <_strtod_l+0xbb8>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	4630      	mov	r0, r6
 800a08e:	4639      	mov	r1, r7
 800a090:	f7f6 fd2e 	bl	8000af0 <__aeabi_dcmple>
 800a094:	b1a0      	cbz	r0, 800a0c0 <_strtod_l+0xb50>
 800a096:	4639      	mov	r1, r7
 800a098:	4630      	mov	r0, r6
 800a09a:	f7f6 fd85 	bl	8000ba8 <__aeabi_d2uiz>
 800a09e:	2801      	cmp	r0, #1
 800a0a0:	bf38      	it	cc
 800a0a2:	2001      	movcc	r0, #1
 800a0a4:	f7f6 fa2e 	bl	8000504 <__aeabi_ui2d>
 800a0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	b9fb      	cbnz	r3, 800a0f0 <_strtod_l+0xb80>
 800a0b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a0b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0c6:	1b5b      	subs	r3, r3, r5
 800a0c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0d2:	f7ff f8f1 	bl	80092b8 <__ulp>
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	ec53 2b10 	vmov	r2, r3, d0
 800a0dc:	4659      	mov	r1, fp
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0e6:	f7f6 f8d1 	bl	800028c <__adddf3>
 800a0ea:	4682      	mov	sl, r0
 800a0ec:	468b      	mov	fp, r1
 800a0ee:	e770      	b.n	8009fd2 <_strtod_l+0xa62>
 800a0f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0f4:	e7e0      	b.n	800a0b8 <_strtod_l+0xb48>
 800a0f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a130 <_strtod_l+0xbc0>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7f6 fcee 	bl	8000adc <__aeabi_dcmplt>
 800a100:	e798      	b.n	800a034 <_strtod_l+0xac4>
 800a102:	2300      	movs	r3, #0
 800a104:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a106:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	f7ff ba6d 	b.w	80095ea <_strtod_l+0x7a>
 800a110:	2a65      	cmp	r2, #101	@ 0x65
 800a112:	f43f ab66 	beq.w	80097e2 <_strtod_l+0x272>
 800a116:	2a45      	cmp	r2, #69	@ 0x45
 800a118:	f43f ab63 	beq.w	80097e2 <_strtod_l+0x272>
 800a11c:	2301      	movs	r3, #1
 800a11e:	f7ff bb9e 	b.w	800985e <_strtod_l+0x2ee>
 800a122:	bf00      	nop
 800a124:	f3af 8000 	nop.w
 800a128:	ffc00000 	.word	0xffc00000
 800a12c:	41dfffff 	.word	0x41dfffff
 800a130:	94a03595 	.word	0x94a03595
 800a134:	3fcfffff 	.word	0x3fcfffff

0800a138 <_strtod_r>:
 800a138:	4b01      	ldr	r3, [pc, #4]	@ (800a140 <_strtod_r+0x8>)
 800a13a:	f7ff ba19 	b.w	8009570 <_strtod_l>
 800a13e:	bf00      	nop
 800a140:	20000070 	.word	0x20000070

0800a144 <_strtol_l.constprop.0>:
 800a144:	2b24      	cmp	r3, #36	@ 0x24
 800a146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14a:	4686      	mov	lr, r0
 800a14c:	4690      	mov	r8, r2
 800a14e:	d801      	bhi.n	800a154 <_strtol_l.constprop.0+0x10>
 800a150:	2b01      	cmp	r3, #1
 800a152:	d106      	bne.n	800a162 <_strtol_l.constprop.0+0x1e>
 800a154:	f7fd fdbc 	bl	8007cd0 <__errno>
 800a158:	2316      	movs	r3, #22
 800a15a:	6003      	str	r3, [r0, #0]
 800a15c:	2000      	movs	r0, #0
 800a15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a162:	4834      	ldr	r0, [pc, #208]	@ (800a234 <_strtol_l.constprop.0+0xf0>)
 800a164:	460d      	mov	r5, r1
 800a166:	462a      	mov	r2, r5
 800a168:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a16c:	5d06      	ldrb	r6, [r0, r4]
 800a16e:	f016 0608 	ands.w	r6, r6, #8
 800a172:	d1f8      	bne.n	800a166 <_strtol_l.constprop.0+0x22>
 800a174:	2c2d      	cmp	r4, #45	@ 0x2d
 800a176:	d12d      	bne.n	800a1d4 <_strtol_l.constprop.0+0x90>
 800a178:	782c      	ldrb	r4, [r5, #0]
 800a17a:	2601      	movs	r6, #1
 800a17c:	1c95      	adds	r5, r2, #2
 800a17e:	f033 0210 	bics.w	r2, r3, #16
 800a182:	d109      	bne.n	800a198 <_strtol_l.constprop.0+0x54>
 800a184:	2c30      	cmp	r4, #48	@ 0x30
 800a186:	d12a      	bne.n	800a1de <_strtol_l.constprop.0+0x9a>
 800a188:	782a      	ldrb	r2, [r5, #0]
 800a18a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a18e:	2a58      	cmp	r2, #88	@ 0x58
 800a190:	d125      	bne.n	800a1de <_strtol_l.constprop.0+0x9a>
 800a192:	786c      	ldrb	r4, [r5, #1]
 800a194:	2310      	movs	r3, #16
 800a196:	3502      	adds	r5, #2
 800a198:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a19c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	fbbc f9f3 	udiv	r9, ip, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a1ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a1b0:	2f09      	cmp	r7, #9
 800a1b2:	d81b      	bhi.n	800a1ec <_strtol_l.constprop.0+0xa8>
 800a1b4:	463c      	mov	r4, r7
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	dd27      	ble.n	800a20a <_strtol_l.constprop.0+0xc6>
 800a1ba:	1c57      	adds	r7, r2, #1
 800a1bc:	d007      	beq.n	800a1ce <_strtol_l.constprop.0+0x8a>
 800a1be:	4581      	cmp	r9, r0
 800a1c0:	d320      	bcc.n	800a204 <_strtol_l.constprop.0+0xc0>
 800a1c2:	d101      	bne.n	800a1c8 <_strtol_l.constprop.0+0x84>
 800a1c4:	45a2      	cmp	sl, r4
 800a1c6:	db1d      	blt.n	800a204 <_strtol_l.constprop.0+0xc0>
 800a1c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d2:	e7eb      	b.n	800a1ac <_strtol_l.constprop.0+0x68>
 800a1d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a1d6:	bf04      	itt	eq
 800a1d8:	782c      	ldrbeq	r4, [r5, #0]
 800a1da:	1c95      	addeq	r5, r2, #2
 800a1dc:	e7cf      	b.n	800a17e <_strtol_l.constprop.0+0x3a>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1da      	bne.n	800a198 <_strtol_l.constprop.0+0x54>
 800a1e2:	2c30      	cmp	r4, #48	@ 0x30
 800a1e4:	bf0c      	ite	eq
 800a1e6:	2308      	moveq	r3, #8
 800a1e8:	230a      	movne	r3, #10
 800a1ea:	e7d5      	b.n	800a198 <_strtol_l.constprop.0+0x54>
 800a1ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1f0:	2f19      	cmp	r7, #25
 800a1f2:	d801      	bhi.n	800a1f8 <_strtol_l.constprop.0+0xb4>
 800a1f4:	3c37      	subs	r4, #55	@ 0x37
 800a1f6:	e7de      	b.n	800a1b6 <_strtol_l.constprop.0+0x72>
 800a1f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1fc:	2f19      	cmp	r7, #25
 800a1fe:	d804      	bhi.n	800a20a <_strtol_l.constprop.0+0xc6>
 800a200:	3c57      	subs	r4, #87	@ 0x57
 800a202:	e7d8      	b.n	800a1b6 <_strtol_l.constprop.0+0x72>
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	e7e1      	b.n	800a1ce <_strtol_l.constprop.0+0x8a>
 800a20a:	1c53      	adds	r3, r2, #1
 800a20c:	d108      	bne.n	800a220 <_strtol_l.constprop.0+0xdc>
 800a20e:	2322      	movs	r3, #34	@ 0x22
 800a210:	f8ce 3000 	str.w	r3, [lr]
 800a214:	4660      	mov	r0, ip
 800a216:	f1b8 0f00 	cmp.w	r8, #0
 800a21a:	d0a0      	beq.n	800a15e <_strtol_l.constprop.0+0x1a>
 800a21c:	1e69      	subs	r1, r5, #1
 800a21e:	e006      	b.n	800a22e <_strtol_l.constprop.0+0xea>
 800a220:	b106      	cbz	r6, 800a224 <_strtol_l.constprop.0+0xe0>
 800a222:	4240      	negs	r0, r0
 800a224:	f1b8 0f00 	cmp.w	r8, #0
 800a228:	d099      	beq.n	800a15e <_strtol_l.constprop.0+0x1a>
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d1f6      	bne.n	800a21c <_strtol_l.constprop.0+0xd8>
 800a22e:	f8c8 1000 	str.w	r1, [r8]
 800a232:	e794      	b.n	800a15e <_strtol_l.constprop.0+0x1a>
 800a234:	0800c441 	.word	0x0800c441

0800a238 <_strtol_r>:
 800a238:	f7ff bf84 	b.w	800a144 <_strtol_l.constprop.0>

0800a23c <__ssputs_r>:
 800a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	688e      	ldr	r6, [r1, #8]
 800a242:	461f      	mov	r7, r3
 800a244:	42be      	cmp	r6, r7
 800a246:	680b      	ldr	r3, [r1, #0]
 800a248:	4682      	mov	sl, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	4690      	mov	r8, r2
 800a24e:	d82d      	bhi.n	800a2ac <__ssputs_r+0x70>
 800a250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a254:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a258:	d026      	beq.n	800a2a8 <__ssputs_r+0x6c>
 800a25a:	6965      	ldr	r5, [r4, #20]
 800a25c:	6909      	ldr	r1, [r1, #16]
 800a25e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a262:	eba3 0901 	sub.w	r9, r3, r1
 800a266:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a26a:	1c7b      	adds	r3, r7, #1
 800a26c:	444b      	add	r3, r9
 800a26e:	106d      	asrs	r5, r5, #1
 800a270:	429d      	cmp	r5, r3
 800a272:	bf38      	it	cc
 800a274:	461d      	movcc	r5, r3
 800a276:	0553      	lsls	r3, r2, #21
 800a278:	d527      	bpl.n	800a2ca <__ssputs_r+0x8e>
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7fe fc1c 	bl	8008ab8 <_malloc_r>
 800a280:	4606      	mov	r6, r0
 800a282:	b360      	cbz	r0, 800a2de <__ssputs_r+0xa2>
 800a284:	6921      	ldr	r1, [r4, #16]
 800a286:	464a      	mov	r2, r9
 800a288:	f000 fa18 	bl	800a6bc <memcpy>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	6126      	str	r6, [r4, #16]
 800a29a:	6165      	str	r5, [r4, #20]
 800a29c:	444e      	add	r6, r9
 800a29e:	eba5 0509 	sub.w	r5, r5, r9
 800a2a2:	6026      	str	r6, [r4, #0]
 800a2a4:	60a5      	str	r5, [r4, #8]
 800a2a6:	463e      	mov	r6, r7
 800a2a8:	42be      	cmp	r6, r7
 800a2aa:	d900      	bls.n	800a2ae <__ssputs_r+0x72>
 800a2ac:	463e      	mov	r6, r7
 800a2ae:	6820      	ldr	r0, [r4, #0]
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	f000 f9c6 	bl	800a644 <memmove>
 800a2b8:	68a3      	ldr	r3, [r4, #8]
 800a2ba:	1b9b      	subs	r3, r3, r6
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	4433      	add	r3, r6
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	f000 fd89 	bl	800ade2 <_realloc_r>
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d1e0      	bne.n	800a298 <__ssputs_r+0x5c>
 800a2d6:	6921      	ldr	r1, [r4, #16]
 800a2d8:	4650      	mov	r0, sl
 800a2da:	f7fe fb79 	bl	80089d0 <_free_r>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	f8ca 3000 	str.w	r3, [sl]
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e7e9      	b.n	800a2c6 <__ssputs_r+0x8a>
	...

0800a2f4 <_svfiprintf_r>:
 800a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	4698      	mov	r8, r3
 800a2fa:	898b      	ldrh	r3, [r1, #12]
 800a2fc:	061b      	lsls	r3, r3, #24
 800a2fe:	b09d      	sub	sp, #116	@ 0x74
 800a300:	4607      	mov	r7, r0
 800a302:	460d      	mov	r5, r1
 800a304:	4614      	mov	r4, r2
 800a306:	d510      	bpl.n	800a32a <_svfiprintf_r+0x36>
 800a308:	690b      	ldr	r3, [r1, #16]
 800a30a:	b973      	cbnz	r3, 800a32a <_svfiprintf_r+0x36>
 800a30c:	2140      	movs	r1, #64	@ 0x40
 800a30e:	f7fe fbd3 	bl	8008ab8 <_malloc_r>
 800a312:	6028      	str	r0, [r5, #0]
 800a314:	6128      	str	r0, [r5, #16]
 800a316:	b930      	cbnz	r0, 800a326 <_svfiprintf_r+0x32>
 800a318:	230c      	movs	r3, #12
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	b01d      	add	sp, #116	@ 0x74
 800a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a326:	2340      	movs	r3, #64	@ 0x40
 800a328:	616b      	str	r3, [r5, #20]
 800a32a:	2300      	movs	r3, #0
 800a32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a32e:	2320      	movs	r3, #32
 800a330:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a334:	f8cd 800c 	str.w	r8, [sp, #12]
 800a338:	2330      	movs	r3, #48	@ 0x30
 800a33a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4d8 <_svfiprintf_r+0x1e4>
 800a33e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a342:	f04f 0901 	mov.w	r9, #1
 800a346:	4623      	mov	r3, r4
 800a348:	469a      	mov	sl, r3
 800a34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a34e:	b10a      	cbz	r2, 800a354 <_svfiprintf_r+0x60>
 800a350:	2a25      	cmp	r2, #37	@ 0x25
 800a352:	d1f9      	bne.n	800a348 <_svfiprintf_r+0x54>
 800a354:	ebba 0b04 	subs.w	fp, sl, r4
 800a358:	d00b      	beq.n	800a372 <_svfiprintf_r+0x7e>
 800a35a:	465b      	mov	r3, fp
 800a35c:	4622      	mov	r2, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	4638      	mov	r0, r7
 800a362:	f7ff ff6b 	bl	800a23c <__ssputs_r>
 800a366:	3001      	adds	r0, #1
 800a368:	f000 80a7 	beq.w	800a4ba <_svfiprintf_r+0x1c6>
 800a36c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a36e:	445a      	add	r2, fp
 800a370:	9209      	str	r2, [sp, #36]	@ 0x24
 800a372:	f89a 3000 	ldrb.w	r3, [sl]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 809f 	beq.w	800a4ba <_svfiprintf_r+0x1c6>
 800a37c:	2300      	movs	r3, #0
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295
 800a382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a386:	f10a 0a01 	add.w	sl, sl, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	9307      	str	r3, [sp, #28]
 800a38e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a392:	931a      	str	r3, [sp, #104]	@ 0x68
 800a394:	4654      	mov	r4, sl
 800a396:	2205      	movs	r2, #5
 800a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39c:	484e      	ldr	r0, [pc, #312]	@ (800a4d8 <_svfiprintf_r+0x1e4>)
 800a39e:	f7f5 ff17 	bl	80001d0 <memchr>
 800a3a2:	9a04      	ldr	r2, [sp, #16]
 800a3a4:	b9d8      	cbnz	r0, 800a3de <_svfiprintf_r+0xea>
 800a3a6:	06d0      	lsls	r0, r2, #27
 800a3a8:	bf44      	itt	mi
 800a3aa:	2320      	movmi	r3, #32
 800a3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b0:	0711      	lsls	r1, r2, #28
 800a3b2:	bf44      	itt	mi
 800a3b4:	232b      	movmi	r3, #43	@ 0x2b
 800a3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c0:	d015      	beq.n	800a3ee <_svfiprintf_r+0xfa>
 800a3c2:	9a07      	ldr	r2, [sp, #28]
 800a3c4:	4654      	mov	r4, sl
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	f04f 0c0a 	mov.w	ip, #10
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d2:	3b30      	subs	r3, #48	@ 0x30
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d94b      	bls.n	800a470 <_svfiprintf_r+0x17c>
 800a3d8:	b1b0      	cbz	r0, 800a408 <_svfiprintf_r+0x114>
 800a3da:	9207      	str	r2, [sp, #28]
 800a3dc:	e014      	b.n	800a408 <_svfiprintf_r+0x114>
 800a3de:	eba0 0308 	sub.w	r3, r0, r8
 800a3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	46a2      	mov	sl, r4
 800a3ec:	e7d2      	b.n	800a394 <_svfiprintf_r+0xa0>
 800a3ee:	9b03      	ldr	r3, [sp, #12]
 800a3f0:	1d19      	adds	r1, r3, #4
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	9103      	str	r1, [sp, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bfbb      	ittet	lt
 800a3fa:	425b      	neglt	r3, r3
 800a3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a400:	9307      	strge	r3, [sp, #28]
 800a402:	9307      	strlt	r3, [sp, #28]
 800a404:	bfb8      	it	lt
 800a406:	9204      	strlt	r2, [sp, #16]
 800a408:	7823      	ldrb	r3, [r4, #0]
 800a40a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a40c:	d10a      	bne.n	800a424 <_svfiprintf_r+0x130>
 800a40e:	7863      	ldrb	r3, [r4, #1]
 800a410:	2b2a      	cmp	r3, #42	@ 0x2a
 800a412:	d132      	bne.n	800a47a <_svfiprintf_r+0x186>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	1d1a      	adds	r2, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9203      	str	r2, [sp, #12]
 800a41c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a420:	3402      	adds	r4, #2
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4e8 <_svfiprintf_r+0x1f4>
 800a428:	7821      	ldrb	r1, [r4, #0]
 800a42a:	2203      	movs	r2, #3
 800a42c:	4650      	mov	r0, sl
 800a42e:	f7f5 fecf 	bl	80001d0 <memchr>
 800a432:	b138      	cbz	r0, 800a444 <_svfiprintf_r+0x150>
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	eba0 000a 	sub.w	r0, r0, sl
 800a43a:	2240      	movs	r2, #64	@ 0x40
 800a43c:	4082      	lsls	r2, r0
 800a43e:	4313      	orrs	r3, r2
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	4824      	ldr	r0, [pc, #144]	@ (800a4dc <_svfiprintf_r+0x1e8>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 febe 	bl	80001d0 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d036      	beq.n	800a4c6 <_svfiprintf_r+0x1d2>
 800a458:	4b21      	ldr	r3, [pc, #132]	@ (800a4e0 <_svfiprintf_r+0x1ec>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_svfiprintf_r+0x1b0>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46a:	4433      	add	r3, r6
 800a46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a46e:	e76a      	b.n	800a346 <_svfiprintf_r+0x52>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a8      	b.n	800a3cc <_svfiprintf_r+0xd8>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	@ 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_svfiprintf_r+0x1a6>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c6      	beq.n	800a424 <_svfiprintf_r+0x130>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c4      	b.n	800a424 <_svfiprintf_r+0x130>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_svfiprintf_r+0x192>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e4 <_svfiprintf_r+0x1f0>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7fc fcca 	bl	8006e48 <_printf_float>
 800a4b4:	1c42      	adds	r2, r0, #1
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	d1d6      	bne.n	800a468 <_svfiprintf_r+0x174>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	065b      	lsls	r3, r3, #25
 800a4be:	f53f af2d 	bmi.w	800a31c <_svfiprintf_r+0x28>
 800a4c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4c4:	e72c      	b.n	800a320 <_svfiprintf_r+0x2c>
 800a4c6:	ab03      	add	r3, sp, #12
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	462a      	mov	r2, r5
 800a4cc:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <_svfiprintf_r+0x1f0>)
 800a4ce:	a904      	add	r1, sp, #16
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7fc ff51 	bl	8007378 <_printf_i>
 800a4d6:	e7ed      	b.n	800a4b4 <_svfiprintf_r+0x1c0>
 800a4d8:	0800c541 	.word	0x0800c541
 800a4dc:	0800c54b 	.word	0x0800c54b
 800a4e0:	08006e49 	.word	0x08006e49
 800a4e4:	0800a23d 	.word	0x0800a23d
 800a4e8:	0800c547 	.word	0x0800c547

0800a4ec <__sflush_r>:
 800a4ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	0716      	lsls	r6, r2, #28
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	d454      	bmi.n	800a5a6 <__sflush_r+0xba>
 800a4fc:	684b      	ldr	r3, [r1, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dc02      	bgt.n	800a508 <__sflush_r+0x1c>
 800a502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	dd48      	ble.n	800a59a <__sflush_r+0xae>
 800a508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d045      	beq.n	800a59a <__sflush_r+0xae>
 800a50e:	2300      	movs	r3, #0
 800a510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a514:	682f      	ldr	r7, [r5, #0]
 800a516:	6a21      	ldr	r1, [r4, #32]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	d030      	beq.n	800a57e <__sflush_r+0x92>
 800a51c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	0759      	lsls	r1, r3, #29
 800a522:	d505      	bpl.n	800a530 <__sflush_r+0x44>
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	1ad2      	subs	r2, r2, r3
 800a528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a52a:	b10b      	cbz	r3, 800a530 <__sflush_r+0x44>
 800a52c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	2300      	movs	r3, #0
 800a532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a534:	6a21      	ldr	r1, [r4, #32]
 800a536:	4628      	mov	r0, r5
 800a538:	47b0      	blx	r6
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	d106      	bne.n	800a54e <__sflush_r+0x62>
 800a540:	6829      	ldr	r1, [r5, #0]
 800a542:	291d      	cmp	r1, #29
 800a544:	d82b      	bhi.n	800a59e <__sflush_r+0xb2>
 800a546:	4a2a      	ldr	r2, [pc, #168]	@ (800a5f0 <__sflush_r+0x104>)
 800a548:	410a      	asrs	r2, r1
 800a54a:	07d6      	lsls	r6, r2, #31
 800a54c:	d427      	bmi.n	800a59e <__sflush_r+0xb2>
 800a54e:	2200      	movs	r2, #0
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	04d9      	lsls	r1, r3, #19
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	6022      	str	r2, [r4, #0]
 800a558:	d504      	bpl.n	800a564 <__sflush_r+0x78>
 800a55a:	1c42      	adds	r2, r0, #1
 800a55c:	d101      	bne.n	800a562 <__sflush_r+0x76>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b903      	cbnz	r3, 800a564 <__sflush_r+0x78>
 800a562:	6560      	str	r0, [r4, #84]	@ 0x54
 800a564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a566:	602f      	str	r7, [r5, #0]
 800a568:	b1b9      	cbz	r1, 800a59a <__sflush_r+0xae>
 800a56a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a56e:	4299      	cmp	r1, r3
 800a570:	d002      	beq.n	800a578 <__sflush_r+0x8c>
 800a572:	4628      	mov	r0, r5
 800a574:	f7fe fa2c 	bl	80089d0 <_free_r>
 800a578:	2300      	movs	r3, #0
 800a57a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a57c:	e00d      	b.n	800a59a <__sflush_r+0xae>
 800a57e:	2301      	movs	r3, #1
 800a580:	4628      	mov	r0, r5
 800a582:	47b0      	blx	r6
 800a584:	4602      	mov	r2, r0
 800a586:	1c50      	adds	r0, r2, #1
 800a588:	d1c9      	bne.n	800a51e <__sflush_r+0x32>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0c6      	beq.n	800a51e <__sflush_r+0x32>
 800a590:	2b1d      	cmp	r3, #29
 800a592:	d001      	beq.n	800a598 <__sflush_r+0xac>
 800a594:	2b16      	cmp	r3, #22
 800a596:	d11e      	bne.n	800a5d6 <__sflush_r+0xea>
 800a598:	602f      	str	r7, [r5, #0]
 800a59a:	2000      	movs	r0, #0
 800a59c:	e022      	b.n	800a5e4 <__sflush_r+0xf8>
 800a59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a2:	b21b      	sxth	r3, r3
 800a5a4:	e01b      	b.n	800a5de <__sflush_r+0xf2>
 800a5a6:	690f      	ldr	r7, [r1, #16]
 800a5a8:	2f00      	cmp	r7, #0
 800a5aa:	d0f6      	beq.n	800a59a <__sflush_r+0xae>
 800a5ac:	0793      	lsls	r3, r2, #30
 800a5ae:	680e      	ldr	r6, [r1, #0]
 800a5b0:	bf08      	it	eq
 800a5b2:	694b      	ldreq	r3, [r1, #20]
 800a5b4:	600f      	str	r7, [r1, #0]
 800a5b6:	bf18      	it	ne
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	eba6 0807 	sub.w	r8, r6, r7
 800a5be:	608b      	str	r3, [r1, #8]
 800a5c0:	f1b8 0f00 	cmp.w	r8, #0
 800a5c4:	dde9      	ble.n	800a59a <__sflush_r+0xae>
 800a5c6:	6a21      	ldr	r1, [r4, #32]
 800a5c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5ca:	4643      	mov	r3, r8
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b0      	blx	r6
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	dc08      	bgt.n	800a5e8 <__sflush_r+0xfc>
 800a5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	4407      	add	r7, r0
 800a5ea:	eba8 0800 	sub.w	r8, r8, r0
 800a5ee:	e7e7      	b.n	800a5c0 <__sflush_r+0xd4>
 800a5f0:	dfbffffe 	.word	0xdfbffffe

0800a5f4 <_fflush_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	690b      	ldr	r3, [r1, #16]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b913      	cbnz	r3, 800a604 <_fflush_r+0x10>
 800a5fe:	2500      	movs	r5, #0
 800a600:	4628      	mov	r0, r5
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	b118      	cbz	r0, 800a60e <_fflush_r+0x1a>
 800a606:	6a03      	ldr	r3, [r0, #32]
 800a608:	b90b      	cbnz	r3, 800a60e <_fflush_r+0x1a>
 800a60a:	f7fd fa75 	bl	8007af8 <__sinit>
 800a60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f3      	beq.n	800a5fe <_fflush_r+0xa>
 800a616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a618:	07d0      	lsls	r0, r2, #31
 800a61a:	d404      	bmi.n	800a626 <_fflush_r+0x32>
 800a61c:	0599      	lsls	r1, r3, #22
 800a61e:	d402      	bmi.n	800a626 <_fflush_r+0x32>
 800a620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a622:	f7fd fb80 	bl	8007d26 <__retarget_lock_acquire_recursive>
 800a626:	4628      	mov	r0, r5
 800a628:	4621      	mov	r1, r4
 800a62a:	f7ff ff5f 	bl	800a4ec <__sflush_r>
 800a62e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a630:	07da      	lsls	r2, r3, #31
 800a632:	4605      	mov	r5, r0
 800a634:	d4e4      	bmi.n	800a600 <_fflush_r+0xc>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	059b      	lsls	r3, r3, #22
 800a63a:	d4e1      	bmi.n	800a600 <_fflush_r+0xc>
 800a63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a63e:	f7fd fb73 	bl	8007d28 <__retarget_lock_release_recursive>
 800a642:	e7dd      	b.n	800a600 <_fflush_r+0xc>

0800a644 <memmove>:
 800a644:	4288      	cmp	r0, r1
 800a646:	b510      	push	{r4, lr}
 800a648:	eb01 0402 	add.w	r4, r1, r2
 800a64c:	d902      	bls.n	800a654 <memmove+0x10>
 800a64e:	4284      	cmp	r4, r0
 800a650:	4623      	mov	r3, r4
 800a652:	d807      	bhi.n	800a664 <memmove+0x20>
 800a654:	1e43      	subs	r3, r0, #1
 800a656:	42a1      	cmp	r1, r4
 800a658:	d008      	beq.n	800a66c <memmove+0x28>
 800a65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a662:	e7f8      	b.n	800a656 <memmove+0x12>
 800a664:	4402      	add	r2, r0
 800a666:	4601      	mov	r1, r0
 800a668:	428a      	cmp	r2, r1
 800a66a:	d100      	bne.n	800a66e <memmove+0x2a>
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a676:	e7f7      	b.n	800a668 <memmove+0x24>

0800a678 <strncmp>:
 800a678:	b510      	push	{r4, lr}
 800a67a:	b16a      	cbz	r2, 800a698 <strncmp+0x20>
 800a67c:	3901      	subs	r1, #1
 800a67e:	1884      	adds	r4, r0, r2
 800a680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a684:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a688:	429a      	cmp	r2, r3
 800a68a:	d103      	bne.n	800a694 <strncmp+0x1c>
 800a68c:	42a0      	cmp	r0, r4
 800a68e:	d001      	beq.n	800a694 <strncmp+0x1c>
 800a690:	2a00      	cmp	r2, #0
 800a692:	d1f5      	bne.n	800a680 <strncmp+0x8>
 800a694:	1ad0      	subs	r0, r2, r3
 800a696:	bd10      	pop	{r4, pc}
 800a698:	4610      	mov	r0, r2
 800a69a:	e7fc      	b.n	800a696 <strncmp+0x1e>

0800a69c <_sbrk_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d06      	ldr	r5, [pc, #24]	@ (800a6b8 <_sbrk_r+0x1c>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	f7f8 f9ca 	bl	8002a40 <_sbrk>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_sbrk_r+0x1a>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_sbrk_r+0x1a>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	200009f8 	.word	0x200009f8

0800a6bc <memcpy>:
 800a6bc:	440a      	add	r2, r1
 800a6be:	4291      	cmp	r1, r2
 800a6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c4:	d100      	bne.n	800a6c8 <memcpy+0xc>
 800a6c6:	4770      	bx	lr
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d2:	4291      	cmp	r1, r2
 800a6d4:	d1f9      	bne.n	800a6ca <memcpy+0xe>
 800a6d6:	bd10      	pop	{r4, pc}

0800a6d8 <nan>:
 800a6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6e0 <nan+0x8>
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	00000000 	.word	0x00000000
 800a6e4:	7ff80000 	.word	0x7ff80000

0800a6e8 <__assert_func>:
 800a6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ea:	4614      	mov	r4, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b09      	ldr	r3, [pc, #36]	@ (800a714 <__assert_func+0x2c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	68d8      	ldr	r0, [r3, #12]
 800a6f6:	b954      	cbnz	r4, 800a70e <__assert_func+0x26>
 800a6f8:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <__assert_func+0x30>)
 800a6fa:	461c      	mov	r4, r3
 800a6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a700:	9100      	str	r1, [sp, #0]
 800a702:	462b      	mov	r3, r5
 800a704:	4905      	ldr	r1, [pc, #20]	@ (800a71c <__assert_func+0x34>)
 800a706:	f000 fba7 	bl	800ae58 <fiprintf>
 800a70a:	f000 fbb7 	bl	800ae7c <abort>
 800a70e:	4b04      	ldr	r3, [pc, #16]	@ (800a720 <__assert_func+0x38>)
 800a710:	e7f4      	b.n	800a6fc <__assert_func+0x14>
 800a712:	bf00      	nop
 800a714:	20000020 	.word	0x20000020
 800a718:	0800c595 	.word	0x0800c595
 800a71c:	0800c567 	.word	0x0800c567
 800a720:	0800c55a 	.word	0x0800c55a

0800a724 <_calloc_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	fba1 5402 	umull	r5, r4, r1, r2
 800a72a:	b93c      	cbnz	r4, 800a73c <_calloc_r+0x18>
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7fe f9c3 	bl	8008ab8 <_malloc_r>
 800a732:	4606      	mov	r6, r0
 800a734:	b928      	cbnz	r0, 800a742 <_calloc_r+0x1e>
 800a736:	2600      	movs	r6, #0
 800a738:	4630      	mov	r0, r6
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	220c      	movs	r2, #12
 800a73e:	6002      	str	r2, [r0, #0]
 800a740:	e7f9      	b.n	800a736 <_calloc_r+0x12>
 800a742:	462a      	mov	r2, r5
 800a744:	4621      	mov	r1, r4
 800a746:	f7fd fa70 	bl	8007c2a <memset>
 800a74a:	e7f5      	b.n	800a738 <_calloc_r+0x14>

0800a74c <rshift>:
 800a74c:	6903      	ldr	r3, [r0, #16]
 800a74e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a756:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a75a:	f100 0414 	add.w	r4, r0, #20
 800a75e:	dd45      	ble.n	800a7ec <rshift+0xa0>
 800a760:	f011 011f 	ands.w	r1, r1, #31
 800a764:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a768:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a76c:	d10c      	bne.n	800a788 <rshift+0x3c>
 800a76e:	f100 0710 	add.w	r7, r0, #16
 800a772:	4629      	mov	r1, r5
 800a774:	42b1      	cmp	r1, r6
 800a776:	d334      	bcc.n	800a7e2 <rshift+0x96>
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	1eea      	subs	r2, r5, #3
 800a77e:	4296      	cmp	r6, r2
 800a780:	bf38      	it	cc
 800a782:	2300      	movcc	r3, #0
 800a784:	4423      	add	r3, r4
 800a786:	e015      	b.n	800a7b4 <rshift+0x68>
 800a788:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a78c:	f1c1 0820 	rsb	r8, r1, #32
 800a790:	40cf      	lsrs	r7, r1
 800a792:	f105 0e04 	add.w	lr, r5, #4
 800a796:	46a1      	mov	r9, r4
 800a798:	4576      	cmp	r6, lr
 800a79a:	46f4      	mov	ip, lr
 800a79c:	d815      	bhi.n	800a7ca <rshift+0x7e>
 800a79e:	1a9a      	subs	r2, r3, r2
 800a7a0:	0092      	lsls	r2, r2, #2
 800a7a2:	3a04      	subs	r2, #4
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	42ae      	cmp	r6, r5
 800a7a8:	bf38      	it	cc
 800a7aa:	2200      	movcc	r2, #0
 800a7ac:	18a3      	adds	r3, r4, r2
 800a7ae:	50a7      	str	r7, [r4, r2]
 800a7b0:	b107      	cbz	r7, 800a7b4 <rshift+0x68>
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	1b1a      	subs	r2, r3, r4
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7bc:	bf08      	it	eq
 800a7be:	2300      	moveq	r3, #0
 800a7c0:	6102      	str	r2, [r0, #16]
 800a7c2:	bf08      	it	eq
 800a7c4:	6143      	streq	r3, [r0, #20]
 800a7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ca:	f8dc c000 	ldr.w	ip, [ip]
 800a7ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7d2:	ea4c 0707 	orr.w	r7, ip, r7
 800a7d6:	f849 7b04 	str.w	r7, [r9], #4
 800a7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7de:	40cf      	lsrs	r7, r1
 800a7e0:	e7da      	b.n	800a798 <rshift+0x4c>
 800a7e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7ea:	e7c3      	b.n	800a774 <rshift+0x28>
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	e7e1      	b.n	800a7b4 <rshift+0x68>

0800a7f0 <__hexdig_fun>:
 800a7f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a7f4:	2b09      	cmp	r3, #9
 800a7f6:	d802      	bhi.n	800a7fe <__hexdig_fun+0xe>
 800a7f8:	3820      	subs	r0, #32
 800a7fa:	b2c0      	uxtb	r0, r0
 800a7fc:	4770      	bx	lr
 800a7fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a802:	2b05      	cmp	r3, #5
 800a804:	d801      	bhi.n	800a80a <__hexdig_fun+0x1a>
 800a806:	3847      	subs	r0, #71	@ 0x47
 800a808:	e7f7      	b.n	800a7fa <__hexdig_fun+0xa>
 800a80a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d801      	bhi.n	800a816 <__hexdig_fun+0x26>
 800a812:	3827      	subs	r0, #39	@ 0x27
 800a814:	e7f1      	b.n	800a7fa <__hexdig_fun+0xa>
 800a816:	2000      	movs	r0, #0
 800a818:	4770      	bx	lr
	...

0800a81c <__gethex>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	b085      	sub	sp, #20
 800a822:	468a      	mov	sl, r1
 800a824:	9302      	str	r3, [sp, #8]
 800a826:	680b      	ldr	r3, [r1, #0]
 800a828:	9001      	str	r0, [sp, #4]
 800a82a:	4690      	mov	r8, r2
 800a82c:	1c9c      	adds	r4, r3, #2
 800a82e:	46a1      	mov	r9, r4
 800a830:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a834:	2830      	cmp	r0, #48	@ 0x30
 800a836:	d0fa      	beq.n	800a82e <__gethex+0x12>
 800a838:	eba9 0303 	sub.w	r3, r9, r3
 800a83c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a840:	f7ff ffd6 	bl	800a7f0 <__hexdig_fun>
 800a844:	4605      	mov	r5, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	d168      	bne.n	800a91c <__gethex+0x100>
 800a84a:	49a0      	ldr	r1, [pc, #640]	@ (800aacc <__gethex+0x2b0>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	4648      	mov	r0, r9
 800a850:	f7ff ff12 	bl	800a678 <strncmp>
 800a854:	4607      	mov	r7, r0
 800a856:	2800      	cmp	r0, #0
 800a858:	d167      	bne.n	800a92a <__gethex+0x10e>
 800a85a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a85e:	4626      	mov	r6, r4
 800a860:	f7ff ffc6 	bl	800a7f0 <__hexdig_fun>
 800a864:	2800      	cmp	r0, #0
 800a866:	d062      	beq.n	800a92e <__gethex+0x112>
 800a868:	4623      	mov	r3, r4
 800a86a:	7818      	ldrb	r0, [r3, #0]
 800a86c:	2830      	cmp	r0, #48	@ 0x30
 800a86e:	4699      	mov	r9, r3
 800a870:	f103 0301 	add.w	r3, r3, #1
 800a874:	d0f9      	beq.n	800a86a <__gethex+0x4e>
 800a876:	f7ff ffbb 	bl	800a7f0 <__hexdig_fun>
 800a87a:	fab0 f580 	clz	r5, r0
 800a87e:	096d      	lsrs	r5, r5, #5
 800a880:	f04f 0b01 	mov.w	fp, #1
 800a884:	464a      	mov	r2, r9
 800a886:	4616      	mov	r6, r2
 800a888:	3201      	adds	r2, #1
 800a88a:	7830      	ldrb	r0, [r6, #0]
 800a88c:	f7ff ffb0 	bl	800a7f0 <__hexdig_fun>
 800a890:	2800      	cmp	r0, #0
 800a892:	d1f8      	bne.n	800a886 <__gethex+0x6a>
 800a894:	498d      	ldr	r1, [pc, #564]	@ (800aacc <__gethex+0x2b0>)
 800a896:	2201      	movs	r2, #1
 800a898:	4630      	mov	r0, r6
 800a89a:	f7ff feed 	bl	800a678 <strncmp>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d13f      	bne.n	800a922 <__gethex+0x106>
 800a8a2:	b944      	cbnz	r4, 800a8b6 <__gethex+0x9a>
 800a8a4:	1c74      	adds	r4, r6, #1
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	3201      	adds	r2, #1
 800a8ac:	7830      	ldrb	r0, [r6, #0]
 800a8ae:	f7ff ff9f 	bl	800a7f0 <__hexdig_fun>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d1f8      	bne.n	800a8a8 <__gethex+0x8c>
 800a8b6:	1ba4      	subs	r4, r4, r6
 800a8b8:	00a7      	lsls	r7, r4, #2
 800a8ba:	7833      	ldrb	r3, [r6, #0]
 800a8bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a8c0:	2b50      	cmp	r3, #80	@ 0x50
 800a8c2:	d13e      	bne.n	800a942 <__gethex+0x126>
 800a8c4:	7873      	ldrb	r3, [r6, #1]
 800a8c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a8c8:	d033      	beq.n	800a932 <__gethex+0x116>
 800a8ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800a8cc:	d034      	beq.n	800a938 <__gethex+0x11c>
 800a8ce:	1c71      	adds	r1, r6, #1
 800a8d0:	2400      	movs	r4, #0
 800a8d2:	7808      	ldrb	r0, [r1, #0]
 800a8d4:	f7ff ff8c 	bl	800a7f0 <__hexdig_fun>
 800a8d8:	1e43      	subs	r3, r0, #1
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b18      	cmp	r3, #24
 800a8de:	d830      	bhi.n	800a942 <__gethex+0x126>
 800a8e0:	f1a0 0210 	sub.w	r2, r0, #16
 800a8e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a8e8:	f7ff ff82 	bl	800a7f0 <__hexdig_fun>
 800a8ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800a8f0:	fa5f fc8c 	uxtb.w	ip, ip
 800a8f4:	f1bc 0f18 	cmp.w	ip, #24
 800a8f8:	f04f 030a 	mov.w	r3, #10
 800a8fc:	d91e      	bls.n	800a93c <__gethex+0x120>
 800a8fe:	b104      	cbz	r4, 800a902 <__gethex+0xe6>
 800a900:	4252      	negs	r2, r2
 800a902:	4417      	add	r7, r2
 800a904:	f8ca 1000 	str.w	r1, [sl]
 800a908:	b1ed      	cbz	r5, 800a946 <__gethex+0x12a>
 800a90a:	f1bb 0f00 	cmp.w	fp, #0
 800a90e:	bf0c      	ite	eq
 800a910:	2506      	moveq	r5, #6
 800a912:	2500      	movne	r5, #0
 800a914:	4628      	mov	r0, r5
 800a916:	b005      	add	sp, #20
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	2500      	movs	r5, #0
 800a91e:	462c      	mov	r4, r5
 800a920:	e7b0      	b.n	800a884 <__gethex+0x68>
 800a922:	2c00      	cmp	r4, #0
 800a924:	d1c7      	bne.n	800a8b6 <__gethex+0x9a>
 800a926:	4627      	mov	r7, r4
 800a928:	e7c7      	b.n	800a8ba <__gethex+0x9e>
 800a92a:	464e      	mov	r6, r9
 800a92c:	462f      	mov	r7, r5
 800a92e:	2501      	movs	r5, #1
 800a930:	e7c3      	b.n	800a8ba <__gethex+0x9e>
 800a932:	2400      	movs	r4, #0
 800a934:	1cb1      	adds	r1, r6, #2
 800a936:	e7cc      	b.n	800a8d2 <__gethex+0xb6>
 800a938:	2401      	movs	r4, #1
 800a93a:	e7fb      	b.n	800a934 <__gethex+0x118>
 800a93c:	fb03 0002 	mla	r0, r3, r2, r0
 800a940:	e7ce      	b.n	800a8e0 <__gethex+0xc4>
 800a942:	4631      	mov	r1, r6
 800a944:	e7de      	b.n	800a904 <__gethex+0xe8>
 800a946:	eba6 0309 	sub.w	r3, r6, r9
 800a94a:	3b01      	subs	r3, #1
 800a94c:	4629      	mov	r1, r5
 800a94e:	2b07      	cmp	r3, #7
 800a950:	dc0a      	bgt.n	800a968 <__gethex+0x14c>
 800a952:	9801      	ldr	r0, [sp, #4]
 800a954:	f7fe f93c 	bl	8008bd0 <_Balloc>
 800a958:	4604      	mov	r4, r0
 800a95a:	b940      	cbnz	r0, 800a96e <__gethex+0x152>
 800a95c:	4b5c      	ldr	r3, [pc, #368]	@ (800aad0 <__gethex+0x2b4>)
 800a95e:	4602      	mov	r2, r0
 800a960:	21e4      	movs	r1, #228	@ 0xe4
 800a962:	485c      	ldr	r0, [pc, #368]	@ (800aad4 <__gethex+0x2b8>)
 800a964:	f7ff fec0 	bl	800a6e8 <__assert_func>
 800a968:	3101      	adds	r1, #1
 800a96a:	105b      	asrs	r3, r3, #1
 800a96c:	e7ef      	b.n	800a94e <__gethex+0x132>
 800a96e:	f100 0a14 	add.w	sl, r0, #20
 800a972:	2300      	movs	r3, #0
 800a974:	4655      	mov	r5, sl
 800a976:	469b      	mov	fp, r3
 800a978:	45b1      	cmp	r9, r6
 800a97a:	d337      	bcc.n	800a9ec <__gethex+0x1d0>
 800a97c:	f845 bb04 	str.w	fp, [r5], #4
 800a980:	eba5 050a 	sub.w	r5, r5, sl
 800a984:	10ad      	asrs	r5, r5, #2
 800a986:	6125      	str	r5, [r4, #16]
 800a988:	4658      	mov	r0, fp
 800a98a:	f7fe fa13 	bl	8008db4 <__hi0bits>
 800a98e:	016d      	lsls	r5, r5, #5
 800a990:	f8d8 6000 	ldr.w	r6, [r8]
 800a994:	1a2d      	subs	r5, r5, r0
 800a996:	42b5      	cmp	r5, r6
 800a998:	dd54      	ble.n	800aa44 <__gethex+0x228>
 800a99a:	1bad      	subs	r5, r5, r6
 800a99c:	4629      	mov	r1, r5
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f7fe fda7 	bl	80094f2 <__any_on>
 800a9a4:	4681      	mov	r9, r0
 800a9a6:	b178      	cbz	r0, 800a9c8 <__gethex+0x1ac>
 800a9a8:	1e6b      	subs	r3, r5, #1
 800a9aa:	1159      	asrs	r1, r3, #5
 800a9ac:	f003 021f 	and.w	r2, r3, #31
 800a9b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a9b4:	f04f 0901 	mov.w	r9, #1
 800a9b8:	fa09 f202 	lsl.w	r2, r9, r2
 800a9bc:	420a      	tst	r2, r1
 800a9be:	d003      	beq.n	800a9c8 <__gethex+0x1ac>
 800a9c0:	454b      	cmp	r3, r9
 800a9c2:	dc36      	bgt.n	800aa32 <__gethex+0x216>
 800a9c4:	f04f 0902 	mov.w	r9, #2
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7ff febe 	bl	800a74c <rshift>
 800a9d0:	442f      	add	r7, r5
 800a9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9d6:	42bb      	cmp	r3, r7
 800a9d8:	da42      	bge.n	800aa60 <__gethex+0x244>
 800a9da:	9801      	ldr	r0, [sp, #4]
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f7fe f937 	bl	8008c50 <_Bfree>
 800a9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	25a3      	movs	r5, #163	@ 0xa3
 800a9ea:	e793      	b.n	800a914 <__gethex+0xf8>
 800a9ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a9f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a9f2:	d012      	beq.n	800aa1a <__gethex+0x1fe>
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d104      	bne.n	800aa02 <__gethex+0x1e6>
 800a9f8:	f845 bb04 	str.w	fp, [r5], #4
 800a9fc:	f04f 0b00 	mov.w	fp, #0
 800aa00:	465b      	mov	r3, fp
 800aa02:	7830      	ldrb	r0, [r6, #0]
 800aa04:	9303      	str	r3, [sp, #12]
 800aa06:	f7ff fef3 	bl	800a7f0 <__hexdig_fun>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	f000 000f 	and.w	r0, r0, #15
 800aa10:	4098      	lsls	r0, r3
 800aa12:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa16:	3304      	adds	r3, #4
 800aa18:	e7ae      	b.n	800a978 <__gethex+0x15c>
 800aa1a:	45b1      	cmp	r9, r6
 800aa1c:	d8ea      	bhi.n	800a9f4 <__gethex+0x1d8>
 800aa1e:	492b      	ldr	r1, [pc, #172]	@ (800aacc <__gethex+0x2b0>)
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	2201      	movs	r2, #1
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff fe27 	bl	800a678 <strncmp>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d1e1      	bne.n	800a9f4 <__gethex+0x1d8>
 800aa30:	e7a2      	b.n	800a978 <__gethex+0x15c>
 800aa32:	1ea9      	subs	r1, r5, #2
 800aa34:	4620      	mov	r0, r4
 800aa36:	f7fe fd5c 	bl	80094f2 <__any_on>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0c2      	beq.n	800a9c4 <__gethex+0x1a8>
 800aa3e:	f04f 0903 	mov.w	r9, #3
 800aa42:	e7c1      	b.n	800a9c8 <__gethex+0x1ac>
 800aa44:	da09      	bge.n	800aa5a <__gethex+0x23e>
 800aa46:	1b75      	subs	r5, r6, r5
 800aa48:	4621      	mov	r1, r4
 800aa4a:	9801      	ldr	r0, [sp, #4]
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	f7fe fb17 	bl	8009080 <__lshift>
 800aa52:	1b7f      	subs	r7, r7, r5
 800aa54:	4604      	mov	r4, r0
 800aa56:	f100 0a14 	add.w	sl, r0, #20
 800aa5a:	f04f 0900 	mov.w	r9, #0
 800aa5e:	e7b8      	b.n	800a9d2 <__gethex+0x1b6>
 800aa60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa64:	42bd      	cmp	r5, r7
 800aa66:	dd6f      	ble.n	800ab48 <__gethex+0x32c>
 800aa68:	1bed      	subs	r5, r5, r7
 800aa6a:	42ae      	cmp	r6, r5
 800aa6c:	dc34      	bgt.n	800aad8 <__gethex+0x2bc>
 800aa6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d022      	beq.n	800aabc <__gethex+0x2a0>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d024      	beq.n	800aac4 <__gethex+0x2a8>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d115      	bne.n	800aaaa <__gethex+0x28e>
 800aa7e:	42ae      	cmp	r6, r5
 800aa80:	d113      	bne.n	800aaaa <__gethex+0x28e>
 800aa82:	2e01      	cmp	r6, #1
 800aa84:	d10b      	bne.n	800aa9e <__gethex+0x282>
 800aa86:	9a02      	ldr	r2, [sp, #8]
 800aa88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	2301      	movs	r3, #1
 800aa90:	6123      	str	r3, [r4, #16]
 800aa92:	f8ca 3000 	str.w	r3, [sl]
 800aa96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa98:	2562      	movs	r5, #98	@ 0x62
 800aa9a:	601c      	str	r4, [r3, #0]
 800aa9c:	e73a      	b.n	800a914 <__gethex+0xf8>
 800aa9e:	1e71      	subs	r1, r6, #1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f7fe fd26 	bl	80094f2 <__any_on>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d1ed      	bne.n	800aa86 <__gethex+0x26a>
 800aaaa:	9801      	ldr	r0, [sp, #4]
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7fe f8cf 	bl	8008c50 <_Bfree>
 800aab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aab4:	2300      	movs	r3, #0
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	2550      	movs	r5, #80	@ 0x50
 800aaba:	e72b      	b.n	800a914 <__gethex+0xf8>
 800aabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f3      	bne.n	800aaaa <__gethex+0x28e>
 800aac2:	e7e0      	b.n	800aa86 <__gethex+0x26a>
 800aac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1dd      	bne.n	800aa86 <__gethex+0x26a>
 800aaca:	e7ee      	b.n	800aaaa <__gethex+0x28e>
 800aacc:	0800c3e8 	.word	0x0800c3e8
 800aad0:	0800c281 	.word	0x0800c281
 800aad4:	0800c596 	.word	0x0800c596
 800aad8:	1e6f      	subs	r7, r5, #1
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	d130      	bne.n	800ab42 <__gethex+0x326>
 800aae0:	b127      	cbz	r7, 800aaec <__gethex+0x2d0>
 800aae2:	4639      	mov	r1, r7
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7fe fd04 	bl	80094f2 <__any_on>
 800aaea:	4681      	mov	r9, r0
 800aaec:	117a      	asrs	r2, r7, #5
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aaf4:	f007 071f 	and.w	r7, r7, #31
 800aaf8:	40bb      	lsls	r3, r7
 800aafa:	4213      	tst	r3, r2
 800aafc:	4629      	mov	r1, r5
 800aafe:	4620      	mov	r0, r4
 800ab00:	bf18      	it	ne
 800ab02:	f049 0902 	orrne.w	r9, r9, #2
 800ab06:	f7ff fe21 	bl	800a74c <rshift>
 800ab0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab0e:	1b76      	subs	r6, r6, r5
 800ab10:	2502      	movs	r5, #2
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	d047      	beq.n	800aba8 <__gethex+0x38c>
 800ab18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d015      	beq.n	800ab4c <__gethex+0x330>
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d017      	beq.n	800ab54 <__gethex+0x338>
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d109      	bne.n	800ab3c <__gethex+0x320>
 800ab28:	f019 0f02 	tst.w	r9, #2
 800ab2c:	d006      	beq.n	800ab3c <__gethex+0x320>
 800ab2e:	f8da 3000 	ldr.w	r3, [sl]
 800ab32:	ea49 0903 	orr.w	r9, r9, r3
 800ab36:	f019 0f01 	tst.w	r9, #1
 800ab3a:	d10e      	bne.n	800ab5a <__gethex+0x33e>
 800ab3c:	f045 0510 	orr.w	r5, r5, #16
 800ab40:	e032      	b.n	800aba8 <__gethex+0x38c>
 800ab42:	f04f 0901 	mov.w	r9, #1
 800ab46:	e7d1      	b.n	800aaec <__gethex+0x2d0>
 800ab48:	2501      	movs	r5, #1
 800ab4a:	e7e2      	b.n	800ab12 <__gethex+0x2f6>
 800ab4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab4e:	f1c3 0301 	rsb	r3, r3, #1
 800ab52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0f0      	beq.n	800ab3c <__gethex+0x320>
 800ab5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab5e:	f104 0314 	add.w	r3, r4, #20
 800ab62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab6a:	f04f 0c00 	mov.w	ip, #0
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab78:	d01b      	beq.n	800abb2 <__gethex+0x396>
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	6002      	str	r2, [r0, #0]
 800ab7e:	2d02      	cmp	r5, #2
 800ab80:	f104 0314 	add.w	r3, r4, #20
 800ab84:	d13c      	bne.n	800ac00 <__gethex+0x3e4>
 800ab86:	f8d8 2000 	ldr.w	r2, [r8]
 800ab8a:	3a01      	subs	r2, #1
 800ab8c:	42b2      	cmp	r2, r6
 800ab8e:	d109      	bne.n	800aba4 <__gethex+0x388>
 800ab90:	1171      	asrs	r1, r6, #5
 800ab92:	2201      	movs	r2, #1
 800ab94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab98:	f006 061f 	and.w	r6, r6, #31
 800ab9c:	fa02 f606 	lsl.w	r6, r2, r6
 800aba0:	421e      	tst	r6, r3
 800aba2:	d13a      	bne.n	800ac1a <__gethex+0x3fe>
 800aba4:	f045 0520 	orr.w	r5, r5, #32
 800aba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abaa:	601c      	str	r4, [r3, #0]
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	601f      	str	r7, [r3, #0]
 800abb0:	e6b0      	b.n	800a914 <__gethex+0xf8>
 800abb2:	4299      	cmp	r1, r3
 800abb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800abb8:	d8d9      	bhi.n	800ab6e <__gethex+0x352>
 800abba:	68a3      	ldr	r3, [r4, #8]
 800abbc:	459b      	cmp	fp, r3
 800abbe:	db17      	blt.n	800abf0 <__gethex+0x3d4>
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	9801      	ldr	r0, [sp, #4]
 800abc4:	3101      	adds	r1, #1
 800abc6:	f7fe f803 	bl	8008bd0 <_Balloc>
 800abca:	4681      	mov	r9, r0
 800abcc:	b918      	cbnz	r0, 800abd6 <__gethex+0x3ba>
 800abce:	4b1a      	ldr	r3, [pc, #104]	@ (800ac38 <__gethex+0x41c>)
 800abd0:	4602      	mov	r2, r0
 800abd2:	2184      	movs	r1, #132	@ 0x84
 800abd4:	e6c5      	b.n	800a962 <__gethex+0x146>
 800abd6:	6922      	ldr	r2, [r4, #16]
 800abd8:	3202      	adds	r2, #2
 800abda:	f104 010c 	add.w	r1, r4, #12
 800abde:	0092      	lsls	r2, r2, #2
 800abe0:	300c      	adds	r0, #12
 800abe2:	f7ff fd6b 	bl	800a6bc <memcpy>
 800abe6:	4621      	mov	r1, r4
 800abe8:	9801      	ldr	r0, [sp, #4]
 800abea:	f7fe f831 	bl	8008c50 <_Bfree>
 800abee:	464c      	mov	r4, r9
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abf8:	6122      	str	r2, [r4, #16]
 800abfa:	2201      	movs	r2, #1
 800abfc:	615a      	str	r2, [r3, #20]
 800abfe:	e7be      	b.n	800ab7e <__gethex+0x362>
 800ac00:	6922      	ldr	r2, [r4, #16]
 800ac02:	455a      	cmp	r2, fp
 800ac04:	dd0b      	ble.n	800ac1e <__gethex+0x402>
 800ac06:	2101      	movs	r1, #1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff fd9f 	bl	800a74c <rshift>
 800ac0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac12:	3701      	adds	r7, #1
 800ac14:	42bb      	cmp	r3, r7
 800ac16:	f6ff aee0 	blt.w	800a9da <__gethex+0x1be>
 800ac1a:	2501      	movs	r5, #1
 800ac1c:	e7c2      	b.n	800aba4 <__gethex+0x388>
 800ac1e:	f016 061f 	ands.w	r6, r6, #31
 800ac22:	d0fa      	beq.n	800ac1a <__gethex+0x3fe>
 800ac24:	4453      	add	r3, sl
 800ac26:	f1c6 0620 	rsb	r6, r6, #32
 800ac2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac2e:	f7fe f8c1 	bl	8008db4 <__hi0bits>
 800ac32:	42b0      	cmp	r0, r6
 800ac34:	dbe7      	blt.n	800ac06 <__gethex+0x3ea>
 800ac36:	e7f0      	b.n	800ac1a <__gethex+0x3fe>
 800ac38:	0800c281 	.word	0x0800c281

0800ac3c <L_shift>:
 800ac3c:	f1c2 0208 	rsb	r2, r2, #8
 800ac40:	0092      	lsls	r2, r2, #2
 800ac42:	b570      	push	{r4, r5, r6, lr}
 800ac44:	f1c2 0620 	rsb	r6, r2, #32
 800ac48:	6843      	ldr	r3, [r0, #4]
 800ac4a:	6804      	ldr	r4, [r0, #0]
 800ac4c:	fa03 f506 	lsl.w	r5, r3, r6
 800ac50:	432c      	orrs	r4, r5
 800ac52:	40d3      	lsrs	r3, r2
 800ac54:	6004      	str	r4, [r0, #0]
 800ac56:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac5a:	4288      	cmp	r0, r1
 800ac5c:	d3f4      	bcc.n	800ac48 <L_shift+0xc>
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}

0800ac60 <__match>:
 800ac60:	b530      	push	{r4, r5, lr}
 800ac62:	6803      	ldr	r3, [r0, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6a:	b914      	cbnz	r4, 800ac72 <__match+0x12>
 800ac6c:	6003      	str	r3, [r0, #0]
 800ac6e:	2001      	movs	r0, #1
 800ac70:	bd30      	pop	{r4, r5, pc}
 800ac72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac7a:	2d19      	cmp	r5, #25
 800ac7c:	bf98      	it	ls
 800ac7e:	3220      	addls	r2, #32
 800ac80:	42a2      	cmp	r2, r4
 800ac82:	d0f0      	beq.n	800ac66 <__match+0x6>
 800ac84:	2000      	movs	r0, #0
 800ac86:	e7f3      	b.n	800ac70 <__match+0x10>

0800ac88 <__hexnan>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	680b      	ldr	r3, [r1, #0]
 800ac8e:	6801      	ldr	r1, [r0, #0]
 800ac90:	115e      	asrs	r6, r3, #5
 800ac92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac96:	f013 031f 	ands.w	r3, r3, #31
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	bf18      	it	ne
 800ac9e:	3604      	addne	r6, #4
 800aca0:	2500      	movs	r5, #0
 800aca2:	1f37      	subs	r7, r6, #4
 800aca4:	4682      	mov	sl, r0
 800aca6:	4690      	mov	r8, r2
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800acae:	46b9      	mov	r9, r7
 800acb0:	463c      	mov	r4, r7
 800acb2:	9502      	str	r5, [sp, #8]
 800acb4:	46ab      	mov	fp, r5
 800acb6:	784a      	ldrb	r2, [r1, #1]
 800acb8:	1c4b      	adds	r3, r1, #1
 800acba:	9303      	str	r3, [sp, #12]
 800acbc:	b342      	cbz	r2, 800ad10 <__hexnan+0x88>
 800acbe:	4610      	mov	r0, r2
 800acc0:	9105      	str	r1, [sp, #20]
 800acc2:	9204      	str	r2, [sp, #16]
 800acc4:	f7ff fd94 	bl	800a7f0 <__hexdig_fun>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d151      	bne.n	800ad70 <__hexnan+0xe8>
 800accc:	9a04      	ldr	r2, [sp, #16]
 800acce:	9905      	ldr	r1, [sp, #20]
 800acd0:	2a20      	cmp	r2, #32
 800acd2:	d818      	bhi.n	800ad06 <__hexnan+0x7e>
 800acd4:	9b02      	ldr	r3, [sp, #8]
 800acd6:	459b      	cmp	fp, r3
 800acd8:	dd13      	ble.n	800ad02 <__hexnan+0x7a>
 800acda:	454c      	cmp	r4, r9
 800acdc:	d206      	bcs.n	800acec <__hexnan+0x64>
 800acde:	2d07      	cmp	r5, #7
 800ace0:	dc04      	bgt.n	800acec <__hexnan+0x64>
 800ace2:	462a      	mov	r2, r5
 800ace4:	4649      	mov	r1, r9
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff ffa8 	bl	800ac3c <L_shift>
 800acec:	4544      	cmp	r4, r8
 800acee:	d952      	bls.n	800ad96 <__hexnan+0x10e>
 800acf0:	2300      	movs	r3, #0
 800acf2:	f1a4 0904 	sub.w	r9, r4, #4
 800acf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800acfa:	f8cd b008 	str.w	fp, [sp, #8]
 800acfe:	464c      	mov	r4, r9
 800ad00:	461d      	mov	r5, r3
 800ad02:	9903      	ldr	r1, [sp, #12]
 800ad04:	e7d7      	b.n	800acb6 <__hexnan+0x2e>
 800ad06:	2a29      	cmp	r2, #41	@ 0x29
 800ad08:	d157      	bne.n	800adba <__hexnan+0x132>
 800ad0a:	3102      	adds	r1, #2
 800ad0c:	f8ca 1000 	str.w	r1, [sl]
 800ad10:	f1bb 0f00 	cmp.w	fp, #0
 800ad14:	d051      	beq.n	800adba <__hexnan+0x132>
 800ad16:	454c      	cmp	r4, r9
 800ad18:	d206      	bcs.n	800ad28 <__hexnan+0xa0>
 800ad1a:	2d07      	cmp	r5, #7
 800ad1c:	dc04      	bgt.n	800ad28 <__hexnan+0xa0>
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4649      	mov	r1, r9
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7ff ff8a 	bl	800ac3c <L_shift>
 800ad28:	4544      	cmp	r4, r8
 800ad2a:	d936      	bls.n	800ad9a <__hexnan+0x112>
 800ad2c:	f1a8 0204 	sub.w	r2, r8, #4
 800ad30:	4623      	mov	r3, r4
 800ad32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad36:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad3a:	429f      	cmp	r7, r3
 800ad3c:	d2f9      	bcs.n	800ad32 <__hexnan+0xaa>
 800ad3e:	1b3b      	subs	r3, r7, r4
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	3401      	adds	r4, #1
 800ad48:	3e03      	subs	r6, #3
 800ad4a:	42b4      	cmp	r4, r6
 800ad4c:	bf88      	it	hi
 800ad4e:	2304      	movhi	r3, #4
 800ad50:	4443      	add	r3, r8
 800ad52:	2200      	movs	r2, #0
 800ad54:	f843 2b04 	str.w	r2, [r3], #4
 800ad58:	429f      	cmp	r7, r3
 800ad5a:	d2fb      	bcs.n	800ad54 <__hexnan+0xcc>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	b91b      	cbnz	r3, 800ad68 <__hexnan+0xe0>
 800ad60:	4547      	cmp	r7, r8
 800ad62:	d128      	bne.n	800adb6 <__hexnan+0x12e>
 800ad64:	2301      	movs	r3, #1
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	2005      	movs	r0, #5
 800ad6a:	b007      	add	sp, #28
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	3501      	adds	r5, #1
 800ad72:	2d08      	cmp	r5, #8
 800ad74:	f10b 0b01 	add.w	fp, fp, #1
 800ad78:	dd06      	ble.n	800ad88 <__hexnan+0x100>
 800ad7a:	4544      	cmp	r4, r8
 800ad7c:	d9c1      	bls.n	800ad02 <__hexnan+0x7a>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad84:	2501      	movs	r5, #1
 800ad86:	3c04      	subs	r4, #4
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	f000 000f 	and.w	r0, r0, #15
 800ad8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad92:	6020      	str	r0, [r4, #0]
 800ad94:	e7b5      	b.n	800ad02 <__hexnan+0x7a>
 800ad96:	2508      	movs	r5, #8
 800ad98:	e7b3      	b.n	800ad02 <__hexnan+0x7a>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0dd      	beq.n	800ad5c <__hexnan+0xd4>
 800ada0:	f1c3 0320 	rsb	r3, r3, #32
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	40da      	lsrs	r2, r3
 800adaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800adae:	4013      	ands	r3, r2
 800adb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800adb4:	e7d2      	b.n	800ad5c <__hexnan+0xd4>
 800adb6:	3f04      	subs	r7, #4
 800adb8:	e7d0      	b.n	800ad5c <__hexnan+0xd4>
 800adba:	2004      	movs	r0, #4
 800adbc:	e7d5      	b.n	800ad6a <__hexnan+0xe2>

0800adbe <__ascii_mbtowc>:
 800adbe:	b082      	sub	sp, #8
 800adc0:	b901      	cbnz	r1, 800adc4 <__ascii_mbtowc+0x6>
 800adc2:	a901      	add	r1, sp, #4
 800adc4:	b142      	cbz	r2, 800add8 <__ascii_mbtowc+0x1a>
 800adc6:	b14b      	cbz	r3, 800addc <__ascii_mbtowc+0x1e>
 800adc8:	7813      	ldrb	r3, [r2, #0]
 800adca:	600b      	str	r3, [r1, #0]
 800adcc:	7812      	ldrb	r2, [r2, #0]
 800adce:	1e10      	subs	r0, r2, #0
 800add0:	bf18      	it	ne
 800add2:	2001      	movne	r0, #1
 800add4:	b002      	add	sp, #8
 800add6:	4770      	bx	lr
 800add8:	4610      	mov	r0, r2
 800adda:	e7fb      	b.n	800add4 <__ascii_mbtowc+0x16>
 800addc:	f06f 0001 	mvn.w	r0, #1
 800ade0:	e7f8      	b.n	800add4 <__ascii_mbtowc+0x16>

0800ade2 <_realloc_r>:
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	4680      	mov	r8, r0
 800ade8:	4615      	mov	r5, r2
 800adea:	460c      	mov	r4, r1
 800adec:	b921      	cbnz	r1, 800adf8 <_realloc_r+0x16>
 800adee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf2:	4611      	mov	r1, r2
 800adf4:	f7fd be60 	b.w	8008ab8 <_malloc_r>
 800adf8:	b92a      	cbnz	r2, 800ae06 <_realloc_r+0x24>
 800adfa:	f7fd fde9 	bl	80089d0 <_free_r>
 800adfe:	2400      	movs	r4, #0
 800ae00:	4620      	mov	r0, r4
 800ae02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae06:	f000 f840 	bl	800ae8a <_malloc_usable_size_r>
 800ae0a:	4285      	cmp	r5, r0
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	d802      	bhi.n	800ae16 <_realloc_r+0x34>
 800ae10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae14:	d8f4      	bhi.n	800ae00 <_realloc_r+0x1e>
 800ae16:	4629      	mov	r1, r5
 800ae18:	4640      	mov	r0, r8
 800ae1a:	f7fd fe4d 	bl	8008ab8 <_malloc_r>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d0ec      	beq.n	800adfe <_realloc_r+0x1c>
 800ae24:	42b5      	cmp	r5, r6
 800ae26:	462a      	mov	r2, r5
 800ae28:	4621      	mov	r1, r4
 800ae2a:	bf28      	it	cs
 800ae2c:	4632      	movcs	r2, r6
 800ae2e:	f7ff fc45 	bl	800a6bc <memcpy>
 800ae32:	4621      	mov	r1, r4
 800ae34:	4640      	mov	r0, r8
 800ae36:	f7fd fdcb 	bl	80089d0 <_free_r>
 800ae3a:	463c      	mov	r4, r7
 800ae3c:	e7e0      	b.n	800ae00 <_realloc_r+0x1e>

0800ae3e <__ascii_wctomb>:
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	b141      	cbz	r1, 800ae56 <__ascii_wctomb+0x18>
 800ae44:	2aff      	cmp	r2, #255	@ 0xff
 800ae46:	d904      	bls.n	800ae52 <__ascii_wctomb+0x14>
 800ae48:	228a      	movs	r2, #138	@ 0x8a
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	4770      	bx	lr
 800ae52:	700a      	strb	r2, [r1, #0]
 800ae54:	2001      	movs	r0, #1
 800ae56:	4770      	bx	lr

0800ae58 <fiprintf>:
 800ae58:	b40e      	push	{r1, r2, r3}
 800ae5a:	b503      	push	{r0, r1, lr}
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	ab03      	add	r3, sp, #12
 800ae60:	4805      	ldr	r0, [pc, #20]	@ (800ae78 <fiprintf+0x20>)
 800ae62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae66:	6800      	ldr	r0, [r0, #0]
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	f000 f83f 	bl	800aeec <_vfiprintf_r>
 800ae6e:	b002      	add	sp, #8
 800ae70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae74:	b003      	add	sp, #12
 800ae76:	4770      	bx	lr
 800ae78:	20000020 	.word	0x20000020

0800ae7c <abort>:
 800ae7c:	b508      	push	{r3, lr}
 800ae7e:	2006      	movs	r0, #6
 800ae80:	f000 fa08 	bl	800b294 <raise>
 800ae84:	2001      	movs	r0, #1
 800ae86:	f7f7 fd63 	bl	8002950 <_exit>

0800ae8a <_malloc_usable_size_r>:
 800ae8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae8e:	1f18      	subs	r0, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bfbc      	itt	lt
 800ae94:	580b      	ldrlt	r3, [r1, r0]
 800ae96:	18c0      	addlt	r0, r0, r3
 800ae98:	4770      	bx	lr

0800ae9a <__sfputc_r>:
 800ae9a:	6893      	ldr	r3, [r2, #8]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	b410      	push	{r4}
 800aea2:	6093      	str	r3, [r2, #8]
 800aea4:	da08      	bge.n	800aeb8 <__sfputc_r+0x1e>
 800aea6:	6994      	ldr	r4, [r2, #24]
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	db01      	blt.n	800aeb0 <__sfputc_r+0x16>
 800aeac:	290a      	cmp	r1, #10
 800aeae:	d103      	bne.n	800aeb8 <__sfputc_r+0x1e>
 800aeb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb4:	f000 b932 	b.w	800b11c <__swbuf_r>
 800aeb8:	6813      	ldr	r3, [r2, #0]
 800aeba:	1c58      	adds	r0, r3, #1
 800aebc:	6010      	str	r0, [r2, #0]
 800aebe:	7019      	strb	r1, [r3, #0]
 800aec0:	4608      	mov	r0, r1
 800aec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <__sfputs_r>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	4606      	mov	r6, r0
 800aecc:	460f      	mov	r7, r1
 800aece:	4614      	mov	r4, r2
 800aed0:	18d5      	adds	r5, r2, r3
 800aed2:	42ac      	cmp	r4, r5
 800aed4:	d101      	bne.n	800aeda <__sfputs_r+0x12>
 800aed6:	2000      	movs	r0, #0
 800aed8:	e007      	b.n	800aeea <__sfputs_r+0x22>
 800aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aede:	463a      	mov	r2, r7
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7ff ffda 	bl	800ae9a <__sfputc_r>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d1f3      	bne.n	800aed2 <__sfputs_r+0xa>
 800aeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aeec <_vfiprintf_r>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	460d      	mov	r5, r1
 800aef2:	b09d      	sub	sp, #116	@ 0x74
 800aef4:	4614      	mov	r4, r2
 800aef6:	4698      	mov	r8, r3
 800aef8:	4606      	mov	r6, r0
 800aefa:	b118      	cbz	r0, 800af04 <_vfiprintf_r+0x18>
 800aefc:	6a03      	ldr	r3, [r0, #32]
 800aefe:	b90b      	cbnz	r3, 800af04 <_vfiprintf_r+0x18>
 800af00:	f7fc fdfa 	bl	8007af8 <__sinit>
 800af04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af06:	07d9      	lsls	r1, r3, #31
 800af08:	d405      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	059a      	lsls	r2, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_vfiprintf_r+0x2a>
 800af10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af12:	f7fc ff08 	bl	8007d26 <__retarget_lock_acquire_recursive>
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	071b      	lsls	r3, r3, #28
 800af1a:	d501      	bpl.n	800af20 <_vfiprintf_r+0x34>
 800af1c:	692b      	ldr	r3, [r5, #16]
 800af1e:	b99b      	cbnz	r3, 800af48 <_vfiprintf_r+0x5c>
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f000 f938 	bl	800b198 <__swsetup_r>
 800af28:	b170      	cbz	r0, 800af48 <_vfiprintf_r+0x5c>
 800af2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af2c:	07dc      	lsls	r4, r3, #31
 800af2e:	d504      	bpl.n	800af3a <_vfiprintf_r+0x4e>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	b01d      	add	sp, #116	@ 0x74
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	0598      	lsls	r0, r3, #22
 800af3e:	d4f7      	bmi.n	800af30 <_vfiprintf_r+0x44>
 800af40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af42:	f7fc fef1 	bl	8007d28 <__retarget_lock_release_recursive>
 800af46:	e7f3      	b.n	800af30 <_vfiprintf_r+0x44>
 800af48:	2300      	movs	r3, #0
 800af4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4c:	2320      	movs	r3, #32
 800af4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af52:	f8cd 800c 	str.w	r8, [sp, #12]
 800af56:	2330      	movs	r3, #48	@ 0x30
 800af58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b108 <_vfiprintf_r+0x21c>
 800af5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af60:	f04f 0901 	mov.w	r9, #1
 800af64:	4623      	mov	r3, r4
 800af66:	469a      	mov	sl, r3
 800af68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6c:	b10a      	cbz	r2, 800af72 <_vfiprintf_r+0x86>
 800af6e:	2a25      	cmp	r2, #37	@ 0x25
 800af70:	d1f9      	bne.n	800af66 <_vfiprintf_r+0x7a>
 800af72:	ebba 0b04 	subs.w	fp, sl, r4
 800af76:	d00b      	beq.n	800af90 <_vfiprintf_r+0xa4>
 800af78:	465b      	mov	r3, fp
 800af7a:	4622      	mov	r2, r4
 800af7c:	4629      	mov	r1, r5
 800af7e:	4630      	mov	r0, r6
 800af80:	f7ff ffa2 	bl	800aec8 <__sfputs_r>
 800af84:	3001      	adds	r0, #1
 800af86:	f000 80a7 	beq.w	800b0d8 <_vfiprintf_r+0x1ec>
 800af8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8c:	445a      	add	r2, fp
 800af8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 809f 	beq.w	800b0d8 <_vfiprintf_r+0x1ec>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa4:	f10a 0a01 	add.w	sl, sl, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800afb2:	4654      	mov	r4, sl
 800afb4:	2205      	movs	r2, #5
 800afb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afba:	4853      	ldr	r0, [pc, #332]	@ (800b108 <_vfiprintf_r+0x21c>)
 800afbc:	f7f5 f908 	bl	80001d0 <memchr>
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	b9d8      	cbnz	r0, 800affc <_vfiprintf_r+0x110>
 800afc4:	06d1      	lsls	r1, r2, #27
 800afc6:	bf44      	itt	mi
 800afc8:	2320      	movmi	r3, #32
 800afca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afce:	0713      	lsls	r3, r2, #28
 800afd0:	bf44      	itt	mi
 800afd2:	232b      	movmi	r3, #43	@ 0x2b
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd8:	f89a 3000 	ldrb.w	r3, [sl]
 800afdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800afde:	d015      	beq.n	800b00c <_vfiprintf_r+0x120>
 800afe0:	9a07      	ldr	r2, [sp, #28]
 800afe2:	4654      	mov	r4, sl
 800afe4:	2000      	movs	r0, #0
 800afe6:	f04f 0c0a 	mov.w	ip, #10
 800afea:	4621      	mov	r1, r4
 800afec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff0:	3b30      	subs	r3, #48	@ 0x30
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	d94b      	bls.n	800b08e <_vfiprintf_r+0x1a2>
 800aff6:	b1b0      	cbz	r0, 800b026 <_vfiprintf_r+0x13a>
 800aff8:	9207      	str	r2, [sp, #28]
 800affa:	e014      	b.n	800b026 <_vfiprintf_r+0x13a>
 800affc:	eba0 0308 	sub.w	r3, r0, r8
 800b000:	fa09 f303 	lsl.w	r3, r9, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	46a2      	mov	sl, r4
 800b00a:	e7d2      	b.n	800afb2 <_vfiprintf_r+0xc6>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	1d19      	adds	r1, r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	9103      	str	r1, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfbb      	ittet	lt
 800b018:	425b      	neglt	r3, r3
 800b01a:	f042 0202 	orrlt.w	r2, r2, #2
 800b01e:	9307      	strge	r3, [sp, #28]
 800b020:	9307      	strlt	r3, [sp, #28]
 800b022:	bfb8      	it	lt
 800b024:	9204      	strlt	r2, [sp, #16]
 800b026:	7823      	ldrb	r3, [r4, #0]
 800b028:	2b2e      	cmp	r3, #46	@ 0x2e
 800b02a:	d10a      	bne.n	800b042 <_vfiprintf_r+0x156>
 800b02c:	7863      	ldrb	r3, [r4, #1]
 800b02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b030:	d132      	bne.n	800b098 <_vfiprintf_r+0x1ac>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	1d1a      	adds	r2, r3, #4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	9203      	str	r2, [sp, #12]
 800b03a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b03e:	3402      	adds	r4, #2
 800b040:	9305      	str	r3, [sp, #20]
 800b042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b118 <_vfiprintf_r+0x22c>
 800b046:	7821      	ldrb	r1, [r4, #0]
 800b048:	2203      	movs	r2, #3
 800b04a:	4650      	mov	r0, sl
 800b04c:	f7f5 f8c0 	bl	80001d0 <memchr>
 800b050:	b138      	cbz	r0, 800b062 <_vfiprintf_r+0x176>
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	eba0 000a 	sub.w	r0, r0, sl
 800b058:	2240      	movs	r2, #64	@ 0x40
 800b05a:	4082      	lsls	r2, r0
 800b05c:	4313      	orrs	r3, r2
 800b05e:	3401      	adds	r4, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	4829      	ldr	r0, [pc, #164]	@ (800b10c <_vfiprintf_r+0x220>)
 800b068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b06c:	2206      	movs	r2, #6
 800b06e:	f7f5 f8af 	bl	80001d0 <memchr>
 800b072:	2800      	cmp	r0, #0
 800b074:	d03f      	beq.n	800b0f6 <_vfiprintf_r+0x20a>
 800b076:	4b26      	ldr	r3, [pc, #152]	@ (800b110 <_vfiprintf_r+0x224>)
 800b078:	bb1b      	cbnz	r3, 800b0c2 <_vfiprintf_r+0x1d6>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	3308      	adds	r3, #8
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b088:	443b      	add	r3, r7
 800b08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08c:	e76a      	b.n	800af64 <_vfiprintf_r+0x78>
 800b08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b092:	460c      	mov	r4, r1
 800b094:	2001      	movs	r0, #1
 800b096:	e7a8      	b.n	800afea <_vfiprintf_r+0xfe>
 800b098:	2300      	movs	r3, #0
 800b09a:	3401      	adds	r4, #1
 800b09c:	9305      	str	r3, [sp, #20]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f04f 0c0a 	mov.w	ip, #10
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0aa:	3a30      	subs	r2, #48	@ 0x30
 800b0ac:	2a09      	cmp	r2, #9
 800b0ae:	d903      	bls.n	800b0b8 <_vfiprintf_r+0x1cc>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0c6      	beq.n	800b042 <_vfiprintf_r+0x156>
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	e7c4      	b.n	800b042 <_vfiprintf_r+0x156>
 800b0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0bc:	4604      	mov	r4, r0
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e7f0      	b.n	800b0a4 <_vfiprintf_r+0x1b8>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4b12      	ldr	r3, [pc, #72]	@ (800b114 <_vfiprintf_r+0x228>)
 800b0ca:	a904      	add	r1, sp, #16
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7fb febb 	bl	8006e48 <_printf_float>
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	1c78      	adds	r0, r7, #1
 800b0d6:	d1d6      	bne.n	800b086 <_vfiprintf_r+0x19a>
 800b0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0da:	07d9      	lsls	r1, r3, #31
 800b0dc:	d405      	bmi.n	800b0ea <_vfiprintf_r+0x1fe>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	059a      	lsls	r2, r3, #22
 800b0e2:	d402      	bmi.n	800b0ea <_vfiprintf_r+0x1fe>
 800b0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0e6:	f7fc fe1f 	bl	8007d28 <__retarget_lock_release_recursive>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	065b      	lsls	r3, r3, #25
 800b0ee:	f53f af1f 	bmi.w	800af30 <_vfiprintf_r+0x44>
 800b0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0f4:	e71e      	b.n	800af34 <_vfiprintf_r+0x48>
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <_vfiprintf_r+0x228>)
 800b0fe:	a904      	add	r1, sp, #16
 800b100:	4630      	mov	r0, r6
 800b102:	f7fc f939 	bl	8007378 <_printf_i>
 800b106:	e7e4      	b.n	800b0d2 <_vfiprintf_r+0x1e6>
 800b108:	0800c541 	.word	0x0800c541
 800b10c:	0800c54b 	.word	0x0800c54b
 800b110:	08006e49 	.word	0x08006e49
 800b114:	0800aec9 	.word	0x0800aec9
 800b118:	0800c547 	.word	0x0800c547

0800b11c <__swbuf_r>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	460e      	mov	r6, r1
 800b120:	4614      	mov	r4, r2
 800b122:	4605      	mov	r5, r0
 800b124:	b118      	cbz	r0, 800b12e <__swbuf_r+0x12>
 800b126:	6a03      	ldr	r3, [r0, #32]
 800b128:	b90b      	cbnz	r3, 800b12e <__swbuf_r+0x12>
 800b12a:	f7fc fce5 	bl	8007af8 <__sinit>
 800b12e:	69a3      	ldr	r3, [r4, #24]
 800b130:	60a3      	str	r3, [r4, #8]
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	071a      	lsls	r2, r3, #28
 800b136:	d501      	bpl.n	800b13c <__swbuf_r+0x20>
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	b943      	cbnz	r3, 800b14e <__swbuf_r+0x32>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 f82a 	bl	800b198 <__swsetup_r>
 800b144:	b118      	cbz	r0, 800b14e <__swbuf_r+0x32>
 800b146:	f04f 37ff 	mov.w	r7, #4294967295
 800b14a:	4638      	mov	r0, r7
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	6922      	ldr	r2, [r4, #16]
 800b152:	1a98      	subs	r0, r3, r2
 800b154:	6963      	ldr	r3, [r4, #20]
 800b156:	b2f6      	uxtb	r6, r6
 800b158:	4283      	cmp	r3, r0
 800b15a:	4637      	mov	r7, r6
 800b15c:	dc05      	bgt.n	800b16a <__swbuf_r+0x4e>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f7ff fa47 	bl	800a5f4 <_fflush_r>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1ed      	bne.n	800b146 <__swbuf_r+0x2a>
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	60a3      	str	r3, [r4, #8]
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	6022      	str	r2, [r4, #0]
 800b176:	701e      	strb	r6, [r3, #0]
 800b178:	6962      	ldr	r2, [r4, #20]
 800b17a:	1c43      	adds	r3, r0, #1
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d004      	beq.n	800b18a <__swbuf_r+0x6e>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	07db      	lsls	r3, r3, #31
 800b184:	d5e1      	bpl.n	800b14a <__swbuf_r+0x2e>
 800b186:	2e0a      	cmp	r6, #10
 800b188:	d1df      	bne.n	800b14a <__swbuf_r+0x2e>
 800b18a:	4621      	mov	r1, r4
 800b18c:	4628      	mov	r0, r5
 800b18e:	f7ff fa31 	bl	800a5f4 <_fflush_r>
 800b192:	2800      	cmp	r0, #0
 800b194:	d0d9      	beq.n	800b14a <__swbuf_r+0x2e>
 800b196:	e7d6      	b.n	800b146 <__swbuf_r+0x2a>

0800b198 <__swsetup_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4b29      	ldr	r3, [pc, #164]	@ (800b240 <__swsetup_r+0xa8>)
 800b19c:	4605      	mov	r5, r0
 800b19e:	6818      	ldr	r0, [r3, #0]
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	b118      	cbz	r0, 800b1ac <__swsetup_r+0x14>
 800b1a4:	6a03      	ldr	r3, [r0, #32]
 800b1a6:	b90b      	cbnz	r3, 800b1ac <__swsetup_r+0x14>
 800b1a8:	f7fc fca6 	bl	8007af8 <__sinit>
 800b1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b0:	0719      	lsls	r1, r3, #28
 800b1b2:	d422      	bmi.n	800b1fa <__swsetup_r+0x62>
 800b1b4:	06da      	lsls	r2, r3, #27
 800b1b6:	d407      	bmi.n	800b1c8 <__swsetup_r+0x30>
 800b1b8:	2209      	movs	r2, #9
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	e033      	b.n	800b230 <__swsetup_r+0x98>
 800b1c8:	0758      	lsls	r0, r3, #29
 800b1ca:	d512      	bpl.n	800b1f2 <__swsetup_r+0x5a>
 800b1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1ce:	b141      	cbz	r1, 800b1e2 <__swsetup_r+0x4a>
 800b1d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d002      	beq.n	800b1de <__swsetup_r+0x46>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7fd fbf9 	bl	80089d0 <_free_r>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1e8:	81a3      	strh	r3, [r4, #12]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	6063      	str	r3, [r4, #4]
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	f043 0308 	orr.w	r3, r3, #8
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	b94b      	cbnz	r3, 800b212 <__swsetup_r+0x7a>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b208:	d003      	beq.n	800b212 <__swsetup_r+0x7a>
 800b20a:	4621      	mov	r1, r4
 800b20c:	4628      	mov	r0, r5
 800b20e:	f000 f883 	bl	800b318 <__smakebuf_r>
 800b212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b216:	f013 0201 	ands.w	r2, r3, #1
 800b21a:	d00a      	beq.n	800b232 <__swsetup_r+0x9a>
 800b21c:	2200      	movs	r2, #0
 800b21e:	60a2      	str	r2, [r4, #8]
 800b220:	6962      	ldr	r2, [r4, #20]
 800b222:	4252      	negs	r2, r2
 800b224:	61a2      	str	r2, [r4, #24]
 800b226:	6922      	ldr	r2, [r4, #16]
 800b228:	b942      	cbnz	r2, 800b23c <__swsetup_r+0xa4>
 800b22a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b22e:	d1c5      	bne.n	800b1bc <__swsetup_r+0x24>
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	0799      	lsls	r1, r3, #30
 800b234:	bf58      	it	pl
 800b236:	6962      	ldrpl	r2, [r4, #20]
 800b238:	60a2      	str	r2, [r4, #8]
 800b23a:	e7f4      	b.n	800b226 <__swsetup_r+0x8e>
 800b23c:	2000      	movs	r0, #0
 800b23e:	e7f7      	b.n	800b230 <__swsetup_r+0x98>
 800b240:	20000020 	.word	0x20000020

0800b244 <_raise_r>:
 800b244:	291f      	cmp	r1, #31
 800b246:	b538      	push	{r3, r4, r5, lr}
 800b248:	4605      	mov	r5, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	d904      	bls.n	800b258 <_raise_r+0x14>
 800b24e:	2316      	movs	r3, #22
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	f04f 30ff 	mov.w	r0, #4294967295
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b25a:	b112      	cbz	r2, 800b262 <_raise_r+0x1e>
 800b25c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b260:	b94b      	cbnz	r3, 800b276 <_raise_r+0x32>
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f830 	bl	800b2c8 <_getpid_r>
 800b268:	4622      	mov	r2, r4
 800b26a:	4601      	mov	r1, r0
 800b26c:	4628      	mov	r0, r5
 800b26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b272:	f000 b817 	b.w	800b2a4 <_kill_r>
 800b276:	2b01      	cmp	r3, #1
 800b278:	d00a      	beq.n	800b290 <_raise_r+0x4c>
 800b27a:	1c59      	adds	r1, r3, #1
 800b27c:	d103      	bne.n	800b286 <_raise_r+0x42>
 800b27e:	2316      	movs	r3, #22
 800b280:	6003      	str	r3, [r0, #0]
 800b282:	2001      	movs	r0, #1
 800b284:	e7e7      	b.n	800b256 <_raise_r+0x12>
 800b286:	2100      	movs	r1, #0
 800b288:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b28c:	4620      	mov	r0, r4
 800b28e:	4798      	blx	r3
 800b290:	2000      	movs	r0, #0
 800b292:	e7e0      	b.n	800b256 <_raise_r+0x12>

0800b294 <raise>:
 800b294:	4b02      	ldr	r3, [pc, #8]	@ (800b2a0 <raise+0xc>)
 800b296:	4601      	mov	r1, r0
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	f7ff bfd3 	b.w	800b244 <_raise_r>
 800b29e:	bf00      	nop
 800b2a0:	20000020 	.word	0x20000020

0800b2a4 <_kill_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	@ (800b2c4 <_kill_r+0x20>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	602b      	str	r3, [r5, #0]
 800b2b2:	f7f7 fb3d 	bl	8002930 <_kill>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	d102      	bne.n	800b2c0 <_kill_r+0x1c>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	b103      	cbz	r3, 800b2c0 <_kill_r+0x1c>
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	bd38      	pop	{r3, r4, r5, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200009f8 	.word	0x200009f8

0800b2c8 <_getpid_r>:
 800b2c8:	f7f7 bb2a 	b.w	8002920 <_getpid>

0800b2cc <__swhatbuf_r>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	b096      	sub	sp, #88	@ 0x58
 800b2d8:	4615      	mov	r5, r2
 800b2da:	461e      	mov	r6, r3
 800b2dc:	da0d      	bge.n	800b2fa <__swhatbuf_r+0x2e>
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2e4:	f04f 0100 	mov.w	r1, #0
 800b2e8:	bf14      	ite	ne
 800b2ea:	2340      	movne	r3, #64	@ 0x40
 800b2ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	6031      	str	r1, [r6, #0]
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	b016      	add	sp, #88	@ 0x58
 800b2f8:	bd70      	pop	{r4, r5, r6, pc}
 800b2fa:	466a      	mov	r2, sp
 800b2fc:	f000 f848 	bl	800b390 <_fstat_r>
 800b300:	2800      	cmp	r0, #0
 800b302:	dbec      	blt.n	800b2de <__swhatbuf_r+0x12>
 800b304:	9901      	ldr	r1, [sp, #4]
 800b306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b30a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b30e:	4259      	negs	r1, r3
 800b310:	4159      	adcs	r1, r3
 800b312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b316:	e7eb      	b.n	800b2f0 <__swhatbuf_r+0x24>

0800b318 <__smakebuf_r>:
 800b318:	898b      	ldrh	r3, [r1, #12]
 800b31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b31c:	079d      	lsls	r5, r3, #30
 800b31e:	4606      	mov	r6, r0
 800b320:	460c      	mov	r4, r1
 800b322:	d507      	bpl.n	800b334 <__smakebuf_r+0x1c>
 800b324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	2301      	movs	r3, #1
 800b32e:	6163      	str	r3, [r4, #20]
 800b330:	b003      	add	sp, #12
 800b332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b334:	ab01      	add	r3, sp, #4
 800b336:	466a      	mov	r2, sp
 800b338:	f7ff ffc8 	bl	800b2cc <__swhatbuf_r>
 800b33c:	9f00      	ldr	r7, [sp, #0]
 800b33e:	4605      	mov	r5, r0
 800b340:	4639      	mov	r1, r7
 800b342:	4630      	mov	r0, r6
 800b344:	f7fd fbb8 	bl	8008ab8 <_malloc_r>
 800b348:	b948      	cbnz	r0, 800b35e <__smakebuf_r+0x46>
 800b34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b34e:	059a      	lsls	r2, r3, #22
 800b350:	d4ee      	bmi.n	800b330 <__smakebuf_r+0x18>
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	f043 0302 	orr.w	r3, r3, #2
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	e7e2      	b.n	800b324 <__smakebuf_r+0xc>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	6020      	str	r0, [r4, #0]
 800b362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	9b01      	ldr	r3, [sp, #4]
 800b36a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b36e:	b15b      	cbz	r3, 800b388 <__smakebuf_r+0x70>
 800b370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b374:	4630      	mov	r0, r6
 800b376:	f000 f81d 	bl	800b3b4 <_isatty_r>
 800b37a:	b128      	cbz	r0, 800b388 <__smakebuf_r+0x70>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f023 0303 	bic.w	r3, r3, #3
 800b382:	f043 0301 	orr.w	r3, r3, #1
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	431d      	orrs	r5, r3
 800b38c:	81a5      	strh	r5, [r4, #12]
 800b38e:	e7cf      	b.n	800b330 <__smakebuf_r+0x18>

0800b390 <_fstat_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	@ (800b3b0 <_fstat_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f7 fb27 	bl	80029f0 <_fstat>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_fstat_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_fstat_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200009f8 	.word	0x200009f8

0800b3b4 <_isatty_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	@ (800b3d0 <_isatty_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f7 fb26 	bl	8002a10 <_isatty>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_isatty_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_isatty_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	200009f8 	.word	0x200009f8

0800b3d4 <_init>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_fini>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr
